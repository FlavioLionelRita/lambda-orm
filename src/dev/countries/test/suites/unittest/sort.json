{
  "name": "sort",
  "cases": [
    {
      "name": "normalize",
      "tests": [
        {
          "test": "Countries.map(p=> {region:p.region,countries:count(1)}).sort(p=> p.countries)",
          "result": "Countries.map(p=>{region:p.region,countries:count(1)}).sort(p=>asc(p.countries))"
        },
        {
          "test": "Countries.filter(p=> p.subregion == \"South America\").map(p=> p.iso3).sort(p=> desc(iso3))",
          "result": "Countries.map(p=>{iso3:p.iso3}).filter(p=>(p.subregion==South America)).sort(p=>desc(iso3))"
        },
        {
          "test": "Countries.map(p=> {region:p.region,max:max(p.latitude)}).sort(p=> asc(p.max))",
          "result": "Countries.map(p=>{region:p.region,max:max(p.latitude)}).sort(p=>asc(p.max))"
        }
      ],
      "errors": 0
    },
    {
      "name": "model",
      "tests": [
        {
          "test": "Countries.map(p=> {region:p.region,countries:count(1)}).sort(p=> p.countries)",
          "result": [
            {
              "name": "region",
              "type": "string"
            },
            {
              "name": "countries",
              "type": "integer"
            }
          ]
        },
        {
          "test": "Countries.filter(p=> p.subregion == \"South America\").map(p=> p.iso3).sort(p=> desc(iso3))",
          "result": [
            {
              "name": "iso3",
              "type": "string"
            }
          ]
        },
        {
          "test": "Countries.map(p=> {region:p.region,max:max(p.latitude)}).sort(p=> asc(p.max))",
          "result": [
            {
              "name": "region",
              "type": "string"
            },
            {
              "name": "max",
              "type": "any"
            }
          ]
        }
      ],
      "errors": 0
    },
    {
      "name": "parameters",
      "tests": [
        {
          "test": "Countries.map(p=> {region:p.region,countries:count(1)}).sort(p=> p.countries)",
          "result": []
        },
        {
          "test": "Countries.filter(p=> p.subregion == \"South America\").map(p=> p.iso3).sort(p=> desc(iso3))",
          "result": [
            {
              "name": "iso3",
              "type": "any"
            }
          ]
        },
        {
          "test": "Countries.map(p=> {region:p.region,max:max(p.latitude)}).sort(p=> asc(p.max))",
          "result": []
        }
      ],
      "errors": 0
    },
    {
      "name": "constraints",
      "tests": [
        {
          "test": "Countries.map(p=> {region:p.region,countries:count(1)}).sort(p=> p.countries)",
          "result": {
            "entity": "Countries",
            "constraints": []
          }
        },
        {
          "test": "Countries.filter(p=> p.subregion == \"South America\").map(p=> p.iso3).sort(p=> desc(iso3))",
          "result": {
            "entity": "Countries",
            "constraints": []
          }
        },
        {
          "test": "Countries.map(p=> {region:p.region,max:max(p.latitude)}).sort(p=> asc(p.max))",
          "result": {
            "entity": "Countries",
            "constraints": []
          }
        }
      ],
      "errors": 0
    },
    {
      "name": "metadata",
      "tests": [
        {
          "test": "Countries.map(p=> {region:p.region,countries:count(1)}).sort(p=> p.countries)",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 61
            },
            "name": "select",
            "children": [],
            "type": "any",
            "entity": "Countries",
            "columns": [
              {
                "name": "region",
                "type": "string"
              },
              {
                "name": "countries",
                "type": "integer"
              }
            ],
            "parameters": [],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "select",
            "alias": "c"
          }
        },
        {
          "test": "Countries.filter(p=> p.subregion == \"South America\").map(p=> p.iso3).sort(p=> desc(iso3))",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 74
            },
            "name": "select",
            "children": [],
            "type": "any",
            "entity": "Countries",
            "columns": [
              {
                "name": "iso3",
                "type": "string"
              }
            ],
            "parameters": [
              {
                "name": "iso3",
                "type": "any"
              }
            ],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "select",
            "alias": "c"
          }
        },
        {
          "test": "Countries.map(p=> {region:p.region,max:max(p.latitude)}).sort(p=> asc(p.max))",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 62
            },
            "name": "select",
            "children": [],
            "type": "any",
            "entity": "Countries",
            "columns": [
              {
                "name": "region",
                "type": "string"
              },
              {
                "name": "max",
                "type": "any"
              }
            ],
            "parameters": [],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "select",
            "alias": "c"
          }
        }
      ],
      "errors": 0
    },
    {
      "name": "getInfo",
      "tests": [
        {
          "test": "Countries.map(p=> {region:p.region,countries:count(1)}).sort(p=> p.countries)",
          "result": {
            "entity": "Countries",
            "dialect": "MySQL",
            "source": "dataSource1",
            "sentence": "SELECT c.region AS region, COUNT(1) AS countries FROM Countries c  GROUP BY c.region ORDER BY countries asc ",
            "children": []
          }
        },
        {
          "test": "Countries.filter(p=> p.subregion == \"South America\").map(p=> p.iso3).sort(p=> desc(iso3))",
          "result": {
            "entity": "Countries",
            "dialect": "MySQL",
            "source": "dataSource1",
            "sentence": "SELECT c.iso3 AS iso3 FROM Countries c  WHERE c.subregion = 'South America' ORDER BY ? desc ",
            "children": []
          }
        },
        {
          "test": "Countries.map(p=> {region:p.region,max:max(p.latitude)}).sort(p=> asc(p.max))",
          "result": {
            "entity": "Countries",
            "dialect": "MySQL",
            "source": "dataSource1",
            "sentence": "SELECT c.region AS region, MAX(c.latitude) AS max FROM Countries c  GROUP BY c.region ORDER BY max asc ",
            "children": []
          }
        }
      ],
      "errors": 0
    }
  ],
  "errors": 0
}