name: numeric functions
schema: northwind
context:
  a:
    id: 1
test:
  - name: function abs
    context: a
    sentences:
      - dialect: mariadb
        sentence: >-
          SELECT n.ProductName AS `name`, (n.UnitPrice * -1) AS `source`,
          ROUND(ABS((n.UnitPrice * -1)),10) AS `result` FROM Products n  WHERE
          n.ProductID = ? 
      - dialect: mssql
        sentence: >-
          SELECT n.ProductName AS [name], (n.UnitPrice * -1) AS [source],
          ROUND(ABS((n.UnitPrice * -1)),10) AS [result] FROM Products n  WHERE
          n.ProductID = :id 
      - dialect: mysql
        sentence: >-
          SELECT n.ProductName AS `name`, (n.UnitPrice * -1) AS `source`,
          ROUND(ABS((n.UnitPrice * -1)),10) AS `result` FROM Products n  WHERE
          n.ProductID = ? 
      - dialect: oracle
        sentence: >-
          SELECT n.ProductName AS "name", (n.UnitPrice * -1) AS "source",
          ROUND(ABS((n.UnitPrice * -1)),10) AS "result" FROM Products n  WHERE
          n.ProductID = :id 
      - dialect: postgres
        sentence: >-
          SELECT n.ProductName AS "name", (n.UnitPrice * -1) AS "source",
          ROUND(CAST(ABS((n.UnitPrice * -1)) AS DECIMAL),10) AS "result" FROM
          Products n  WHERE n.ProductID = $1 
    errors: 0
    expression: >-
      northwind_1.Products.filter(p => p.id === id).map(p => ({ name: p.name,
      source: p.price * -1, result: round(abs(p.price * -1), 10) }))
    completeExpression: >-
      northwind_1.Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:(p.price*-1),result:round(abs((p.price*-1)),10)})
    model:
      name: string
      source: any
      result: any
    parameters:
      - name: id
        type: integer
        value: 1
    fields:
      - name: name
        type: string
      - name: source
        type: any
      - name: result
        type: any
    executions:
      - database: mysql
      - database: postgres
    result:
      - name: Chai
        source: -18
        result: 18
  - name: function acos
    context: a
    sentences:
      - dialect: mariadb
        sentence: >-
          SELECT n.ProductName AS `name`, 0.25 AS `source`, ROUND(ACOS(0.25),10)
          AS `result` FROM Products n  WHERE n.ProductID = ? 
      - dialect: mssql
        sentence: >-
          SELECT n.ProductName AS [name], 0.25 AS [source], ROUND(ACOS(0.25),10)
          AS [result] FROM Products n  WHERE n.ProductID = :id 
      - dialect: mysql
        sentence: >-
          SELECT n.ProductName AS `name`, 0.25 AS `source`, ROUND(ACOS(0.25),10)
          AS `result` FROM Products n  WHERE n.ProductID = ? 
      - dialect: oracle
        sentence: >-
          SELECT n.ProductName AS "name", 0.25 AS "source", ROUND(ACOS(0.25),10)
          AS "result" FROM Products n  WHERE n.ProductID = :id 
      - dialect: postgres
        sentence: >-
          SELECT n.ProductName AS "name", 0.25 AS "source",
          ROUND(CAST(ACOS(0.25) AS DECIMAL),10) AS "result" FROM Products n 
          WHERE n.ProductID = $1 
    errors: 0
    expression: >-
      northwind_1.Products.filter(p => p.id === id).map(p => ({ name: p.name,
      source: 0.25, result: round(acos(0.25), 10) }))
    completeExpression: >-
      northwind_1.Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:0.25,result:round(acos(0.25),10)})
    model:
      name: string
      source: any
      result: any
    parameters:
      - name: id
        type: integer
        value: 1
    fields:
      - name: name
        type: string
      - name: source
        type: any
      - name: result
        type: any
    executions:
      - database: mysql
      - database: postgres
    result:
      - name: Chai
        source: 0.25
        result: 1.3181160717
  - name: function asin
    context: a
    sentences:
      - dialect: mariadb
        sentence: >-
          SELECT n.ProductName AS `name`, 0.25 AS `source`, ROUND(ASIN(0.25),10)
          AS `result` FROM Products n  WHERE n.ProductID = ? 
      - dialect: mssql
        sentence: >-
          SELECT n.ProductName AS [name], 0.25 AS [source], ROUND(ASIN(0.25),10)
          AS [result] FROM Products n  WHERE n.ProductID = :id 
      - dialect: mysql
        sentence: >-
          SELECT n.ProductName AS `name`, 0.25 AS `source`, ROUND(ASIN(0.25),10)
          AS `result` FROM Products n  WHERE n.ProductID = ? 
      - dialect: oracle
        sentence: >-
          SELECT n.ProductName AS "name", 0.25 AS "source", ROUND(ASIN(0.25),10)
          AS "result" FROM Products n  WHERE n.ProductID = :id 
      - dialect: postgres
        sentence: >-
          SELECT n.ProductName AS "name", 0.25 AS "source",
          ROUND(CAST(ASIN(0.25) AS DECIMAL),10) AS "result" FROM Products n 
          WHERE n.ProductID = $1 
    errors: 0
    expression: >-
      northwind_1.Products.filter(p => p.id === id).map(p => ({ name: p.name,
      source: 0.25, result: round(asin(0.25), 10) }))
    completeExpression: >-
      northwind_1.Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:0.25,result:round(asin(0.25),10)})
    model:
      name: string
      source: any
      result: any
    parameters:
      - name: id
        type: integer
        value: 1
    fields:
      - name: name
        type: string
      - name: source
        type: any
      - name: result
        type: any
    executions:
      - database: mysql
      - database: postgres
    result:
      - name: Chai
        source: 0.25
        result: 0.2526802551
  - name: function atan
    context: a
    sentences:
      - dialect: mariadb
        sentence: >-
          SELECT n.ProductName AS `name`, 0.25 AS `source`, ROUND(ATAN(0.25),10)
          AS `result` FROM Products n  WHERE n.ProductID = ? 
      - dialect: mssql
        sentence: >-
          SELECT n.ProductName AS [name], 0.25 AS [source], ROUND(ATAN(0.25),10)
          AS [result] FROM Products n  WHERE n.ProductID = :id 
      - dialect: mysql
        sentence: >-
          SELECT n.ProductName AS `name`, 0.25 AS `source`, ROUND(ATAN(0.25),10)
          AS `result` FROM Products n  WHERE n.ProductID = ? 
      - dialect: oracle
        sentence: >-
          SELECT n.ProductName AS "name", 0.25 AS "source", ROUND(ATAN(0.25),10)
          AS "result" FROM Products n  WHERE n.ProductID = :id 
      - dialect: postgres
        sentence: >-
          SELECT n.ProductName AS "name", 0.25 AS "source",
          ROUND(CAST(ATAN(0.25) AS DECIMAL),10) AS "result" FROM Products n 
          WHERE n.ProductID = $1 
    errors: 0
    expression: >-
      northwind_1.Products.filter(p => p.id === id).map(p => ({ name: p.name,
      source: 0.25, result: round(atan(0.25), 10) }))
    completeExpression: >-
      northwind_1.Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:0.25,result:round(atan(0.25),10)})
    model:
      name: string
      source: any
      result: any
    parameters:
      - name: id
        type: integer
        value: 1
    fields:
      - name: name
        type: string
      - name: source
        type: any
      - name: result
        type: any
    executions:
      - database: mysql
      - database: postgres
    result:
      - name: Chai
        source: 0.25
        result: 0.2449786631
  - name: function atan2
    context: a
    sentences:
      - dialect: mariadb
        sentence: >-
          SELECT n.ProductName AS `name`, 0.5 AS `source`,
          ROUND(ATAN(0.25,1),10) AS `result` FROM Products n  WHERE n.ProductID
          = ? 
      - dialect: mssql
        sentence: >-
          SELECT n.ProductName AS [name], 0.5 AS [source],
          ROUND(ATAN2(0.25,1),10) AS [result] FROM Products n  WHERE n.ProductID
          = :id 
      - dialect: mysql
        sentence: >-
          SELECT n.ProductName AS `name`, 0.5 AS `source`,
          ROUND(ATAN(0.25,1),10) AS `result` FROM Products n  WHERE n.ProductID
          = ? 
      - dialect: oracle
        sentence: >-
          SELECT n.ProductName AS "name", 0.5 AS "source",
          ROUND(ATAN2(0.25,1),10) AS "result" FROM Products n  WHERE n.ProductID
          = :id 
      - dialect: postgres
        sentence: >-
          SELECT n.ProductName AS "name", 0.5 AS "source",
          ROUND(CAST(ATAN2(0.25,1) AS DECIMAL),10) AS "result" FROM Products n 
          WHERE n.ProductID = $1 
    errors: 0
    expression: >-
      northwind_1.Products.filter(p => p.id === id).map(p => ({ name: p.name,
      source: 0.50, result: round(atan2(0.25, 1), 10) }))
    completeExpression: >-
      northwind_1.Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:0.5,result:round(atan2(0.25,1),10)})
    model:
      name: string
      source: any
      result: any
    parameters:
      - name: id
        type: integer
        value: 1
    fields:
      - name: name
        type: string
      - name: source
        type: any
      - name: result
        type: any
    executions:
      - database: mysql
      - database: postgres
    result:
      - name: Chai
        source: 0.5
        result: 0.2449786631
  - name: function ceil
    context: a
    sentences:
      - dialect: mariadb
        sentence: >-
          SELECT n.ProductName AS `name`, 25.75 AS `source`,
          ROUND(CEIL(25.75),10) AS `result` FROM Products n  WHERE n.ProductID =
          ? 
      - dialect: mssql
        sentence: >-
          SELECT n.ProductName AS [name], 25.75 AS [source],
          ROUND(CEIL(25.75),10) AS [result] FROM Products n  WHERE n.ProductID =
          :id 
      - dialect: mysql
        sentence: >-
          SELECT n.ProductName AS `name`, 25.75 AS `source`,
          ROUND(CEIL(25.75),10) AS `result` FROM Products n  WHERE n.ProductID =
          ? 
      - dialect: oracle
        sentence: >-
          SELECT n.ProductName AS "name", 25.75 AS "source",
          ROUND(CEIL(25.75),10) AS "result" FROM Products n  WHERE n.ProductID =
          :id 
      - dialect: postgres
        sentence: >-
          SELECT n.ProductName AS "name", 25.75 AS "source",
          ROUND(CAST(CEIL(25.75) AS DECIMAL),10) AS "result" FROM Products n 
          WHERE n.ProductID = $1 
    errors: 0
    expression: >-
      northwind_1.Products.filter(p => p.id === id).map(p => ({ name: p.name,
      source: 25.75, result: round(ceil(25.75), 10) }))
    completeExpression: >-
      northwind_1.Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:25.75,result:round(ceil(25.75),10)})
    model:
      name: string
      source: any
      result: any
    parameters:
      - name: id
        type: integer
        value: 1
    fields:
      - name: name
        type: string
      - name: source
        type: any
      - name: result
        type: any
    executions:
      - database: mysql
      - database: postgres
    result:
      - name: Chai
        source: 25.75
        result: 26
  - name: function cos
    context: a
    sentences:
      - dialect: mariadb
        sentence: >-
          SELECT n.ProductName AS `name`, 2 AS `source`, ROUND(COS(2),10) AS
          `result` FROM Products n  WHERE n.ProductID = ? 
      - dialect: mssql
        sentence: >-
          SELECT n.ProductName AS [name], 2 AS [source], ROUND(COS(2),10) AS
          [result] FROM Products n  WHERE n.ProductID = :id 
      - dialect: mysql
        sentence: >-
          SELECT n.ProductName AS `name`, 2 AS `source`, ROUND(COS(2),10) AS
          `result` FROM Products n  WHERE n.ProductID = ? 
      - dialect: oracle
        sentence: >-
          SELECT n.ProductName AS "name", 2 AS "source", ROUND(COS(2),10) AS
          "result" FROM Products n  WHERE n.ProductID = :id 
      - dialect: postgres
        sentence: >-
          SELECT n.ProductName AS "name", 2 AS "source", ROUND(CAST(COS(2) AS
          DECIMAL),10) AS "result" FROM Products n  WHERE n.ProductID = $1 
    errors: 0
    expression: >-
      northwind_1.Products.filter(p => p.id === id).map(p => ({ name: p.name,
      source: 2, result: round(cos(2), 10) }))
    completeExpression: >-
      northwind_1.Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:2,result:round(cos(2),10)})
    model:
      name: string
      source: any
      result: any
    parameters:
      - name: id
        type: integer
        value: 1
    fields:
      - name: name
        type: string
      - name: source
        type: any
      - name: result
        type: any
    executions:
      - database: mysql
      - database: postgres
    result:
      - name: Chai
        source: 2
        result: -0.4161468365
  - name: function exp
    context: a
    sentences:
      - dialect: mariadb
        sentence: >-
          SELECT n.ProductName AS `name`, 1 AS `source`, ROUND(EXP(1),10) AS
          `result` FROM Products n  WHERE n.ProductID = ? 
      - dialect: mssql
        sentence: >-
          SELECT n.ProductName AS [name], 1 AS [source], ROUND(EXP(1),10) AS
          [result] FROM Products n  WHERE n.ProductID = :id 
      - dialect: mysql
        sentence: >-
          SELECT n.ProductName AS `name`, 1 AS `source`, ROUND(EXP(1),10) AS
          `result` FROM Products n  WHERE n.ProductID = ? 
      - dialect: oracle
        sentence: >-
          SELECT n.ProductName AS "name", 1 AS "source", ROUND(EXP(1),10) AS
          "result" FROM Products n  WHERE n.ProductID = :id 
      - dialect: postgres
        sentence: >-
          SELECT n.ProductName AS "name", 1 AS "source", ROUND(CAST(EXP(1) AS
          DECIMAL),10) AS "result" FROM Products n  WHERE n.ProductID = $1 
    errors: 0
    expression: >-
      northwind_1.Products.filter(p => p.id === id).map(p => ({ name: p.name,
      source: 1, result: round(exp(1), 10) }))
    completeExpression: >-
      northwind_1.Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:1,result:round(exp(1),10)})
    model:
      name: string
      source: any
      result: any
    parameters:
      - name: id
        type: integer
        value: 1
    fields:
      - name: name
        type: string
      - name: source
        type: any
      - name: result
        type: any
    executions:
      - database: mysql
      - database: postgres
    result:
      - name: Chai
        source: 1
        result: 2.7182818285
  - name: function floor
    context: a
    sentences:
      - dialect: mariadb
        sentence: >-
          SELECT n.ProductName AS `name`, 25.75 AS `source`,
          ROUND(FLOOR(25.75),10) AS `result` FROM Products n  WHERE n.ProductID
          = ? 
      - dialect: mssql
        sentence: >-
          SELECT n.ProductName AS [name], 25.75 AS [source],
          ROUND(FLOOR(25.75),10) AS [result] FROM Products n  WHERE n.ProductID
          = :id 
      - dialect: mysql
        sentence: >-
          SELECT n.ProductName AS `name`, 25.75 AS `source`,
          ROUND(FLOOR(25.75),10) AS `result` FROM Products n  WHERE n.ProductID
          = ? 
      - dialect: oracle
        sentence: >-
          SELECT n.ProductName AS "name", 25.75 AS "source",
          ROUND(FLOOR(25.75),10) AS "result" FROM Products n  WHERE n.ProductID
          = :id 
      - dialect: postgres
        sentence: >-
          SELECT n.ProductName AS "name", 25.75 AS "source",
          ROUND(CAST(FLOOR(25.75) AS DECIMAL),10) AS "result" FROM Products n 
          WHERE n.ProductID = $1 
    errors: 0
    expression: >-
      northwind_1.Products.filter(p => p.id === id).map(p => ({ name: p.name,
      source: 25.75, result: round(floor(25.75), 10) }))
    completeExpression: >-
      northwind_1.Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:25.75,result:round(floor(25.75),10)})
    model:
      name: string
      source: any
      result: any
    parameters:
      - name: id
        type: integer
        value: 1
    fields:
      - name: name
        type: string
      - name: source
        type: any
      - name: result
        type: any
    executions:
      - database: mysql
      - database: postgres
    result:
      - name: Chai
        source: 25.75
        result: 25
  - name: function ln
    context: a
    sentences:
      - dialect: mariadb
        sentence: >-
          SELECT n.ProductName AS `name`, 2 AS `source`, ROUND(LN(2),10) AS
          `result` FROM Products n  WHERE n.ProductID = ? 
      - dialect: mssql
        sentence: >-
          SELECT n.ProductName AS [name], 2 AS [source], ROUND(LN(2),10) AS
          [result] FROM Products n  WHERE n.ProductID = :id 
      - dialect: mysql
        sentence: >-
          SELECT n.ProductName AS `name`, 2 AS `source`, ROUND(LN(2),10) AS
          `result` FROM Products n  WHERE n.ProductID = ? 
      - dialect: oracle
        sentence: >-
          SELECT n.ProductName AS "name", 2 AS "source", ROUND(LN(2),10) AS
          "result" FROM Products n  WHERE n.ProductID = :id 
      - dialect: postgres
        sentence: >-
          SELECT n.ProductName AS "name", 2 AS "source", ROUND(CAST(LN(2) AS
          DECIMAL),10) AS "result" FROM Products n  WHERE n.ProductID = $1 
    errors: 0
    expression: >-
      northwind_1.Products.filter(p => p.id === id).map(p => ({ name: p.name,
      source: 2, result: round(ln(2), 10) }))
    completeExpression: >-
      northwind_1.Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:2,result:round(ln(2),10)})
    model:
      name: string
      source: any
      result: any
    parameters:
      - name: id
        type: integer
        value: 1
    fields:
      - name: name
        type: string
      - name: source
        type: any
      - name: result
        type: any
    executions:
      - database: mysql
      - database: postgres
    result:
      - name: Chai
        source: 2
        result: 0.6931471806
  - name: function log
    context: a
    sentences:
      - dialect: mariadb
        sentence: >-
          SELECT n.ProductName AS `name`, 10 AS `m`, 20 AS `n`,
          ROUND(LOG(10,20),10) AS `result` FROM Products n  WHERE n.ProductID =
          ? 
      - dialect: mssql
        sentence: >-
          SELECT n.ProductName AS [name], 10 AS [m], 20 AS [n],
          ROUND(LOG(10,20),10) AS [result] FROM Products n  WHERE n.ProductID =
          :id 
      - dialect: mysql
        sentence: >-
          SELECT n.ProductName AS `name`, 10 AS `m`, 20 AS `n`,
          ROUND(LOG(10,20),10) AS `result` FROM Products n  WHERE n.ProductID =
          ? 
      - dialect: oracle
        sentence: >-
          SELECT n.ProductName AS "name", 10 AS "m", 20 AS "n",
          ROUND(LOG(10,20),10) AS "result" FROM Products n  WHERE n.ProductID =
          :id 
      - dialect: postgres
        sentence: >-
          SELECT n.ProductName AS "name", 10 AS "m", 20 AS "n",
          ROUND(CAST(LOG(10,20) AS DECIMAL),10) AS "result" FROM Products n 
          WHERE n.ProductID = $1 
    errors: 0
    expression: >-
      northwind_1.Products.filter(p => p.id === id).map(p => ({ name: p.name, m:
      10, n: 20, result: round(log(10, 20), 10) }))
    completeExpression: >-
      northwind_1.Products.filter(p=>(p.id===id)).map(p=>{name:p.name,m:10,n:20,result:round(log(10,20),10)})
    model:
      name: string
      m: any
      'n': any
      result: any
    parameters:
      - name: id
        type: integer
        value: 1
    fields:
      - name: name
        type: string
      - name: m
        type: any
      - name: 'n'
        type: any
      - name: result
        type: any
    executions:
      - database: mysql
      - database: postgres
    result:
      - name: Chai
        m: 10
        'n': 20
        result: 1.3010299957
  - name: function round
    context: a
    sentences:
      - dialect: mariadb
        sentence: >-
          SELECT n.ProductName AS `name`, 135.375 AS `source`, ROUND(135.375,2)
          AS `result` FROM Products n  WHERE n.ProductID = ? 
      - dialect: mssql
        sentence: >-
          SELECT n.ProductName AS [name], 135.375 AS [source], ROUND(135.375,2)
          AS [result] FROM Products n  WHERE n.ProductID = :id 
      - dialect: mysql
        sentence: >-
          SELECT n.ProductName AS `name`, 135.375 AS `source`, ROUND(135.375,2)
          AS `result` FROM Products n  WHERE n.ProductID = ? 
      - dialect: oracle
        sentence: >-
          SELECT n.ProductName AS "name", 135.375 AS "source", ROUND(135.375,2)
          AS "result" FROM Products n  WHERE n.ProductID = :id 
      - dialect: postgres
        sentence: >-
          SELECT n.ProductName AS "name", 135.375 AS "source",
          ROUND(CAST(135.375 AS DECIMAL),2) AS "result" FROM Products n  WHERE
          n.ProductID = $1 
    errors: 0
    expression: >-
      northwind_1.Products.filter(p => p.id === id).map(p => ({ name: p.name,
      source: 135.375, result: round(135.375, 2) }))
    completeExpression: >-
      northwind_1.Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:135.375,result:round(135.375,2)})
    model:
      name: string
      source: any
      result: any
    parameters:
      - name: id
        type: integer
        value: 1
    fields:
      - name: name
        type: string
      - name: source
        type: any
      - name: result
        type: any
    executions:
      - database: mysql
      - database: postgres
    result:
      - name: Chai
        source: 135.375
        result: 135.38
  - name: function sign
    context: a
    sentences:
      - dialect: mariadb
        sentence: >-
          SELECT n.ProductName AS `name`, 255.5 AS `source`,
          ROUND(SIGN(255.5),10) AS `result` FROM Products n  WHERE n.ProductID =
          ? 
      - dialect: mssql
        sentence: >-
          SELECT n.ProductName AS [name], 255.5 AS [source],
          ROUND(SIGN(255.5),10) AS [result] FROM Products n  WHERE n.ProductID =
          :id 
      - dialect: mysql
        sentence: >-
          SELECT n.ProductName AS `name`, 255.5 AS `source`,
          ROUND(SIGN(255.5),10) AS `result` FROM Products n  WHERE n.ProductID =
          ? 
      - dialect: oracle
        sentence: >-
          SELECT n.ProductName AS "name", 255.5 AS "source",
          ROUND(SIGN(255.5),10) AS "result" FROM Products n  WHERE n.ProductID =
          :id 
      - dialect: postgres
        sentence: >-
          SELECT n.ProductName AS "name", 255.5 AS "source",
          ROUND(CAST(SIGN(255.5) AS DECIMAL),10) AS "result" FROM Products n 
          WHERE n.ProductID = $1 
    errors: 0
    expression: >-
      northwind_1.Products.filter(p => p.id === id).map(p => ({ name: p.name,
      source: 255.5, result: round(sign(255.5), 10) }))
    completeExpression: >-
      northwind_1.Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:255.5,result:round(sign(255.5),10)})
    model:
      name: string
      source: any
      result: any
    parameters:
      - name: id
        type: integer
        value: 1
    fields:
      - name: name
        type: string
      - name: source
        type: any
      - name: result
        type: any
    executions:
      - database: mysql
      - database: postgres
    result:
      - name: Chai
        source: 255.5
        result: 1
  - name: function tan
    context: a
    sentences:
      - dialect: mariadb
        sentence: >-
          SELECT n.ProductName AS `name`, 1.75 AS `source`, ROUND(TAN(1.75),10)
          AS `result` FROM Products n  WHERE n.ProductID = ? 
      - dialect: mssql
        sentence: >-
          SELECT n.ProductName AS [name], 1.75 AS [source], ROUND(TAN(1.75),10)
          AS [result] FROM Products n  WHERE n.ProductID = :id 
      - dialect: mysql
        sentence: >-
          SELECT n.ProductName AS `name`, 1.75 AS `source`, ROUND(TAN(1.75),10)
          AS `result` FROM Products n  WHERE n.ProductID = ? 
      - dialect: oracle
        sentence: >-
          SELECT n.ProductName AS "name", 1.75 AS "source", ROUND(TAN(1.75),10)
          AS "result" FROM Products n  WHERE n.ProductID = :id 
      - dialect: postgres
        sentence: >-
          SELECT n.ProductName AS "name", 1.75 AS "source", ROUND(CAST(TAN(1.75)
          AS DECIMAL),10) AS "result" FROM Products n  WHERE n.ProductID = $1 
    errors: 0
    expression: >-
      northwind_1.Products.filter(p => p.id === id).map(p => ({ name: p.name,
      source: 1.75, result: round(tan(1.75), 10) }))
    completeExpression: >-
      northwind_1.Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:1.75,result:round(tan(1.75),10)})
    model:
      name: string
      source: any
      result: any
    parameters:
      - name: id
        type: integer
        value: 1
    fields:
      - name: name
        type: string
      - name: source
        type: any
      - name: result
        type: any
    executions:
      - database: mysql
      - database: postgres
    result:
      - name: Chai
        source: 1.75
        result: -5.5203799225
  - name: function trunc
    context: a
    sentences:
      - dialect: mariadb
        sentence: >-
          SELECT n.ProductName AS `name`, 135.375 AS `source`,
          ROUND(TRUNCATE(135.375,2),10) AS `result` FROM Products n  WHERE
          n.ProductID = ? 
      - dialect: mssql
        sentence: >-
          SELECT n.ProductName AS [name], 135.375 AS [source],
          ROUND(TRUNC(135.375,2),10) AS [result] FROM Products n  WHERE
          n.ProductID = :id 
      - dialect: mysql
        sentence: >-
          SELECT n.ProductName AS `name`, 135.375 AS `source`,
          ROUND(TRUNCATE(135.375,2),10) AS `result` FROM Products n  WHERE
          n.ProductID = ? 
      - dialect: oracle
        sentence: >-
          SELECT n.ProductName AS "name", 135.375 AS "source",
          ROUND(TRUNC(135.375,2),10) AS "result" FROM Products n  WHERE
          n.ProductID = :id 
      - dialect: postgres
        sentence: >-
          SELECT n.ProductName AS "name", 135.375 AS "source",
          ROUND(CAST(TRUNC(135.375,2) AS DECIMAL),10) AS "result" FROM Products
          n  WHERE n.ProductID = $1 
    errors: 0
    expression: >-
      northwind_1.Products.filter(p => p.id === id).map(p => ({ name: p.name,
      source: 135.375, result: round(trunc(135.375, 2), 10) }))
    completeExpression: >-
      northwind_1.Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:135.375,result:round(trunc(135.375,2),10)})
    model:
      name: string
      source: any
      result: any
    parameters:
      - name: id
        type: integer
        value: 1
    fields:
      - name: name
        type: string
      - name: source
        type: any
      - name: result
        type: any
    executions:
      - database: mysql
      - database: postgres
    result:
      - name: Chai
        source: 135.375
        result: 135.37
errors: 0
