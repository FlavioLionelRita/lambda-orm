name: include
data:
  a:
    id: 1
test:
  - name: include 1
    data: a
    sentences:
      - stage: MongoDB
        error: 'SintaxisError: Function in not found'
    errors: 2
    expression: Orders.filter(p => p.id === id).include(p => p.customer)
    normalizeExpression: >-
      Orders.map(p=>{id:p.id,customerId:p.customerId,employeeId:p.employeeId,orderDate:p.orderDate,requiredDate:p.requiredDate,shippedDate:p.shippedDate,shipViaId:p.shipViaId,freight:p.freight,name:p.name,address:p.address,city:p.city,region:p.region,postalCode:p.postalCode,country:p.country,__customerId:p.customerId}).filter(p=>(p.id==id)).include(p=>p.customer.map(p=>{id:p.id,name:p.name,contact:p.contact,phone:p.phone,address:p.address,city:p.city,region:p.region,postalCode:p.postalCode,country:p.country,LambdaOrmParentId:p.id}).filter(p=>in(LambdaOrmParentId,p.id)))
    model:
      - name: id
        type: integer
      - name: customerId
        type: string
      - name: employeeId
        type: integer
      - name: orderDate
        type: dateTime
      - name: requiredDate
        type: date
      - name: shippedDate
        type: date
      - name: shipViaId
        type: integer
      - name: freight
        type: decimal
      - name: name
        type: string
      - name: address
        type: string
      - name: city
        type: string
      - name: region
        type: string
      - name: postalCode
        type: string
      - name: country
        type: string
      - name: customer
        type: Customers
        children:
          - name: id
            type: string
          - name: name
            type: string
          - name: contact
            type: string
          - name: phone
            type: string
          - name: address
            type: string
          - name: city
            type: string
          - name: region
            type: string
          - name: postalCode
            type: string
          - name: country
            type: string
          - name: LambdaOrmParentId
            type: string
    parameters:
      - name: id
        type: integer
      - name: customer
        type: Customers
        children:
          - name: LambdaOrmParentId
            type: '[string]'
    constraints:
      entity: Orders
      constraints: []
      children:
        - entity: Customers
          constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 40
      name: select
      children:
        - classtype: Sentence
          pos:
            ln: 0
            col: 45
          name: select
          children: []
          type: any
          entity: Customers
          columns:
            - name: id
              type: string
            - name: name
              type: string
            - name: contact
              type: string
            - name: phone
              type: string
            - name: address
              type: string
            - name: city
              type: string
            - name: region
              type: string
            - name: postalCode
              type: string
            - name: country
              type: string
            - name: LambdaOrmParentId
              type: string
          parameters:
            - name: LambdaOrmParentId
              type: '[string]'
          constraints: []
          values: []
          defaults: []
          clause: select
          alias: c
      type: any
      entity: Orders
      columns:
        - name: id
          type: integer
        - name: customerId
          type: string
        - name: employeeId
          type: integer
        - name: orderDate
          type: dateTime
        - name: requiredDate
          type: date
        - name: shippedDate
          type: date
        - name: shipViaId
          type: integer
        - name: freight
          type: decimal
        - name: name
          type: string
        - name: address
          type: string
        - name: city
          type: string
        - name: region
          type: string
        - name: postalCode
          type: string
        - name: country
          type: string
        - name: __customerId
          type: string
      parameters:
        - name: id
          type: integer
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: o
    executions:
      - stage: MongoDB
        error: 'SintaxisError: Function in not found'
  - name: include 2
    data: a
    sentences:
      - stage: MongoDB
        info:
          entity: Orders
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "id":"$_id", "customerId":"$CustomerID", "employeeId":"$EmployeeID",
            "orderDate":"$OrderDate", "requiredDate":"$RequiredDate",
            "shippedDate":"$ShippedDate", "shipViaId":"$ShipVia",
            "freight":"$Freight", "name":"$ShipName", "address":"$ShipAddress",
            "city":"$ShipCity", "region":"$ShipRegion",
            "postalCode":"$ShipPostalCode", "country":"$ShipCountry",
            "__id":"$_id" ,"details": { "$map":{ "input": "$\"Order Details\"",
            "in": { "orderId":"$this.OrderID", "productId":"$this.ProductID",
            "unitPrice":"$this.UnitPrice", "quantity":"$this.Quantity",
            "discount":"$this.Discount", "LambdaOrmParentId":"$this.OrderID" }
            }} }} ]
          children: []
    errors: 0
    expression: Orders.filter(p => p.id === id).include(p => p.details)
    normalizeExpression: >-
      Orders.map(p=>{id:p.id,customerId:p.customerId,employeeId:p.employeeId,orderDate:p.orderDate,requiredDate:p.requiredDate,shippedDate:p.shippedDate,shipViaId:p.shipViaId,freight:p.freight,name:p.name,address:p.address,city:p.city,region:p.region,postalCode:p.postalCode,country:p.country,__id:p.id}).filter(p=>(p.id==id)).include(p=>p.details.map(p=>{orderId:p.orderId,productId:p.productId,unitPrice:p.unitPrice,quantity:p.quantity,discount:p.discount,LambdaOrmParentId:p.orderId}).filter(p=>in(LambdaOrmParentId,p.orderId)))
    model:
      - name: id
        type: integer
      - name: customerId
        type: string
      - name: employeeId
        type: integer
      - name: orderDate
        type: dateTime
      - name: requiredDate
        type: date
      - name: shippedDate
        type: date
      - name: shipViaId
        type: integer
      - name: freight
        type: decimal
      - name: name
        type: string
      - name: address
        type: string
      - name: city
        type: string
      - name: region
        type: string
      - name: postalCode
        type: string
      - name: country
        type: string
      - name: details
        type: Orders.details[]
        children:
          - name: orderId
            type: integer
          - name: productId
            type: integer
          - name: unitPrice
            type: decimal
          - name: quantity
            type: decimal
          - name: discount
            type: decimal
          - name: LambdaOrmParentId
            type: integer
    parameters:
      - name: id
        type: integer
      - name: details
        type: Orders.details
        children:
          - name: LambdaOrmParentId
            type: '[integer]'
    constraints:
      entity: Orders
      constraints: []
      children:
        - entity: Orders.details
          constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 40
      name: select
      children:
        - classtype: Sentence
          pos:
            ln: 0
            col: 45
          name: select
          children: []
          type: any
          entity: Orders.details
          columns:
            - name: orderId
              type: integer
            - name: productId
              type: integer
            - name: unitPrice
              type: decimal
            - name: quantity
              type: decimal
            - name: discount
              type: decimal
            - name: LambdaOrmParentId
              type: integer
          parameters:
            - name: LambdaOrmParentId
              type: '[integer]'
          constraints: []
          values: []
          defaults: []
          clause: select
          alias: o1
      type: any
      entity: Orders
      columns:
        - name: id
          type: integer
        - name: customerId
          type: string
        - name: employeeId
          type: integer
        - name: orderDate
          type: dateTime
        - name: requiredDate
          type: date
        - name: shippedDate
          type: date
        - name: shipViaId
          type: integer
        - name: freight
          type: decimal
        - name: name
          type: string
        - name: address
          type: string
        - name: city
          type: string
        - name: region
          type: string
        - name: postalCode
          type: string
        - name: country
          type: string
        - name: __id
          type: integer
      parameters:
        - name: id
          type: integer
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: o
    executions:
      - stage: MongoDB
    result:
      - id: 1
        customerId: VINET
        employeeId: 5
        orderDate: '1996-07-03T22:00:00.000Z'
        requiredDate: '1996-07-31T22:00:00.000Z'
        shippedDate: '1996-07-15T22:00:00.000Z'
        shipViaId: 3
        freight: 32.38
        name: Vins et alcools Chevalier
        address: 59 rue de l-Abbaye
        city: Reims
        region: null
        postalCode: '51100'
        country: France
        __id: 1
        details:
          - {}
          - {}
          - {}
  - name: include 3
    data: a
    sentences:
      - stage: MongoDB
        info:
          entity: Orders
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "id":"$_id", "customerId":"$CustomerID", "employeeId":"$EmployeeID",
            "orderDate":"$OrderDate", "requiredDate":"$RequiredDate",
            "shippedDate":"$ShippedDate", "shipViaId":"$ShipVia",
            "freight":"$Freight", "name":"$ShipName", "address":"$ShipAddress",
            "city":"$ShipCity", "region":"$ShipRegion",
            "postalCode":"$ShipPostalCode", "country":"$ShipCountry",
            "__id":"$_id", "__customerId":"$CustomerID" ,"details": { "$map":{
            "input": "$\"Order Details\"", "in": { "orderId":"$this.OrderID",
            "productId":"$this.ProductID", "unitPrice":"$this.UnitPrice",
            "quantity":"$this.Quantity", "discount":"$this.Discount",
            "LambdaOrmParentId":"$this.OrderID" } }} }} ]
          children: []
    errors: 0
    expression: Orders.filter(p => p.id === id).include(p => [p.details, p.customer])
    normalizeExpression: >-
      Orders.map(p=>{id:p.id,customerId:p.customerId,employeeId:p.employeeId,orderDate:p.orderDate,requiredDate:p.requiredDate,shippedDate:p.shippedDate,shipViaId:p.shipViaId,freight:p.freight,name:p.name,address:p.address,city:p.city,region:p.region,postalCode:p.postalCode,country:p.country,__id:p.id,__customerId:p.customerId}).filter(p=>(p.id==id)).include(p=>p.details.map(p=>{orderId:p.orderId,productId:p.productId,unitPrice:p.unitPrice,quantity:p.quantity,discount:p.discount,LambdaOrmParentId:p.orderId}).filter(p=>in(LambdaOrmParentId,p.orderId)))
    model:
      - name: id
        type: integer
      - name: customerId
        type: string
      - name: employeeId
        type: integer
      - name: orderDate
        type: dateTime
      - name: requiredDate
        type: date
      - name: shippedDate
        type: date
      - name: shipViaId
        type: integer
      - name: freight
        type: decimal
      - name: name
        type: string
      - name: address
        type: string
      - name: city
        type: string
      - name: region
        type: string
      - name: postalCode
        type: string
      - name: country
        type: string
      - name: details
        type: Orders.details[]
        children:
          - name: orderId
            type: integer
          - name: productId
            type: integer
          - name: unitPrice
            type: decimal
          - name: quantity
            type: decimal
          - name: discount
            type: decimal
          - name: LambdaOrmParentId
            type: integer
    parameters:
      - name: id
        type: integer
      - name: details
        type: Orders.details
        children:
          - name: LambdaOrmParentId
            type: '[integer]'
    constraints:
      entity: Orders
      constraints: []
      children:
        - entity: Orders.details
          constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 40
      name: select
      children:
        - classtype: Sentence
          pos:
            ln: 0
            col: 45
          name: select
          children: []
          type: any
          entity: Orders.details
          columns:
            - name: orderId
              type: integer
            - name: productId
              type: integer
            - name: unitPrice
              type: decimal
            - name: quantity
              type: decimal
            - name: discount
              type: decimal
            - name: LambdaOrmParentId
              type: integer
          parameters:
            - name: LambdaOrmParentId
              type: '[integer]'
          constraints: []
          values: []
          defaults: []
          clause: select
          alias: o1
      type: any
      entity: Orders
      columns:
        - name: id
          type: integer
        - name: customerId
          type: string
        - name: employeeId
          type: integer
        - name: orderDate
          type: dateTime
        - name: requiredDate
          type: date
        - name: shippedDate
          type: date
        - name: shipViaId
          type: integer
        - name: freight
          type: decimal
        - name: name
          type: string
        - name: address
          type: string
        - name: city
          type: string
        - name: region
          type: string
        - name: postalCode
          type: string
        - name: country
          type: string
        - name: __id
          type: integer
        - name: __customerId
          type: string
      parameters:
        - name: id
          type: integer
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: o
    executions:
      - stage: MongoDB
    result:
      - id: 1
        customerId: VINET
        employeeId: 5
        orderDate: '1996-07-03T22:00:00.000Z'
        requiredDate: '1996-07-31T22:00:00.000Z'
        shippedDate: '1996-07-15T22:00:00.000Z'
        shipViaId: 3
        freight: 32.38
        name: Vins et alcools Chevalier
        address: 59 rue de l-Abbaye
        city: Reims
        region: null
        postalCode: '51100'
        country: France
        __id: 1
        __customerId: VINET
        details:
          - {}
          - {}
          - {}
  - name: include 4
    data: a
    sentences:
      - stage: MongoDB
        info:
          entity: Orders
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "id":"$_id", "customerId":"$CustomerID", "employeeId":"$EmployeeID",
            "orderDate":"$OrderDate", "requiredDate":"$RequiredDate",
            "shippedDate":"$ShippedDate", "shipViaId":"$ShipVia",
            "freight":"$Freight", "name":"$ShipName", "address":"$ShipAddress",
            "city":"$ShipCity", "region":"$ShipRegion",
            "postalCode":"$ShipPostalCode", "country":"$ShipCountry",
            "__id":"$_id", "__customerId":"$CustomerID" ,"details": { "$map":{
            "input": "$\"Order Details\"", "in": { "orderId":"$this.OrderID",
            "productId":"$this.ProductID", "unitPrice":"$this.UnitPrice",
            "quantity":"$this.Quantity", "discount":"$this.Discount",
            "__productId":"$this.ProductID", "LambdaOrmParentId":"$this.OrderID"
            } }} }} ]
          children: []
    errors: 0
    expression: >-
      Orders.filter(p => p.id === id).include(p => [p.details.include(q =>
      q.product), p.customer])
    normalizeExpression: >-
      Orders.map(p=>{id:p.id,customerId:p.customerId,employeeId:p.employeeId,orderDate:p.orderDate,requiredDate:p.requiredDate,shippedDate:p.shippedDate,shipViaId:p.shipViaId,freight:p.freight,name:p.name,address:p.address,city:p.city,region:p.region,postalCode:p.postalCode,country:p.country,__id:p.id,__customerId:p.customerId}).filter(p=>(p.id==id)).include(p=>p.details.map(p=>{orderId:p.orderId,productId:p.productId,unitPrice:p.unitPrice,quantity:p.quantity,discount:p.discount,__productId:p.productId,LambdaOrmParentId:p.orderId}).filter(p=>in(LambdaOrmParentId,p.orderId)).include(q=>q.product.map(p=>{id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued,LambdaOrmParentId:p.id}).filter(p=>in(LambdaOrmParentId,p.id))))
    model:
      - name: id
        type: integer
      - name: customerId
        type: string
      - name: employeeId
        type: integer
      - name: orderDate
        type: dateTime
      - name: requiredDate
        type: date
      - name: shippedDate
        type: date
      - name: shipViaId
        type: integer
      - name: freight
        type: decimal
      - name: name
        type: string
      - name: address
        type: string
      - name: city
        type: string
      - name: region
        type: string
      - name: postalCode
        type: string
      - name: country
        type: string
      - name: details
        type: Orders.details[]
        children:
          - name: orderId
            type: integer
          - name: productId
            type: integer
          - name: unitPrice
            type: decimal
          - name: quantity
            type: decimal
          - name: discount
            type: decimal
          - name: LambdaOrmParentId
            type: integer
          - name: product
            type: Products
            children:
              - name: id
                type: integer
              - name: name
                type: string
              - name: supplierId
                type: integer
              - name: categoryId
                type: integer
              - name: quantity
                type: string
              - name: price
                type: decimal
              - name: inStock
                type: decimal
              - name: onOrder
                type: decimal
              - name: reorderLevel
                type: decimal
              - name: discontinued
                type: boolean
              - name: LambdaOrmParentId
                type: integer
    parameters:
      - name: id
        type: integer
      - name: details
        type: Orders.details
        children:
          - name: LambdaOrmParentId
            type: '[integer]'
          - name: product
            type: Products
            children:
              - name: LambdaOrmParentId
                type: '[integer]'
    constraints:
      entity: Orders
      constraints: []
      children:
        - entity: Orders.details
          constraints: []
          children:
            - entity: Products
              constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 40
      name: select
      children:
        - classtype: Sentence
          pos:
            ln: 0
            col: 45
          name: select
          children:
            - classtype: Sentence
              pos:
                ln: 0
                col: 69
              name: select
              children: []
              type: any
              entity: Products
              columns:
                - name: id
                  type: integer
                - name: name
                  type: string
                - name: supplierId
                  type: integer
                - name: categoryId
                  type: integer
                - name: quantity
                  type: string
                - name: price
                  type: decimal
                - name: inStock
                  type: decimal
                - name: onOrder
                  type: decimal
                - name: reorderLevel
                  type: decimal
                - name: discontinued
                  type: boolean
                - name: LambdaOrmParentId
                  type: integer
              parameters:
                - name: LambdaOrmParentId
                  type: '[integer]'
              constraints: []
              values: []
              defaults: []
              clause: select
              alias: p
          type: any
          entity: Orders.details
          columns:
            - name: orderId
              type: integer
            - name: productId
              type: integer
            - name: unitPrice
              type: decimal
            - name: quantity
              type: decimal
            - name: discount
              type: decimal
            - name: __productId
              type: integer
            - name: LambdaOrmParentId
              type: integer
          parameters:
            - name: LambdaOrmParentId
              type: '[integer]'
          constraints: []
          values: []
          defaults: []
          clause: select
          alias: o1
      type: any
      entity: Orders
      columns:
        - name: id
          type: integer
        - name: customerId
          type: string
        - name: employeeId
          type: integer
        - name: orderDate
          type: dateTime
        - name: requiredDate
          type: date
        - name: shippedDate
          type: date
        - name: shipViaId
          type: integer
        - name: freight
          type: decimal
        - name: name
          type: string
        - name: address
          type: string
        - name: city
          type: string
        - name: region
          type: string
        - name: postalCode
          type: string
        - name: country
          type: string
        - name: __id
          type: integer
        - name: __customerId
          type: string
      parameters:
        - name: id
          type: integer
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: o
    executions:
      - stage: MongoDB
    result:
      - id: 1
        customerId: VINET
        employeeId: 5
        orderDate: '1996-07-03T22:00:00.000Z'
        requiredDate: '1996-07-31T22:00:00.000Z'
        shippedDate: '1996-07-15T22:00:00.000Z'
        shipViaId: 3
        freight: 32.38
        name: Vins et alcools Chevalier
        address: 59 rue de l-Abbaye
        city: Reims
        region: null
        postalCode: '51100'
        country: France
        __id: 1
        __customerId: VINET
        details:
          - {}
          - {}
          - {}
  - name: include 5
    data: a
    sentences:
      - stage: MongoDB
        info:
          entity: Orders
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "id":"$_id", "customerId":"$CustomerID", "employeeId":"$EmployeeID",
            "orderDate":"$OrderDate", "requiredDate":"$RequiredDate",
            "shippedDate":"$ShippedDate", "shipViaId":"$ShipVia",
            "freight":"$Freight", "name":"$ShipName", "address":"$ShipAddress",
            "city":"$ShipCity", "region":"$ShipRegion",
            "postalCode":"$ShipPostalCode", "country":"$ShipCountry",
            "__id":"$_id", "__customerId":"$CustomerID" ,"details": { "$map":{
            "input": "$\"Order Details\"", "in": { "orderId":"$this.OrderID",
            "productId":"$this.ProductID", "unitPrice":"$this.UnitPrice",
            "quantity":"$this.Quantity", "discount":"$this.Discount",
            "__productId":"$this.ProductID", "LambdaOrmParentId":"$this.OrderID"
            } }} }} ]
          children: []
    errors: 0
    expression: >-
      Orders.filter(p => p.id === id).include(p => [p.details.include(q =>
      q.product.include(p => p.category)), p.customer])
    normalizeExpression: >-
      Orders.map(p=>{id:p.id,customerId:p.customerId,employeeId:p.employeeId,orderDate:p.orderDate,requiredDate:p.requiredDate,shippedDate:p.shippedDate,shipViaId:p.shipViaId,freight:p.freight,name:p.name,address:p.address,city:p.city,region:p.region,postalCode:p.postalCode,country:p.country,__id:p.id,__customerId:p.customerId}).filter(p=>(p.id==id)).include(p=>p.details.map(p=>{orderId:p.orderId,productId:p.productId,unitPrice:p.unitPrice,quantity:p.quantity,discount:p.discount,__productId:p.productId,LambdaOrmParentId:p.orderId}).filter(p=>in(LambdaOrmParentId,p.orderId)).include(q=>q.product.map(p=>{id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued,__categoryId:p.categoryId,LambdaOrmParentId:p.id}).filter(p=>in(LambdaOrmParentId,p.id)).include(p=>p.category.map(p=>{id:p.id,name:p.name,description:p.description,LambdaOrmParentId:p.id}).filter(p=>in(LambdaOrmParentId,p.id)))))
    model:
      - name: id
        type: integer
      - name: customerId
        type: string
      - name: employeeId
        type: integer
      - name: orderDate
        type: dateTime
      - name: requiredDate
        type: date
      - name: shippedDate
        type: date
      - name: shipViaId
        type: integer
      - name: freight
        type: decimal
      - name: name
        type: string
      - name: address
        type: string
      - name: city
        type: string
      - name: region
        type: string
      - name: postalCode
        type: string
      - name: country
        type: string
      - name: details
        type: Orders.details[]
        children:
          - name: orderId
            type: integer
          - name: productId
            type: integer
          - name: unitPrice
            type: decimal
          - name: quantity
            type: decimal
          - name: discount
            type: decimal
          - name: LambdaOrmParentId
            type: integer
          - name: product
            type: Products
            children:
              - name: id
                type: integer
              - name: name
                type: string
              - name: supplierId
                type: integer
              - name: categoryId
                type: integer
              - name: quantity
                type: string
              - name: price
                type: decimal
              - name: inStock
                type: decimal
              - name: onOrder
                type: decimal
              - name: reorderLevel
                type: decimal
              - name: discontinued
                type: boolean
              - name: LambdaOrmParentId
                type: integer
              - name: category
                type: Categories
                children:
                  - name: id
                    type: integer
                  - name: name
                    type: string
                  - name: description
                    type: string
                  - name: LambdaOrmParentId
                    type: integer
    parameters:
      - name: id
        type: integer
      - name: details
        type: Orders.details
        children:
          - name: LambdaOrmParentId
            type: '[integer]'
          - name: product
            type: Products
            children:
              - name: LambdaOrmParentId
                type: '[integer]'
              - name: category
                type: Categories
                children:
                  - name: LambdaOrmParentId
                    type: '[integer]'
    constraints:
      entity: Orders
      constraints: []
      children:
        - entity: Orders.details
          constraints: []
          children:
            - entity: Products
              constraints: []
              children:
                - entity: Categories
                  constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 40
      name: select
      children:
        - classtype: Sentence
          pos:
            ln: 0
            col: 45
          name: select
          children:
            - classtype: Sentence
              pos:
                ln: 0
                col: 87
              name: select
              children:
                - classtype: Sentence
                  pos:
                    ln: 0
                    col: 92
                  name: select
                  children: []
                  type: any
                  entity: Categories
                  columns:
                    - name: id
                      type: integer
                    - name: name
                      type: string
                    - name: description
                      type: string
                    - name: LambdaOrmParentId
                      type: integer
                  parameters:
                    - name: LambdaOrmParentId
                      type: '[integer]'
                  constraints: []
                  values: []
                  defaults: []
                  clause: select
                  alias: c
              type: any
              entity: Products
              columns:
                - name: id
                  type: integer
                - name: name
                  type: string
                - name: supplierId
                  type: integer
                - name: categoryId
                  type: integer
                - name: quantity
                  type: string
                - name: price
                  type: decimal
                - name: inStock
                  type: decimal
                - name: onOrder
                  type: decimal
                - name: reorderLevel
                  type: decimal
                - name: discontinued
                  type: boolean
                - name: __categoryId
                  type: integer
                - name: LambdaOrmParentId
                  type: integer
              parameters:
                - name: LambdaOrmParentId
                  type: '[integer]'
              constraints: []
              values: []
              defaults: []
              clause: select
              alias: p
          type: any
          entity: Orders.details
          columns:
            - name: orderId
              type: integer
            - name: productId
              type: integer
            - name: unitPrice
              type: decimal
            - name: quantity
              type: decimal
            - name: discount
              type: decimal
            - name: __productId
              type: integer
            - name: LambdaOrmParentId
              type: integer
          parameters:
            - name: LambdaOrmParentId
              type: '[integer]'
          constraints: []
          values: []
          defaults: []
          clause: select
          alias: o1
      type: any
      entity: Orders
      columns:
        - name: id
          type: integer
        - name: customerId
          type: string
        - name: employeeId
          type: integer
        - name: orderDate
          type: dateTime
        - name: requiredDate
          type: date
        - name: shippedDate
          type: date
        - name: shipViaId
          type: integer
        - name: freight
          type: decimal
        - name: name
          type: string
        - name: address
          type: string
        - name: city
          type: string
        - name: region
          type: string
        - name: postalCode
          type: string
        - name: country
          type: string
        - name: __id
          type: integer
        - name: __customerId
          type: string
      parameters:
        - name: id
          type: integer
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: o
    executions:
      - stage: MongoDB
    result:
      - id: 1
        customerId: VINET
        employeeId: 5
        orderDate: '1996-07-03T22:00:00.000Z'
        requiredDate: '1996-07-31T22:00:00.000Z'
        shippedDate: '1996-07-15T22:00:00.000Z'
        shipViaId: 3
        freight: 32.38
        name: Vins et alcools Chevalier
        address: 59 rue de l-Abbaye
        city: Reims
        region: null
        postalCode: '51100'
        country: France
        __id: 1
        __customerId: VINET
        details:
          - {}
          - {}
          - {}
  - name: include 6
    data: a
    sentences:
      - stage: MongoDB
        info:
          entity: Orders
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "id":"$_id", "customerId":"$CustomerID", "employeeId":"$EmployeeID",
            "orderDate":"$OrderDate", "requiredDate":"$RequiredDate",
            "shippedDate":"$ShippedDate", "shipViaId":"$ShipVia",
            "freight":"$Freight", "name":"$ShipName", "address":"$ShipAddress",
            "city":"$ShipCity", "region":"$ShipRegion",
            "postalCode":"$ShipPostalCode", "country":"$ShipCountry",
            "__id":"$_id", "__customerId":"$CustomerID" ,"details": { "$map":{
            "input": "$\"Order Details\"", "in": { "quantity":"$this.Quantity",
            "unitPrice":"$this.UnitPrice", "productId":"$this.ProductID",
            "LambdaOrmParentId":"$this.OrderID" } }} }} ]
          children: []
    errors: 0
    expression: >-
      Orders.filter(p => p.id === id).include(p => [p.details.map(p => ({
      quantity: p.quantity, unitPrice: p.unitPrice, productId: p.productId })),
      p.customer])
    normalizeExpression: >-
      Orders.map(p=>{id:p.id,customerId:p.customerId,employeeId:p.employeeId,orderDate:p.orderDate,requiredDate:p.requiredDate,shippedDate:p.shippedDate,shipViaId:p.shipViaId,freight:p.freight,name:p.name,address:p.address,city:p.city,region:p.region,postalCode:p.postalCode,country:p.country,__id:p.id,__customerId:p.customerId}).filter(p=>(p.id==id)).include(p=>p.details.map(p=>{quantity:p.quantity,unitPrice:p.unitPrice,productId:p.productId,LambdaOrmParentId:p.orderId}).filter(p=>in(LambdaOrmParentId,p.orderId)))
    model:
      - name: id
        type: integer
      - name: customerId
        type: string
      - name: employeeId
        type: integer
      - name: orderDate
        type: dateTime
      - name: requiredDate
        type: date
      - name: shippedDate
        type: date
      - name: shipViaId
        type: integer
      - name: freight
        type: decimal
      - name: name
        type: string
      - name: address
        type: string
      - name: city
        type: string
      - name: region
        type: string
      - name: postalCode
        type: string
      - name: country
        type: string
      - name: details
        type: Orders.details[]
        children:
          - name: quantity
            type: decimal
          - name: unitPrice
            type: decimal
          - name: productId
            type: integer
          - name: LambdaOrmParentId
            type: integer
    parameters:
      - name: id
        type: integer
      - name: details
        type: Orders.details
        children:
          - name: LambdaOrmParentId
            type: '[integer]'
    constraints:
      entity: Orders
      constraints: []
      children:
        - entity: Orders.details
          constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 40
      name: select
      children:
        - classtype: Sentence
          pos:
            ln: 0
            col: 45
          name: select
          children: []
          type: any
          entity: Orders.details
          columns:
            - name: quantity
              type: decimal
            - name: unitPrice
              type: decimal
            - name: productId
              type: integer
            - name: LambdaOrmParentId
              type: integer
          parameters:
            - name: LambdaOrmParentId
              type: '[integer]'
          constraints: []
          values: []
          defaults: []
          clause: select
          alias: o1
      type: any
      entity: Orders
      columns:
        - name: id
          type: integer
        - name: customerId
          type: string
        - name: employeeId
          type: integer
        - name: orderDate
          type: dateTime
        - name: requiredDate
          type: date
        - name: shippedDate
          type: date
        - name: shipViaId
          type: integer
        - name: freight
          type: decimal
        - name: name
          type: string
        - name: address
          type: string
        - name: city
          type: string
        - name: region
          type: string
        - name: postalCode
          type: string
        - name: country
          type: string
        - name: __id
          type: integer
        - name: __customerId
          type: string
      parameters:
        - name: id
          type: integer
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: o
    executions:
      - stage: MongoDB
    result:
      - id: 1
        customerId: VINET
        employeeId: 5
        orderDate: '1996-07-03T22:00:00.000Z'
        requiredDate: '1996-07-31T22:00:00.000Z'
        shippedDate: '1996-07-15T22:00:00.000Z'
        shipViaId: 3
        freight: 32.38
        name: Vins et alcools Chevalier
        address: 59 rue de l-Abbaye
        city: Reims
        region: null
        postalCode: '51100'
        country: France
        __id: 1
        __customerId: VINET
        details:
          - {}
          - {}
          - {}
  - name: include 7
    data: a
    sentences:
      - stage: MongoDB
        info:
          entity: Orders
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "id":"$_id", "customerId":"$CustomerID", "employeeId":"$EmployeeID",
            "orderDate":"$OrderDate", "requiredDate":"$RequiredDate",
            "shippedDate":"$ShippedDate", "shipViaId":"$ShipVia",
            "freight":"$Freight", "name":"$ShipName", "address":"$ShipAddress",
            "city":"$ShipCity", "region":"$ShipRegion",
            "postalCode":"$ShipPostalCode", "country":"$ShipCountry",
            "__id":"$_id", "__customerId":"$CustomerID" ,"details": { "$map":{
            "input": "$\"Order Details\"", "in": { "quantity":"$this.Quantity",
            "unitPrice":"$this.UnitPrice", "productId":"$this.ProductID",
            "__productId":"$this.ProductID", "LambdaOrmParentId":"$this.OrderID"
            } }} }} ]
          children: []
    errors: 0
    expression: >-
      Orders.filter(p => p.id === id).include(p => [p.details.include(q =>
      q.product).map(p => ({ quantity: p.quantity, unitPrice: p.unitPrice,
      productId: p.productId })), p.customer])
    normalizeExpression: >-
      Orders.map(p=>{id:p.id,customerId:p.customerId,employeeId:p.employeeId,orderDate:p.orderDate,requiredDate:p.requiredDate,shippedDate:p.shippedDate,shipViaId:p.shipViaId,freight:p.freight,name:p.name,address:p.address,city:p.city,region:p.region,postalCode:p.postalCode,country:p.country,__id:p.id,__customerId:p.customerId}).filter(p=>(p.id==id)).include(p=>p.details.map(p=>{quantity:p.quantity,unitPrice:p.unitPrice,productId:p.productId,__productId:p.productId,LambdaOrmParentId:p.orderId}).filter(p=>in(LambdaOrmParentId,p.orderId)).include(q=>q.product.map(p=>{id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued,LambdaOrmParentId:p.id}).filter(p=>in(LambdaOrmParentId,p.id))))
    model:
      - name: id
        type: integer
      - name: customerId
        type: string
      - name: employeeId
        type: integer
      - name: orderDate
        type: dateTime
      - name: requiredDate
        type: date
      - name: shippedDate
        type: date
      - name: shipViaId
        type: integer
      - name: freight
        type: decimal
      - name: name
        type: string
      - name: address
        type: string
      - name: city
        type: string
      - name: region
        type: string
      - name: postalCode
        type: string
      - name: country
        type: string
      - name: details
        type: Orders.details[]
        children:
          - name: quantity
            type: decimal
          - name: unitPrice
            type: decimal
          - name: productId
            type: integer
          - name: LambdaOrmParentId
            type: integer
          - name: product
            type: Products
            children:
              - name: id
                type: integer
              - name: name
                type: string
              - name: supplierId
                type: integer
              - name: categoryId
                type: integer
              - name: quantity
                type: string
              - name: price
                type: decimal
              - name: inStock
                type: decimal
              - name: onOrder
                type: decimal
              - name: reorderLevel
                type: decimal
              - name: discontinued
                type: boolean
              - name: LambdaOrmParentId
                type: integer
    parameters:
      - name: id
        type: integer
      - name: details
        type: Orders.details
        children:
          - name: LambdaOrmParentId
            type: '[integer]'
          - name: product
            type: Products
            children:
              - name: LambdaOrmParentId
                type: '[integer]'
    constraints:
      entity: Orders
      constraints: []
      children:
        - entity: Orders.details
          constraints: []
          children:
            - entity: Products
              constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 40
      name: select
      children:
        - classtype: Sentence
          pos:
            ln: 0
            col: 45
          name: select
          children:
            - classtype: Sentence
              pos:
                ln: 0
                col: 69
              name: select
              children: []
              type: any
              entity: Products
              columns:
                - name: id
                  type: integer
                - name: name
                  type: string
                - name: supplierId
                  type: integer
                - name: categoryId
                  type: integer
                - name: quantity
                  type: string
                - name: price
                  type: decimal
                - name: inStock
                  type: decimal
                - name: onOrder
                  type: decimal
                - name: reorderLevel
                  type: decimal
                - name: discontinued
                  type: boolean
                - name: LambdaOrmParentId
                  type: integer
              parameters:
                - name: LambdaOrmParentId
                  type: '[integer]'
              constraints: []
              values: []
              defaults: []
              clause: select
              alias: p
          type: any
          entity: Orders.details
          columns:
            - name: quantity
              type: decimal
            - name: unitPrice
              type: decimal
            - name: productId
              type: integer
            - name: __productId
              type: integer
            - name: LambdaOrmParentId
              type: integer
          parameters:
            - name: LambdaOrmParentId
              type: '[integer]'
          constraints: []
          values: []
          defaults: []
          clause: select
          alias: o1
      type: any
      entity: Orders
      columns:
        - name: id
          type: integer
        - name: customerId
          type: string
        - name: employeeId
          type: integer
        - name: orderDate
          type: dateTime
        - name: requiredDate
          type: date
        - name: shippedDate
          type: date
        - name: shipViaId
          type: integer
        - name: freight
          type: decimal
        - name: name
          type: string
        - name: address
          type: string
        - name: city
          type: string
        - name: region
          type: string
        - name: postalCode
          type: string
        - name: country
          type: string
        - name: __id
          type: integer
        - name: __customerId
          type: string
      parameters:
        - name: id
          type: integer
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: o
    executions:
      - stage: MongoDB
    result:
      - id: 1
        customerId: VINET
        employeeId: 5
        orderDate: '1996-07-03T22:00:00.000Z'
        requiredDate: '1996-07-31T22:00:00.000Z'
        shippedDate: '1996-07-15T22:00:00.000Z'
        shipViaId: 3
        freight: 32.38
        name: Vins et alcools Chevalier
        address: 59 rue de l-Abbaye
        city: Reims
        region: null
        postalCode: '51100'
        country: France
        __id: 1
        __customerId: VINET
        details:
          - {}
          - {}
          - {}
  - name: include 8
    data: a
    sentences:
      - stage: MongoDB
        error: 'SintaxisError: Function in not found'
    errors: 2
    expression: >-
      Orders.filter(p => p.id === id).include(p => [p.customer.map(p => p.name),
      p.details.include(p => p.product.include(p => p.category.map(p =>
      p.name)).map(p => p.name)).map(p => [p.quantity, p.unitPrice])])
    normalizeExpression: >-
      Orders.map(p=>{id:p.id,customerId:p.customerId,employeeId:p.employeeId,orderDate:p.orderDate,requiredDate:p.requiredDate,shippedDate:p.shippedDate,shipViaId:p.shipViaId,freight:p.freight,name:p.name,address:p.address,city:p.city,region:p.region,postalCode:p.postalCode,country:p.country,__customerId:p.customerId,__id:p.id}).filter(p=>(p.id==id)).include(p=>p.customer.map(p=>{name:p.name,LambdaOrmParentId:p.id}).filter(p=>in(LambdaOrmParentId,p.id)))
    model:
      - name: id
        type: integer
      - name: customerId
        type: string
      - name: employeeId
        type: integer
      - name: orderDate
        type: dateTime
      - name: requiredDate
        type: date
      - name: shippedDate
        type: date
      - name: shipViaId
        type: integer
      - name: freight
        type: decimal
      - name: name
        type: string
      - name: address
        type: string
      - name: city
        type: string
      - name: region
        type: string
      - name: postalCode
        type: string
      - name: country
        type: string
      - name: customer
        type: Customers
        children:
          - name: name
            type: string
          - name: LambdaOrmParentId
            type: string
    parameters:
      - name: id
        type: integer
      - name: customer
        type: Customers
        children:
          - name: LambdaOrmParentId
            type: '[string]'
    constraints:
      entity: Orders
      constraints: []
      children:
        - entity: Customers
          constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 40
      name: select
      children:
        - classtype: Sentence
          pos:
            ln: 0
            col: 45
          name: select
          children: []
          type: any
          entity: Customers
          columns:
            - name: name
              type: string
            - name: LambdaOrmParentId
              type: string
          parameters:
            - name: LambdaOrmParentId
              type: '[string]'
          constraints: []
          values: []
          defaults: []
          clause: select
          alias: c
      type: any
      entity: Orders
      columns:
        - name: id
          type: integer
        - name: customerId
          type: string
        - name: employeeId
          type: integer
        - name: orderDate
          type: dateTime
        - name: requiredDate
          type: date
        - name: shippedDate
          type: date
        - name: shipViaId
          type: integer
        - name: freight
          type: decimal
        - name: name
          type: string
        - name: address
          type: string
        - name: city
          type: string
        - name: region
          type: string
        - name: postalCode
          type: string
        - name: country
          type: string
        - name: __customerId
          type: string
        - name: __id
          type: integer
      parameters:
        - name: id
          type: integer
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: o
    executions:
      - stage: MongoDB
        error: 'SintaxisError: Function in not found'
errors: 4
