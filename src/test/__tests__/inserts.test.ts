import { orm,Helper } from '../../lib'
beforeAll(async () => {
	require('dotenv').config({ path: './test.env' })
	await orm.init()
})
describe('Complete Expression', () => {
	test('insert 1', () => {
		const source = 'Categories.insert()'
		const expected = 'Categories.insert({name:name,description:description})'
		const target = orm.normalize(source)
		expect(expected).toBe(target)
	})
	test('insert 2', () => {
		const source = 'Categories.insert(=>{name:name,description:description})'
		const expected = 'Categories.insert(=>{name:name,description:description})'
		const target = orm.normalize(source)
		expect(expected).toBe(target)
	})
	test('insert 3', () => {
		const source = 'Categories.insert(entity)'
		const expected = 'Categories.insert({name:entity.name,description:entity.description})'
		const target = orm.normalize(source)
		expect(expected).toBe(target)
	})
	test('insert 4', () => {
		const source = 'Orders.insert()'
		const expected = 'Orders.insert({customerId:customerId,employeeId:employeeId,orderDate:orderDate,requiredDate:requiredDate,shippedDate:shippedDate,shipViaId:shipViaId,freight:freight,name:name,address:address,city:city,region:region,postalCode:postalCode,country:country})'
		const target = orm.normalize(source)
		expect(expected).toBe(target)
	})
	test('insert 5', () => {
		const source = 'Orders.insert().include(p=>p.details)'
		const expected = 'Orders.insert({customerId:customerId,employeeId:employeeId,orderDate:orderDate,requiredDate:requiredDate,shippedDate:shippedDate,shipViaId:shipViaId,freight:freight,name:name,address:address,city:city,region:region,postalCode:postalCode,country:country}).include(p=>p.details.insert({orderId:orderId,productId:productId,unitPrice:unitPrice,quantity:quantity,discount:discount}))'
		const target = orm.normalize(source)
		expect(expected).toBe(target)
	})
	test('insert 6', () => {
		const source = 'Orders.insert().include(p=>[p.details,p.customer])'
		const expected = 'Orders.insert({customerId:customerId,employeeId:employeeId,orderDate:orderDate,requiredDate:requiredDate,shippedDate:shippedDate,shipViaId:shipViaId,freight:freight,name:name,address:address,city:city,region:region,postalCode:postalCode,country:country}).include(p=>[p.details.insert({orderId:orderId,productId:productId,unitPrice:unitPrice,quantity:quantity,discount:discount}),p.customer.insert({id:id,name:name,contact:contact,phone:phone,address:address,city:city,region:region,postalCode:postalCode,country:country})])'
		const target = orm.normalize(source)
		expect(expected).toBe(target)
	})
})
describe('Metadata', () => {
	test('insert 1', async () => {
		const expression = 'Categories.insert()'
		const modelExpected :any= [{"name":"name","type":"string"},{"name":"description","type":"string"}]
		const parametersExpected:any = [{"name":"name","type":"string"},{"name":"description","type":"string"}]
		const metadataExpected :any= {"name":"insert","classtype":"Sentence","children":[{"name":"Categories","classtype":"From","children":[],"type":"any","alias":"c"},{"name":"Categories","classtype":"Insert","children":[{"name":"obj","classtype":"Obj","children":[{"name":"name","classtype":"KeyValue","children":[{"name":"name","classtype":"Variable","children":[],"type":"string","number":1}],"type":"any","property":"name"},{"name":"description","classtype":"KeyValue","children":[{"name":"description","classtype":"Variable","children":[],"type":"string","number":2}],"type":"any","property":"description"}],"type":"object"}],"type":"any","clause":"insert"}],"type":"any","columns":[{"name":"name","type":"string"},{"name":"description","type":"string"}],"parameters":[{"name":"name","type":"string"},{"name":"description","type":"string"}],"entity":"Categories","constraints":[{"message":"Cannot be null property name in entity Categories","condition":"isNotNull(name)"}]}
		const constraintsExpected :any= {"entity":"Categories","constraints":[{"message":"Cannot be null property name in entity Categories","condition":"isNotNull(name)"}]}
		const model = orm.model(expression)
		const parameters = orm.parameters(expression)
		const constraints = orm.constraints(expression)
		const metadata = orm.metadata(expression)
		expect(modelExpected).toStrictEqual(model)
		expect(metadataExpected.columns).toStrictEqual(metadata.columns)
		expect(parametersExpected).toStrictEqual(parameters)
		expect(constraintsExpected).toStrictEqual(constraints)
	})
	test('insert 2', async () => {
		const expression = 'Categories.insert(=>{name:name,description:description})'
		const modelExpected :any= [{"name":"name","type":"string"},{"name":"description","type":"string"}]
		const parametersExpected:any = [{"name":"name","type":"string"},{"name":"description","type":"string"}]
		const metadataExpected :any= {"name":"insert","classtype":"Sentence","children":[{"name":"Categories","classtype":"From","children":[],"type":"any","alias":"c"},{"name":"Categories","classtype":"Insert","children":[{"name":"obj","classtype":"Obj","children":[{"name":"name","classtype":"KeyValue","children":[{"name":"name","classtype":"Variable","children":[],"type":"string","number":1}],"type":"any","property":"name"},{"name":"description","classtype":"KeyValue","children":[{"name":"description","classtype":"Variable","children":[],"type":"string","number":2}],"type":"any","property":"description"}],"type":"object"}],"type":"any","clause":"insert"}],"type":"any","columns":[{"name":"name","type":"string"},{"name":"description","type":"string"}],"parameters":[{"name":"name","type":"string"},{"name":"description","type":"string"}],"entity":"Categories","constraints":[{"message":"Cannot be null property name in entity Categories","condition":"isNotNull(name)"}]}
		const constraintsExpected :any= {"entity":"Categories","constraints":[{"message":"Cannot be null property name in entity Categories","condition":"isNotNull(name)"}]}
		const model = orm.model(expression)
		const parameters = orm.parameters(expression)
		const constraints = orm.constraints(expression)
		const metadata = orm.metadata(expression)
		expect(modelExpected).toStrictEqual(model)
		expect(metadataExpected.columns).toStrictEqual(metadata.columns)
		expect(parametersExpected).toStrictEqual(parameters)
		expect(constraintsExpected).toStrictEqual(constraints)
	})
	test('insert 3', async () => {
		const expression = 'Categories.insert(entity)'
		const modelExpected :any= [{"name":"name","type":"string"},{"name":"description","type":"string"}]
		const parametersExpected:any = [{"name":"entity.name","type":"string"},{"name":"entity.description","type":"string"}]
		const metadataExpected :any= {"name":"insert","classtype":"Sentence","children":[{"name":"Categories","classtype":"From","children":[],"type":"any","alias":"c"},{"name":"Categories","classtype":"Insert","children":[{"name":"obj","classtype":"Obj","children":[{"name":"name","classtype":"KeyValue","children":[{"name":"entity.name","classtype":"Variable","children":[],"type":"string","number":1}],"type":"any","property":"name"},{"name":"description","classtype":"KeyValue","children":[{"name":"entity.description","classtype":"Variable","children":[],"type":"string","number":2}],"type":"any","property":"description"}],"type":"object"}],"type":"any","clause":"insert"}],"type":"any","columns":[{"name":"name","type":"string"},{"name":"description","type":"string"}],"parameters":[{"name":"entity.name","type":"string"},{"name":"entity.description","type":"string"}],"entity":"Categories","constraints":[]}
		const constraintsExpected :any= {"entity":"Categories","constraints":[]}
		const model = orm.model(expression)
		const parameters = orm.parameters(expression)
		const constraints = orm.constraints(expression)
		const metadata = orm.metadata(expression)
		expect(modelExpected).toStrictEqual(model)
		expect(metadataExpected.columns).toStrictEqual(metadata.columns)
		expect(parametersExpected).toStrictEqual(parameters)
		expect(constraintsExpected).toStrictEqual(constraints)
	})
	test('insert 4', async () => {
		const expression = 'Orders.insert()'
		const modelExpected :any= [{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"date"},{"name":"shippedDate","type":"date"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"}]
		const parametersExpected:any = [{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"date"},{"name":"shippedDate","type":"date"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"}]
		const metadataExpected :any= {"name":"insert","classtype":"Sentence","children":[{"name":"Orders","classtype":"From","children":[],"type":"any","alias":"o"},{"name":"Orders","classtype":"Insert","children":[{"name":"obj","classtype":"Obj","children":[{"name":"customerId","classtype":"KeyValue","children":[{"name":"customerId","classtype":"Variable","children":[],"type":"string","number":1}],"type":"any","property":"customerId"},{"name":"employeeId","classtype":"KeyValue","children":[{"name":"employeeId","classtype":"Variable","children":[],"type":"integer","number":2}],"type":"any","property":"employeeId"},{"name":"orderDate","classtype":"KeyValue","children":[{"name":"orderDate","classtype":"Variable","children":[],"type":"datetime","number":3}],"type":"any","property":"orderDate"},{"name":"requiredDate","classtype":"KeyValue","children":[{"name":"requiredDate","classtype":"Variable","children":[],"type":"date","number":4}],"type":"any","property":"requiredDate"},{"name":"shippedDate","classtype":"KeyValue","children":[{"name":"shippedDate","classtype":"Variable","children":[],"type":"date","number":5}],"type":"any","property":"shippedDate"},{"name":"shipViaId","classtype":"KeyValue","children":[{"name":"shipViaId","classtype":"Variable","children":[],"type":"integer","number":6}],"type":"any","property":"shipViaId"},{"name":"freight","classtype":"KeyValue","children":[{"name":"freight","classtype":"Variable","children":[],"type":"decimal","number":7}],"type":"any","property":"freight"},{"name":"name","classtype":"KeyValue","children":[{"name":"name","classtype":"Variable","children":[],"type":"string","number":8}],"type":"any","property":"name"},{"name":"address","classtype":"KeyValue","children":[{"name":"address","classtype":"Variable","children":[],"type":"string","number":9}],"type":"any","property":"address"},{"name":"city","classtype":"KeyValue","children":[{"name":"city","classtype":"Variable","children":[],"type":"string","number":10}],"type":"any","property":"city"},{"name":"region","classtype":"KeyValue","children":[{"name":"region","classtype":"Variable","children":[],"type":"string","number":11}],"type":"any","property":"region"},{"name":"postalCode","classtype":"KeyValue","children":[{"name":"postalCode","classtype":"Variable","children":[],"type":"string","number":12}],"type":"any","property":"postalCode"},{"name":"country","classtype":"KeyValue","children":[{"name":"country","classtype":"Variable","children":[],"type":"string","number":13}],"type":"any","property":"country"}],"type":"object"}],"type":"any","clause":"insert"}],"type":"any","columns":[{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"date"},{"name":"shippedDate","type":"date"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"}],"parameters":[{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"date"},{"name":"shippedDate","type":"date"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"}],"entity":"Orders","constraints":[{"message":"Cannot be null property customerId in entity Orders","condition":"isNotNull(customerId)"},{"message":"Cannot be null property employeeId in entity Orders","condition":"isNotNull(employeeId)"}]}
		const constraintsExpected :any= {"entity":"Orders","constraints":[{"message":"Cannot be null property customerId in entity Orders","condition":"isNotNull(customerId)"},{"message":"Cannot be null property employeeId in entity Orders","condition":"isNotNull(employeeId)"}]}
		const model = orm.model(expression)
		const parameters = orm.parameters(expression)
		const constraints = orm.constraints(expression)
		const metadata = orm.metadata(expression)
		expect(modelExpected).toStrictEqual(model)
		expect(metadataExpected.columns).toStrictEqual(metadata.columns)
		expect(parametersExpected).toStrictEqual(parameters)
		expect(constraintsExpected).toStrictEqual(constraints)
	})
	test('insert 5', async () => {
		const expression = 'Orders.insert().include(p=>p.details)'
		const modelExpected :any= [{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"date"},{"name":"shippedDate","type":"date"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"},{"name":"details","type":"Orders.details[]","children":[{"name":"orderId","type":"integer"},{"name":"productId","type":"integer"},{"name":"unitPrice","type":"decimal"},{"name":"quantity","type":"decimal"},{"name":"discount","type":"decimal"}]}]
		const parametersExpected:any = [{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"date"},{"name":"shippedDate","type":"date"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"},{"name":"details","type":"Orders.details","children":[{"name":"orderId","type":"integer"},{"name":"productId","type":"integer"},{"name":"unitPrice","type":"decimal"},{"name":"quantity","type":"decimal"},{"name":"discount","type":"decimal"}]}]
		const metadataExpected :any= {"name":"insert","classtype":"Sentence","children":[{"name":"Orders","classtype":"From","children":[],"type":"any","alias":"o"},{"name":"Orders","classtype":"Insert","children":[{"name":"obj","classtype":"Obj","children":[{"name":"customerId","classtype":"KeyValue","children":[{"name":"customerId","classtype":"Variable","children":[],"type":"string","number":1}],"type":"any","property":"customerId"},{"name":"employeeId","classtype":"KeyValue","children":[{"name":"employeeId","classtype":"Variable","children":[],"type":"integer","number":2}],"type":"any","property":"employeeId"},{"name":"orderDate","classtype":"KeyValue","children":[{"name":"orderDate","classtype":"Variable","children":[],"type":"datetime","number":3}],"type":"any","property":"orderDate"},{"name":"requiredDate","classtype":"KeyValue","children":[{"name":"requiredDate","classtype":"Variable","children":[],"type":"date","number":4}],"type":"any","property":"requiredDate"},{"name":"shippedDate","classtype":"KeyValue","children":[{"name":"shippedDate","classtype":"Variable","children":[],"type":"date","number":5}],"type":"any","property":"shippedDate"},{"name":"shipViaId","classtype":"KeyValue","children":[{"name":"shipViaId","classtype":"Variable","children":[],"type":"integer","number":6}],"type":"any","property":"shipViaId"},{"name":"freight","classtype":"KeyValue","children":[{"name":"freight","classtype":"Variable","children":[],"type":"decimal","number":7}],"type":"any","property":"freight"},{"name":"name","classtype":"KeyValue","children":[{"name":"name","classtype":"Variable","children":[],"type":"string","number":8}],"type":"any","property":"name"},{"name":"address","classtype":"KeyValue","children":[{"name":"address","classtype":"Variable","children":[],"type":"string","number":9}],"type":"any","property":"address"},{"name":"city","classtype":"KeyValue","children":[{"name":"city","classtype":"Variable","children":[],"type":"string","number":10}],"type":"any","property":"city"},{"name":"region","classtype":"KeyValue","children":[{"name":"region","classtype":"Variable","children":[],"type":"string","number":11}],"type":"any","property":"region"},{"name":"postalCode","classtype":"KeyValue","children":[{"name":"postalCode","classtype":"Variable","children":[],"type":"string","number":12}],"type":"any","property":"postalCode"},{"name":"country","classtype":"KeyValue","children":[{"name":"country","classtype":"Variable","children":[],"type":"string","number":13}],"type":"any","property":"country"}],"type":"object"}],"type":"any","clause":"insert"},{"name":"details","classtype":"SentenceInclude","children":[{"name":"insert","classtype":"Sentence","children":[{"name":"Orders.details","classtype":"From","children":[],"type":"any","alias":"o1"},{"name":"Orders.details","classtype":"Insert","children":[{"name":"obj","classtype":"Obj","children":[{"name":"orderId","classtype":"KeyValue","children":[{"name":"orderId","classtype":"Variable","children":[],"type":"integer","number":1}],"type":"any","property":"orderId"},{"name":"productId","classtype":"KeyValue","children":[{"name":"productId","classtype":"Variable","children":[],"type":"integer","number":2}],"type":"any","property":"productId"},{"name":"unitPrice","classtype":"KeyValue","children":[{"name":"unitPrice","classtype":"Variable","children":[],"type":"decimal","number":3}],"type":"any","property":"unitPrice"},{"name":"quantity","classtype":"KeyValue","children":[{"name":"quantity","classtype":"Variable","children":[],"type":"decimal","number":4}],"type":"any","property":"quantity"},{"name":"discount","classtype":"KeyValue","children":[{"name":"discount","classtype":"Variable","children":[],"type":"decimal","number":5}],"type":"any","property":"discount"}],"type":"object"}],"type":"any","clause":"insert"}],"type":"any","columns":[{"name":"orderId","type":"integer"},{"name":"productId","type":"integer"},{"name":"unitPrice","type":"decimal"},{"name":"quantity","type":"decimal"},{"name":"discount","type":"decimal"}],"parameters":[{"name":"orderId","type":"integer"},{"name":"productId","type":"integer"},{"name":"unitPrice","type":"decimal"},{"name":"quantity","type":"decimal"},{"name":"discount","type":"decimal"}],"entity":"Orders.details","constraints":[{"message":"Cannot be null property orderId in entity Orders.details","condition":"isNotNull(orderId)"},{"message":"Cannot be null property productId in entity Orders.details","condition":"isNotNull(productId)"}]}],"type":"any","relation":{"name":"details","type":"manyToOne","composite":true,"from":"id","entity":"Orders.details","weak":true,"to":"orderId","target":"order"}}],"type":"any","columns":[{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"date"},{"name":"shippedDate","type":"date"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"}],"parameters":[{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"date"},{"name":"shippedDate","type":"date"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"}],"entity":"Orders","constraints":[{"message":"Cannot be null property customerId in entity Orders","condition":"isNotNull(customerId)"},{"message":"Cannot be null property employeeId in entity Orders","condition":"isNotNull(employeeId)"}]}
		const constraintsExpected :any= {"entity":"Orders","constraints":[{"message":"Cannot be null property customerId in entity Orders","condition":"isNotNull(customerId)"},{"message":"Cannot be null property employeeId in entity Orders","condition":"isNotNull(employeeId)"}],"children":[{"entity":"Orders.details","constraints":[{"message":"Cannot be null property orderId in entity Orders.details","condition":"isNotNull(orderId)"},{"message":"Cannot be null property productId in entity Orders.details","condition":"isNotNull(productId)"}]}]}
		const model = orm.model(expression)
		const parameters = orm.parameters(expression)
		const constraints = orm.constraints(expression)
		const metadata = orm.metadata(expression)
		expect(modelExpected).toStrictEqual(model)
		expect(metadataExpected.columns).toStrictEqual(metadata.columns)
		expect(parametersExpected).toStrictEqual(parameters)
		expect(constraintsExpected).toStrictEqual(constraints)
	})
	test('insert 6', async () => {
		const expression = 'Orders.insert().include(p=>[p.details,p.customer])'
		const modelExpected :any= [{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"date"},{"name":"shippedDate","type":"date"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"},{"name":"details","type":"Orders.details[]","children":[{"name":"orderId","type":"integer"},{"name":"productId","type":"integer"},{"name":"unitPrice","type":"decimal"},{"name":"quantity","type":"decimal"},{"name":"discount","type":"decimal"}]},{"name":"customer","type":"Customers","children":[{"name":"id","type":"string"},{"name":"name","type":"string"},{"name":"contact","type":"string"},{"name":"phone","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"}]}]
		const parametersExpected:any = [{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"date"},{"name":"shippedDate","type":"date"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"},{"name":"details","type":"Orders.details","children":[{"name":"orderId","type":"integer"},{"name":"productId","type":"integer"},{"name":"unitPrice","type":"decimal"},{"name":"quantity","type":"decimal"},{"name":"discount","type":"decimal"}]},{"name":"customer","type":"Customers","children":[{"name":"id","type":"string"},{"name":"name","type":"string"},{"name":"contact","type":"string"},{"name":"phone","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"}]}]
		const metadataExpected :any= {"name":"insert","classtype":"Sentence","children":[{"name":"Orders","classtype":"From","children":[],"type":"any","alias":"o"},{"name":"Orders","classtype":"Insert","children":[{"name":"obj","classtype":"Obj","children":[{"name":"customerId","classtype":"KeyValue","children":[{"name":"customerId","classtype":"Variable","children":[],"type":"string","number":1}],"type":"any","property":"customerId"},{"name":"employeeId","classtype":"KeyValue","children":[{"name":"employeeId","classtype":"Variable","children":[],"type":"integer","number":2}],"type":"any","property":"employeeId"},{"name":"orderDate","classtype":"KeyValue","children":[{"name":"orderDate","classtype":"Variable","children":[],"type":"datetime","number":3}],"type":"any","property":"orderDate"},{"name":"requiredDate","classtype":"KeyValue","children":[{"name":"requiredDate","classtype":"Variable","children":[],"type":"date","number":4}],"type":"any","property":"requiredDate"},{"name":"shippedDate","classtype":"KeyValue","children":[{"name":"shippedDate","classtype":"Variable","children":[],"type":"date","number":5}],"type":"any","property":"shippedDate"},{"name":"shipViaId","classtype":"KeyValue","children":[{"name":"shipViaId","classtype":"Variable","children":[],"type":"integer","number":6}],"type":"any","property":"shipViaId"},{"name":"freight","classtype":"KeyValue","children":[{"name":"freight","classtype":"Variable","children":[],"type":"decimal","number":7}],"type":"any","property":"freight"},{"name":"name","classtype":"KeyValue","children":[{"name":"name","classtype":"Variable","children":[],"type":"string","number":8}],"type":"any","property":"name"},{"name":"address","classtype":"KeyValue","children":[{"name":"address","classtype":"Variable","children":[],"type":"string","number":9}],"type":"any","property":"address"},{"name":"city","classtype":"KeyValue","children":[{"name":"city","classtype":"Variable","children":[],"type":"string","number":10}],"type":"any","property":"city"},{"name":"region","classtype":"KeyValue","children":[{"name":"region","classtype":"Variable","children":[],"type":"string","number":11}],"type":"any","property":"region"},{"name":"postalCode","classtype":"KeyValue","children":[{"name":"postalCode","classtype":"Variable","children":[],"type":"string","number":12}],"type":"any","property":"postalCode"},{"name":"country","classtype":"KeyValue","children":[{"name":"country","classtype":"Variable","children":[],"type":"string","number":13}],"type":"any","property":"country"}],"type":"object"}],"type":"any","clause":"insert"},{"name":"details","classtype":"SentenceInclude","children":[{"name":"insert","classtype":"Sentence","children":[{"name":"Orders.details","classtype":"From","children":[],"type":"any","alias":"o1"},{"name":"Orders.details","classtype":"Insert","children":[{"name":"obj","classtype":"Obj","children":[{"name":"orderId","classtype":"KeyValue","children":[{"name":"orderId","classtype":"Variable","children":[],"type":"integer","number":1}],"type":"any","property":"orderId"},{"name":"productId","classtype":"KeyValue","children":[{"name":"productId","classtype":"Variable","children":[],"type":"integer","number":2}],"type":"any","property":"productId"},{"name":"unitPrice","classtype":"KeyValue","children":[{"name":"unitPrice","classtype":"Variable","children":[],"type":"decimal","number":3}],"type":"any","property":"unitPrice"},{"name":"quantity","classtype":"KeyValue","children":[{"name":"quantity","classtype":"Variable","children":[],"type":"decimal","number":4}],"type":"any","property":"quantity"},{"name":"discount","classtype":"KeyValue","children":[{"name":"discount","classtype":"Variable","children":[],"type":"decimal","number":5}],"type":"any","property":"discount"}],"type":"object"}],"type":"any","clause":"insert"}],"type":"any","columns":[{"name":"orderId","type":"integer"},{"name":"productId","type":"integer"},{"name":"unitPrice","type":"decimal"},{"name":"quantity","type":"decimal"},{"name":"discount","type":"decimal"}],"parameters":[{"name":"orderId","type":"integer"},{"name":"productId","type":"integer"},{"name":"unitPrice","type":"decimal"},{"name":"quantity","type":"decimal"},{"name":"discount","type":"decimal"}],"entity":"Orders.details","constraints":[{"message":"Cannot be null property orderId in entity Orders.details","condition":"isNotNull(orderId)"},{"message":"Cannot be null property productId in entity Orders.details","condition":"isNotNull(productId)"}]}],"type":"any","relation":{"name":"details","type":"manyToOne","composite":true,"from":"id","entity":"Orders.details","weak":true,"to":"orderId","target":"order"}},{"name":"customer","classtype":"SentenceInclude","children":[{"name":"insert","classtype":"Sentence","children":[{"name":"Customers","classtype":"From","children":[],"type":"any","alias":"c"},{"name":"Customers","classtype":"Insert","children":[{"name":"obj","classtype":"Obj","children":[{"name":"id","classtype":"KeyValue","children":[{"name":"id","classtype":"Variable","children":[],"type":"string","number":1}],"type":"any","property":"id"},{"name":"name","classtype":"KeyValue","children":[{"name":"name","classtype":"Variable","children":[],"type":"string","number":2}],"type":"any","property":"name"},{"name":"contact","classtype":"KeyValue","children":[{"name":"contact","classtype":"Variable","children":[],"type":"string","number":3}],"type":"any","property":"contact"},{"name":"phone","classtype":"KeyValue","children":[{"name":"phone","classtype":"Variable","children":[],"type":"string","number":4}],"type":"any","property":"phone"},{"name":"address","classtype":"KeyValue","children":[{"name":"address","classtype":"Variable","children":[],"type":"string","number":5}],"type":"any","property":"address"},{"name":"city","classtype":"KeyValue","children":[{"name":"city","classtype":"Variable","children":[],"type":"string","number":6}],"type":"any","property":"city"},{"name":"region","classtype":"KeyValue","children":[{"name":"region","classtype":"Variable","children":[],"type":"string","number":7}],"type":"any","property":"region"},{"name":"postalCode","classtype":"KeyValue","children":[{"name":"postalCode","classtype":"Variable","children":[],"type":"string","number":8}],"type":"any","property":"postalCode"},{"name":"country","classtype":"KeyValue","children":[{"name":"country","classtype":"Variable","children":[],"type":"string","number":9}],"type":"any","property":"country"}],"type":"object"}],"type":"any","clause":"insert"}],"type":"any","columns":[{"name":"id","type":"string"},{"name":"name","type":"string"},{"name":"contact","type":"string"},{"name":"phone","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"}],"parameters":[{"name":"id","type":"string"},{"name":"name","type":"string"},{"name":"contact","type":"string"},{"name":"phone","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"}],"entity":"Customers","constraints":[{"message":"Cannot be null property id in entity Customers","condition":"isNotNull(id)"},{"message":"Cannot be null property name in entity Customers","condition":"isNotNull(name)"}]}],"type":"any","relation":{"name":"customer","from":"customerId","entity":"Customers","to":"id","target":"orders","type":"oneToMany","weak":false}}],"type":"any","columns":[{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"date"},{"name":"shippedDate","type":"date"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"}],"parameters":[{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"date"},{"name":"shippedDate","type":"date"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"}],"entity":"Orders","constraints":[{"message":"Cannot be null property customerId in entity Orders","condition":"isNotNull(customerId)"},{"message":"Cannot be null property employeeId in entity Orders","condition":"isNotNull(employeeId)"}]}
		const constraintsExpected :any= {"entity":"Orders","constraints":[{"message":"Cannot be null property customerId in entity Orders","condition":"isNotNull(customerId)"},{"message":"Cannot be null property employeeId in entity Orders","condition":"isNotNull(employeeId)"}],"children":[{"entity":"Orders.details","constraints":[{"message":"Cannot be null property orderId in entity Orders.details","condition":"isNotNull(orderId)"},{"message":"Cannot be null property productId in entity Orders.details","condition":"isNotNull(productId)"}]},{"entity":"Customers","constraints":[{"message":"Cannot be null property id in entity Customers","condition":"isNotNull(id)"},{"message":"Cannot be null property name in entity Customers","condition":"isNotNull(name)"}]}]}
		const model = orm.model(expression)
		const parameters = orm.parameters(expression)
		const constraints = orm.constraints(expression)
		const metadata = orm.metadata(expression)
		expect(modelExpected).toStrictEqual(model)
		expect(metadataExpected.columns).toStrictEqual(metadata.columns)
		expect(parametersExpected).toStrictEqual(parameters)
		expect(constraintsExpected).toStrictEqual(constraints)
	})
})
describe('Sentences', () => {
	test('insert 1', async () => {
		const expression = 'Categories.insert()'
		const MySQLExpected = {"entity":"Categories","dialect":"MySQL","source":"MySQL","sentence":"INSERT INTO Categories(CategoryName,Description) VALUES(?,?)","children":[]}
		let MySQL = orm.sentence(expression,{stage:'MySQL'})
		expect(MySQLExpected).toStrictEqual(MySQL)
		const MariaDBExpected = {"entity":"Categories","dialect":"MariaDB","source":"MariaDB","sentence":"INSERT INTO Categories(CategoryName,Description) VALUES(?,?)","children":[]}
		let MariaDB = orm.sentence(expression,{stage:'MariaDB'})
		expect(MariaDBExpected).toStrictEqual(MariaDB)
		const PostgreSQLExpected = {"entity":"Categories","dialect":"PostgreSQL","source":"PostgreSQL","sentence":"INSERT INTO Categories(CategoryName,Description) VALUES($1,$2) RETURNING CategoryID AS id","children":[]}
		let PostgreSQL = orm.sentence(expression,{stage:'PostgreSQL'})
		expect(PostgreSQLExpected).toStrictEqual(PostgreSQL)
		const SqlServerExpected = {"entity":"Categories","dialect":"SqlServer","source":"SqlServer","sentence":"INSERT INTO Categories(CategoryName,Description) OUTPUT INSERTED.CategoryID VALUES(@name,@description)","children":[]}
		let SqlServer = orm.sentence(expression,{stage:'SqlServer'})
		expect(SqlServerExpected).toStrictEqual(SqlServer)
		const OracleExpected = {"entity":"Categories","dialect":"Oracle","source":"Oracle","sentence":"INSERT INTO Categories(CategoryID,CategoryName,Description) VALUES(SQ_CATEGORIES.nextval,:name,:description)","children":[]}
		let Oracle = orm.sentence(expression,{stage:'Oracle'})
		expect(OracleExpected).toStrictEqual(Oracle)
		const MongoDBExpected = {"entity":"Categories","dialect":"MongoDB","source":"MongoDB","sentence":"{ \"CategoryName\":{{name}},\"Description\":{{description}} }","children":[]}
		let MongoDB = orm.sentence(expression,{stage:'MongoDB'})
		expect(MongoDBExpected).toStrictEqual(MongoDB)
	})
	test('insert 2', async () => {
		const expression = 'Categories.insert(=>{name:name,description:description})'
		const MySQLExpected = {"entity":"Categories","dialect":"MySQL","source":"MySQL","sentence":"INSERT INTO Categories(CategoryName,Description) VALUES(?,?)","children":[]}
		let MySQL = orm.sentence(expression,{stage:'MySQL'})
		expect(MySQLExpected).toStrictEqual(MySQL)
		const MariaDBExpected = {"entity":"Categories","dialect":"MariaDB","source":"MariaDB","sentence":"INSERT INTO Categories(CategoryName,Description) VALUES(?,?)","children":[]}
		let MariaDB = orm.sentence(expression,{stage:'MariaDB'})
		expect(MariaDBExpected).toStrictEqual(MariaDB)
		const PostgreSQLExpected = {"entity":"Categories","dialect":"PostgreSQL","source":"PostgreSQL","sentence":"INSERT INTO Categories(CategoryName,Description) VALUES($1,$2) RETURNING CategoryID AS id","children":[]}
		let PostgreSQL = orm.sentence(expression,{stage:'PostgreSQL'})
		expect(PostgreSQLExpected).toStrictEqual(PostgreSQL)
		const SqlServerExpected = {"entity":"Categories","dialect":"SqlServer","source":"SqlServer","sentence":"INSERT INTO Categories(CategoryName,Description) OUTPUT INSERTED.CategoryID VALUES(@name,@description)","children":[]}
		let SqlServer = orm.sentence(expression,{stage:'SqlServer'})
		expect(SqlServerExpected).toStrictEqual(SqlServer)
		const OracleExpected = {"entity":"Categories","dialect":"Oracle","source":"Oracle","sentence":"INSERT INTO Categories(CategoryID,CategoryName,Description) VALUES(SQ_CATEGORIES.nextval,:name,:description)","children":[]}
		let Oracle = orm.sentence(expression,{stage:'Oracle'})
		expect(OracleExpected).toStrictEqual(Oracle)
		const MongoDBExpected = {"entity":"Categories","dialect":"MongoDB","source":"MongoDB","sentence":"{ \"CategoryName\":{{name}},\"Description\":{{description}} }","children":[]}
		let MongoDB = orm.sentence(expression,{stage:'MongoDB'})
		expect(MongoDBExpected).toStrictEqual(MongoDB)
	})
	test('insert 3', async () => {
		const expression = 'Categories.insert(entity)'
		const MySQLExpected = {"entity":"Categories","dialect":"MySQL","source":"MySQL","sentence":"INSERT INTO Categories(CategoryName,Description) VALUES(?,?)","children":[]}
		let MySQL = orm.sentence(expression,{stage:'MySQL'})
		expect(MySQLExpected).toStrictEqual(MySQL)
		const MariaDBExpected = {"entity":"Categories","dialect":"MariaDB","source":"MariaDB","sentence":"INSERT INTO Categories(CategoryName,Description) VALUES(?,?)","children":[]}
		let MariaDB = orm.sentence(expression,{stage:'MariaDB'})
		expect(MariaDBExpected).toStrictEqual(MariaDB)
		const PostgreSQLExpected = {"entity":"Categories","dialect":"PostgreSQL","source":"PostgreSQL","sentence":"INSERT INTO Categories(CategoryName,Description) VALUES($1,$2) RETURNING CategoryID AS id","children":[]}
		let PostgreSQL = orm.sentence(expression,{stage:'PostgreSQL'})
		expect(PostgreSQLExpected).toStrictEqual(PostgreSQL)
		const SqlServerExpected = {"entity":"Categories","dialect":"SqlServer","source":"SqlServer","sentence":"INSERT INTO Categories(CategoryName,Description) OUTPUT INSERTED.CategoryID VALUES(@entity_name,@entity_description)","children":[]}
		let SqlServer = orm.sentence(expression,{stage:'SqlServer'})
		expect(SqlServerExpected).toStrictEqual(SqlServer)
		const OracleExpected = {"entity":"Categories","dialect":"Oracle","source":"Oracle","sentence":"INSERT INTO Categories(CategoryID,CategoryName,Description) VALUES(SQ_CATEGORIES.nextval,:entity_name,:entity_description)","children":[]}
		let Oracle = orm.sentence(expression,{stage:'Oracle'})
		expect(OracleExpected).toStrictEqual(Oracle)
		const MongoDBExpected = {"entity":"Categories","dialect":"MongoDB","source":"MongoDB","sentence":"{ \"CategoryName\":{{entity_name}},\"Description\":{{entity_description}} }","children":[]}
		let MongoDB = orm.sentence(expression,{stage:'MongoDB'})
		expect(MongoDBExpected).toStrictEqual(MongoDB)
	})
	test('insert 4', async () => {
		const expression = 'Orders.insert()'
		const MySQLExpected = {"entity":"Orders","dialect":"MySQL","source":"MySQL","sentence":"INSERT INTO Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)","children":[]}
		let MySQL = orm.sentence(expression,{stage:'MySQL'})
		expect(MySQLExpected).toStrictEqual(MySQL)
		const MariaDBExpected = {"entity":"Orders","dialect":"MariaDB","source":"MariaDB","sentence":"INSERT INTO Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)","children":[]}
		let MariaDB = orm.sentence(expression,{stage:'MariaDB'})
		expect(MariaDBExpected).toStrictEqual(MariaDB)
		const PostgreSQLExpected = {"entity":"Orders","dialect":"PostgreSQL","source":"PostgreSQL","sentence":"INSERT INTO Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry) VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) RETURNING OrderID AS id","children":[]}
		let PostgreSQL = orm.sentence(expression,{stage:'PostgreSQL'})
		expect(PostgreSQLExpected).toStrictEqual(PostgreSQL)
		const SqlServerExpected = {"entity":"Orders","dialect":"SqlServer","source":"SqlServer","sentence":"INSERT INTO Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry) OUTPUT INSERTED.OrderID VALUES(@customerId,@employeeId,@orderDate,@requiredDate,@shippedDate,@shipViaId,@freight,@name,@address,@city,@region,@postalCode,@country)","children":[]}
		let SqlServer = orm.sentence(expression,{stage:'SqlServer'})
		expect(SqlServerExpected).toStrictEqual(SqlServer)
		const OracleExpected = {"entity":"Orders","dialect":"Oracle","source":"Oracle","sentence":"INSERT INTO Orders(OrderID,CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry) VALUES(SQ_ORDERS.nextval,:customerId,:employeeId,:orderDate,:requiredDate,:shippedDate,:shipViaId,:freight,:name,:address,:city,:region,:postalCode,:country)","children":[]}
		let Oracle = orm.sentence(expression,{stage:'Oracle'})
		expect(OracleExpected).toStrictEqual(Oracle)
		const MongoDBExpected = {"entity":"Orders","dialect":"MongoDB","source":"MongoDB","sentence":"{ \"CustomerID\":{{customerId}},\"EmployeeID\":{{employeeId}},\"OrderDate\":{{orderDate}},\"RequiredDate\":{{requiredDate}},\"ShippedDate\":{{shippedDate}},\"ShipVia\":{{shipViaId}},\"Freight\":{{freight}},\"ShipName\":{{name}},\"ShipAddress\":{{address}},\"ShipCity\":{{city}},\"ShipRegion\":{{region}},\"ShipPostalCode\":{{postalCode}},\"ShipCountry\":{{country}} }","children":[]}
		let MongoDB = orm.sentence(expression,{stage:'MongoDB'})
		expect(MongoDBExpected).toStrictEqual(MongoDB)
	})
	test('insert 5', async () => {
		const expression = 'Orders.insert().include(p=>p.details)'
		const MySQLExpected = {"entity":"Orders","dialect":"MySQL","source":"MySQL","sentence":"INSERT INTO Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)","children":[{"entity":"Orders.details","dialect":"MySQL","source":"MySQL","sentence":"INSERT INTO `Order Details`(OrderID,ProductID,UnitPrice,Quantity,Discount) VALUES(?,?,?,?,?)","children":[]}]}
		let MySQL = orm.sentence(expression,{stage:'MySQL'})
		expect(MySQLExpected).toStrictEqual(MySQL)
		const MariaDBExpected = {"entity":"Orders","dialect":"MariaDB","source":"MariaDB","sentence":"INSERT INTO Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)","children":[{"entity":"Orders.details","dialect":"MariaDB","source":"MariaDB","sentence":"INSERT INTO `Order Details`(OrderID,ProductID,UnitPrice,Quantity,Discount) VALUES(?,?,?,?,?)","children":[]}]}
		let MariaDB = orm.sentence(expression,{stage:'MariaDB'})
		expect(MariaDBExpected).toStrictEqual(MariaDB)
		const PostgreSQLExpected = {"entity":"Orders","dialect":"PostgreSQL","source":"PostgreSQL","sentence":"INSERT INTO Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry) VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) RETURNING OrderID AS id","children":[{"entity":"Orders.details","dialect":"PostgreSQL","source":"PostgreSQL","sentence":"INSERT INTO \"Order Details\"(OrderID,ProductID,UnitPrice,Quantity,Discount) VALUES($1,$2,$3,$4,$5) RETURNING 0 AS id","children":[]}]}
		let PostgreSQL = orm.sentence(expression,{stage:'PostgreSQL'})
		expect(PostgreSQLExpected).toStrictEqual(PostgreSQL)
		const SqlServerExpected = {"entity":"Orders","dialect":"SqlServer","source":"SqlServer","sentence":"INSERT INTO Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry) OUTPUT INSERTED.OrderID VALUES(@customerId,@employeeId,@orderDate,@requiredDate,@shippedDate,@shipViaId,@freight,@name,@address,@city,@region,@postalCode,@country)","children":[{"entity":"Orders.details","dialect":"SqlServer","source":"SqlServer","sentence":"INSERT INTO [Order Details](OrderID,ProductID,UnitPrice,Quantity,Discount) OUTPUT INSERTED.0 VALUES(@orderId,@productId,@unitPrice,@quantity,@discount)","children":[]}]}
		let SqlServer = orm.sentence(expression,{stage:'SqlServer'})
		expect(SqlServerExpected).toStrictEqual(SqlServer)
		const OracleExpected = {"entity":"Orders","dialect":"Oracle","source":"Oracle","sentence":"INSERT INTO Orders(OrderID,CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry) VALUES(SQ_ORDERS.nextval,:customerId,:employeeId,:orderDate,:requiredDate,:shippedDate,:shipViaId,:freight,:name,:address,:city,:region,:postalCode,:country)","children":[{"entity":"Orders.details","dialect":"Oracle","source":"Oracle","sentence":"INSERT INTO \"Order Details\"(OrderID,ProductID,UnitPrice,Quantity,Discount) VALUES(:orderId,:productId,:unitPrice,:quantity,:discount)","children":[]}]}
		let Oracle = orm.sentence(expression,{stage:'Oracle'})
		expect(OracleExpected).toStrictEqual(Oracle)
		const MongoDBExpected = {"entity":"Orders","dialect":"MongoDB","source":"MongoDB","sentence":"{ \"CustomerID\":{{customerId}},\"EmployeeID\":{{employeeId}},\"OrderDate\":{{orderDate}},\"RequiredDate\":{{requiredDate}},\"ShippedDate\":{{shippedDate}},\"ShipVia\":{{shipViaId}},\"Freight\":{{freight}},\"ShipName\":{{name}},\"ShipAddress\":{{address}},\"ShipCity\":{{city}},\"ShipRegion\":{{region}},\"ShipPostalCode\":{{postalCode}},\"ShipCountry\":{{country}} }","children":[{"entity":"Orders.details","dialect":"MongoDB","source":"MongoDB","sentence":"{ \"OrderID\":{{orderId}},\"ProductID\":{{productId}},\"UnitPrice\":{{unitPrice}},\"Quantity\":{{quantity}},\"Discount\":{{discount}} }","children":[]}]}
		let MongoDB = orm.sentence(expression,{stage:'MongoDB'})
		expect(MongoDBExpected).toStrictEqual(MongoDB)
	})
	test('insert 6', async () => {
		const expression = 'Orders.insert().include(p=>[p.details,p.customer])'
		const MySQLExpected = {"entity":"Orders","dialect":"MySQL","source":"MySQL","sentence":"INSERT INTO Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)","children":[{"entity":"Orders.details","dialect":"MySQL","source":"MySQL","sentence":"INSERT INTO `Order Details`(OrderID,ProductID,UnitPrice,Quantity,Discount) VALUES(?,?,?,?,?)","children":[]},{"entity":"Customers","dialect":"MySQL","source":"MySQL","sentence":"INSERT INTO Customers(CustomerID,CompanyName,ContactName,ContactTitle,Address,City,Region,PostalCode,Country) VALUES(?,?,?,?,?,?,?,?,?)","children":[]}]}
		let MySQL = orm.sentence(expression,{stage:'MySQL'})
		expect(MySQLExpected).toStrictEqual(MySQL)
		const MariaDBExpected = {"entity":"Orders","dialect":"MariaDB","source":"MariaDB","sentence":"INSERT INTO Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)","children":[{"entity":"Orders.details","dialect":"MariaDB","source":"MariaDB","sentence":"INSERT INTO `Order Details`(OrderID,ProductID,UnitPrice,Quantity,Discount) VALUES(?,?,?,?,?)","children":[]},{"entity":"Customers","dialect":"MariaDB","source":"MariaDB","sentence":"INSERT INTO Customers(CustomerID,CompanyName,ContactName,ContactTitle,Address,City,Region,PostalCode,Country) VALUES(?,?,?,?,?,?,?,?,?)","children":[]}]}
		let MariaDB = orm.sentence(expression,{stage:'MariaDB'})
		expect(MariaDBExpected).toStrictEqual(MariaDB)
		const PostgreSQLExpected = {"entity":"Orders","dialect":"PostgreSQL","source":"PostgreSQL","sentence":"INSERT INTO Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry) VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) RETURNING OrderID AS id","children":[{"entity":"Orders.details","dialect":"PostgreSQL","source":"PostgreSQL","sentence":"INSERT INTO \"Order Details\"(OrderID,ProductID,UnitPrice,Quantity,Discount) VALUES($1,$2,$3,$4,$5) RETURNING 0 AS id","children":[]},{"entity":"Customers","dialect":"PostgreSQL","source":"PostgreSQL","sentence":"INSERT INTO Customers(CustomerID,CompanyName,ContactName,ContactTitle,Address,City,Region,PostalCode,Country) VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING 0 AS id","children":[]}]}
		let PostgreSQL = orm.sentence(expression,{stage:'PostgreSQL'})
		expect(PostgreSQLExpected).toStrictEqual(PostgreSQL)
		const SqlServerExpected = {"entity":"Orders","dialect":"SqlServer","source":"SqlServer","sentence":"INSERT INTO Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry) OUTPUT INSERTED.OrderID VALUES(@customerId,@employeeId,@orderDate,@requiredDate,@shippedDate,@shipViaId,@freight,@name,@address,@city,@region,@postalCode,@country)","children":[{"entity":"Orders.details","dialect":"SqlServer","source":"SqlServer","sentence":"INSERT INTO [Order Details](OrderID,ProductID,UnitPrice,Quantity,Discount) OUTPUT INSERTED.0 VALUES(@orderId,@productId,@unitPrice,@quantity,@discount)","children":[]},{"entity":"Customers","dialect":"SqlServer","source":"SqlServer","sentence":"INSERT INTO Customers(CustomerID,CompanyName,ContactName,ContactTitle,Address,City,Region,PostalCode,Country) OUTPUT INSERTED.0 VALUES(@id,@name,@contact,@phone,@address,@city,@region,@postalCode,@country)","children":[]}]}
		let SqlServer = orm.sentence(expression,{stage:'SqlServer'})
		expect(SqlServerExpected).toStrictEqual(SqlServer)
		const OracleExpected = {"entity":"Orders","dialect":"Oracle","source":"Oracle","sentence":"INSERT INTO Orders(OrderID,CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry) VALUES(SQ_ORDERS.nextval,:customerId,:employeeId,:orderDate,:requiredDate,:shippedDate,:shipViaId,:freight,:name,:address,:city,:region,:postalCode,:country)","children":[{"entity":"Orders.details","dialect":"Oracle","source":"Oracle","sentence":"INSERT INTO \"Order Details\"(OrderID,ProductID,UnitPrice,Quantity,Discount) VALUES(:orderId,:productId,:unitPrice,:quantity,:discount)","children":[]},{"entity":"Customers","dialect":"Oracle","source":"Oracle","sentence":"INSERT INTO Customers(CustomerID,CompanyName,ContactName,ContactTitle,Address,City,Region,PostalCode,Country) VALUES(:id,:name,:contact,:phone,:address,:city,:region,:postalCode,:country)","children":[]}]}
		let Oracle = orm.sentence(expression,{stage:'Oracle'})
		expect(OracleExpected).toStrictEqual(Oracle)
		const MongoDBExpected = {"entity":"Orders","dialect":"MongoDB","source":"MongoDB","sentence":"{ \"CustomerID\":{{customerId}},\"EmployeeID\":{{employeeId}},\"OrderDate\":{{orderDate}},\"RequiredDate\":{{requiredDate}},\"ShippedDate\":{{shippedDate}},\"ShipVia\":{{shipViaId}},\"Freight\":{{freight}},\"ShipName\":{{name}},\"ShipAddress\":{{address}},\"ShipCity\":{{city}},\"ShipRegion\":{{region}},\"ShipPostalCode\":{{postalCode}},\"ShipCountry\":{{country}} }","children":[{"entity":"Orders.details","dialect":"MongoDB","source":"MongoDB","sentence":"{ \"OrderID\":{{orderId}},\"ProductID\":{{productId}},\"UnitPrice\":{{unitPrice}},\"Quantity\":{{quantity}},\"Discount\":{{discount}} }","children":[]},{"entity":"Customers","dialect":"MongoDB","source":"MongoDB","sentence":"{ \"_id\":{{id}},\"CompanyName\":{{name}},\"ContactName\":{{contact}},\"ContactTitle\":{{phone}},\"Address\":{{address}},\"City\":{{city}},\"Region\":{{region}},\"PostalCode\":{{postalCode}},\"Country\":{{country}} }","children":[]}]}
		let MongoDB = orm.sentence(expression,{stage:'MongoDB'})
		expect(MongoDBExpected).toStrictEqual(MongoDB)
	})
})