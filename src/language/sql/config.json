{
  "dialects": {
    "mariadb": {
      "ddl": {
        "dropIndex": "DROP INDEX {name} ON {table}",
        "createDatabase": "CREATE DATABASE IF NOT EXISTS {name}",
        "createTable": "CREATE TABLE {name} ({define})",
        "incrementalColumDefine": "{name} {type} {nullable} AUTO_INCREMENT",
        "columnDefine": "{name} {type} {nullable} ",
        "createPk": "CONSTRAINT {name} PRIMARY KEY ({columns})",
        "createUk": "CONSTRAINT {name} UNIQUE ({columns})",
        "createFk": "CONSTRAINT {name} FOREIGN KEY ({column}) REFERENCES {fTable} ({fColumn})",
        "createIndex": "CREATE INDEX {name} ON {table} ({columns})",
        "alterTable": "ALTER TABLE {name}",
        "addColumn": "ADD {columnDefine}",
        "addPk": "ADD CONSTRAINT {name} PRIMARY KEY ({columns})",
        "addUk": "ADD CONSTRAINT {name} UNIQUE ({columns})",
        "addFk": "ADD CONSTRAINT {name} FOREIGN KEY ({column}) REFERENCES {fTable} ({fColumn})",
        "alterColumn": "MODIFY {columnDefine}",
        "dropDatabase": "DROP DATABASE IF EXISTS {name}",
        "dropTable": "DROP TABLE {name}",
        "dropColumn": "DROP COLUMN {name}",
        "dropPk": "DROP PRIMARY KEY {name}",
        "dropUk": "DROP UNIQUE {name}",
        "dropFk": "DROP FOREIGN KEY {name}",
        "truncateTable": "TRUNCATE TABLE {name}"
      },
      "dml": {
        "bulkInsert": "INSERT INTO {name}({fields}) VALUES ?",
        "map": "SELECT {0}",
        "first": "SELECT TOP 1 {0}",
        "filter": "WHERE {0}",
        "groupBy": "GROUP BY {0}",
        "having": "HAVING {0}",
        "sort": "ORDER BY {0}",
        "insert": "INSERT INTO {name}({fields}) VALUES({values})",
        "update": "UPDATE {name} {alias} SET {assings}",
        "delete": "DELETE FROM {name} {alias}"
      },
      "others": {
        "delimiterSpaces": "`{name}`",
        "variable": "?",
        "sepatatorSql": ";",
        "notNullable": "NOT NULL",
        "field": "{entityAlias}.{name}",
        "column": "{name}",
        "from": "FROM {name} {alias} ",
        "join": "INNER JOIN {name} {alias} ON {relation}",
        "false": "FALSE",
        "true": "TRUE"
      },
      "functions": {
        "numeric": {
          "atan2": "ATAN({0},{1})",
          "cosh": "((EXP({0}) + EXP(-{0})) / 2)",
          "remainder": "({0} - {1}*ROUND({0}/{1}))",
          "sinh": "((EXP({0}) - EXP(-{0})) / 2)",
          "tanh": "(EXP(2*{0}) - 1)/(EXP(2*{0}) + 1)",
          "trunc": "TRUNCATE({0},{1})",
          "abs": "ABS({0})",
          "acos": "ACOS({0})",
          "asin": "ASIN({0})",
          "atan": "ATAN({0})",
          "ceil": "CEIL({0})",
          "cos": "COS({0})",
          "exp": "EXP({0})",
          "floor": "FLOOR({0})",
          "ln": "LN({0})",
          "log": "LOG({0},{1})",
          "round": "ROUND({0},{1})",
          "sign": "SIGN({0})",
          "sin": "SIN({0})",
          "tan": "TAN({0})"
        },
        "string": {
          "chr": "CHAR({0} USING ASCII)",
          "initcap": "INITCAP({0})",
          "length": "CHAR_LENGTH({0})",
          "lower": "LOWER({0})",
          "lpad": "LPAD({0},{1},{2})",
          "ltrim": "LTRIM({0})",
          "regExpReplace": "REGEXP_REPLACE({0},{1})",
          "regExpSubstr": "REGEXP_SUBSTR({0},{1})",
          "replace": "REPLACE({0},{1},{2})",
          "rpad": "RPAD({0},{1},{2})",
          "rtrim": "RTRIM({0})",
          "substr": "SUBSTR({0},{1},{2})",
          "trim": "TRIM({0})",
          "upper": "UPPER({0})"
        },
        "datetime": {
          "curtime": "CURTIME()",
          "today": "CURDATE()",
          "now": "NOW()",
          "date": "CONVERT({0}, DATE)",
          "datetime": "CONVERT({0}, DATETIME)",
          "time": "CONVERT({0}, TIME)",
          "year": "EXTRACT(YEAR FROM {0})",
          "month": "EXTRACT(MONTH FROM {0})",
          "day": "DAYOFMONTH({0})",
          "weekday": "DAYOFWEEK({0})",
          "hours": "EXTRACT(HOUR FROM {0})",
          "minutes": "EXTRACT(MINUTE FROM {0})",
          "seconds": "EXTRACT(SECOND FROM {0})",
          "addYear": "DATE_ADD({0}, INTERVAL {1} YEAR)",
          "addMonth": "DATE_ADD({0}, INTERVAL {1} MONTH)",
          "addDay": "DATE_ADD({0}, INTERVAL {1} DAY)",
          "addHours": "DATE_ADD({0}, INTERVAL {1} HOUR)",
          "addMinutes": "DATE_ADD({0}, INTERVAL {1} MINUTE)",
          "addSeconds": "DATE_ADD({0}, INTERVAL {1} SECOND)",
          "addTime": "ADDTIME({0},{1})",
          "dateDiff": "DATEDIFF({0},{1})",
          "timeDiff": "TIMEDIFF({0},{1})"
        },
        "convert": {
          "toString": "CONVERT({0}, CHAR)",
          "toJson": "CONVERT({0}, JSON)",
          "toNumber": "CONVERT({0}, DECIMAL)"
        },
        "metadata": {
          "user": "CURRENT_USER()",
          "database": "DATABASE()",
          "source": "SYS_CONTEXT('USERENV','DB_NAME')"
        },
        "null": {
          "nvl": "IFNULL({0},{1})",
          "nvl2": "CASE WHEN {0} NOT NULL THEN {1} ELSE {2} END",
          "isNull": "({0} IS NULL)",
          "isNotNull": "({0} IS NOT NULL)"
        },
        "multiple": {
          "concat": "CONCAT({acumulated},{value})"
        },
        "general": {
          "as": "{value} AS {alias}",
          "desc": "{0} desc",
          "asc": "{0} asc",
          "between": "{0} BETWEEN {1} AND {2}",
          "includes": " {0} IN ({1})"
        },
        "group": {
          "avg": "AVG({0})",
          "count": "COUNT({0})",
          "first": "FIRST({0})",
          "last": "LAST({0})",
          "max": "MAX({0})",
          "min": "MIN({0})",
          "sum": "SUM({0})"
        }
      },
      "types": {
        "boolean": "BOOLEAN",
        "integer": "INTEGER",
        "decimal": "DECIMAL(10,4)",
        "string": "VARCHAR({0})",
        "datetime": "DATETIME",
        "date": "DATE",
        "time": "TIME"
      },
      "formats": {
        "datetime": "yyyy-LL-dd HH:mm:ss",
        "date": "yyyy-LL-dd",
        "time": "HH:mm:ss"
      },
      "operators": {
        "unary": {
          "-": "- {0}",
          "~": "~ {0}",
          "!": "NOT {0}"
        },
        "binary": {
          "+": "({0} + {1})",
          "-": "({0} - {1})",
          "*": "({0} * {1})",
          "/": "({0} / {1})",
          "**": "POWER({0},{1})",
          "//": "POWER({0},(1/{1}))",
          "%": "MOD({0},{1})",
          "&": "BITAND({0},{1})",
          "|": "BITOR({0},{1})",
          "^": "BITXOR({0},{1})",
          "<<": "{0} << {1}",
          ">>": "{0} >> {1}",
          "==": "{0} = {1}",
          "!=": "{0} <> {1}",
          ">": "{0} > {1}",
          "<": "{0} < {1}",
          ">=": "{0} >= {1}",
          "<=": "{0} <= {1}",
          "&&": "({0} AND {1})",
          "||": "({0} OR {1})",
          "[]": "N/A",
          "=": "{0} = {1}",
          "+=": "{0} = ({0} + {1})",
          "-=": "{0} = ({0} - {1})",
          "*=": "{0} = ({0} * {1})",
          "/=": "{0} = ({0} / {1})",
          "**=": "{0} = POWER({0},{1})",
          "//=": "{0} = POWER({0},(1/{1}))",
          "%=": "{0} = MOD({0},{1})",
          "&=": "{0} = BITAND({0},{1})",
          "|=": "{0} = BITOR({0},{1})",
          "^=": "{0} = BITXOR({0},{1})",
          "<<=": "{0} = {0} << {1}",
          ">>=": "{0} = {0} >> {1}"
        },
        "ternary": {
          "?": "IF {0} THEN {1} ELSE {2} END"
        }
      }
    },
    "mssql": {
      "others": {
        "delimiterSpaces": "[{name}]",
        "sepatatorSql": " \\nGO",
        "notNullable": "NOT NULL",
        "variable": ":{name}",
        "field": "{entityAlias}.{name}",
        "column": "{name}",
        "from": "FROM {name} {alias} ",
        "join": "INNER JOIN {name} {alias} ON {relation}",
        "false": "FALSE",
        "true": "TRUE"
      },
      "types": {
        "boolean": "BOOLEAN",
        "integer": "INTEGER",
        "decimal": "DECIMAL(10,4)",
        "string": "VARCHAR({0})",
        "datetime": "DATETIME",
        "date": "DATE",
        "time": "TIME"
      },
      "formats": {
        "datetime": "yyyy-LL-dd HH:mm:ss",
        "date": "yyyy-LL-dd",
        "time": "HH:mm:ss"
      },
      "ddl": {
        "createDatabase": "CREATE DATABASE IF NOT EXISTS {name}",
        "createTable": "CREATE TABLE {name} ({define})",
        "incrementalColumDefine": "{name} {type} {nullable} AUTO_INCREMENT",
        "columnDefine": "{name} {type} {nullable} ",
        "createPk": "CONSTRAINT {name} PRIMARY KEY ({columns})",
        "createUk": "CONSTRAINT {name} UNIQUE ({columns})",
        "createFk": "CONSTRAINT {name} FOREIGN KEY ({column}) REFERENCES {fTable} ({fColumn})",
        "createIndex": "CREATE INDEX {name} ON {table} ({columns})",
        "alterTable": "ALTER TABLE {name}",
        "addColumn": "ADD {columnDefine}",
        "addPk": "ADD CONSTRAINT {name} PRIMARY KEY ({columns})",
        "addUk": "ADD CONSTRAINT {name} UNIQUE ({columns})",
        "addFk": "ADD CONSTRAINT {name} FOREIGN KEY ({column}) REFERENCES {fTable} ({fColumn})",
        "alterColumn": "MODIFY {columnDefine}",
        "dropDatabase": "DROP DATABASE IF EXISTS {name}",
        "dropTable": "DROP TABLE {name}",
        "dropColumn": "DROP COLUMN {name}",
        "dropPk": "DROP PRIMARY KEY {name}",
        "dropUk": "DROP UNIQUE {name}",
        "dropFk": "DROP FOREIGN KEY {name}",
        "dropIndex": "DROP INDEX {name} ON {table}",
        "truncateTable": "TRUNCATE TABLE {name}"
      },
      "dml": {
        "map": "SELECT {0}",
        "first": "SELECT TOP 1 {0}",
        "filter": "WHERE {0}",
        "groupBy": "GROUP BY {0}",
        "having": "HAVING {0}",
        "sort": "ORDER BY {0}",
        "insert": "INSERT INTO {name}({fields}) VALUES({values})",
        "update": "UPDATE {name} {alias} SET {assings}",
        "delete": "DELETE FROM {name} {alias}",
        "bulkInsert": "INSERT INTO {name}({fields}) VALUES {values}"
      },
      "operators": {
        "unary": {
          "-": "- {0}",
          "~": "~ {0}",
          "!": "NOT {0}"
        },
        "binary": {
          "+": "({0} + {1})",
          "-": "({0} - {1})",
          "*": "({0} * {1})",
          "/": "({0} / {1})",
          "**": "POWER({0},{1})",
          "//": "POWER({0},(1/{1}))",
          "%": "MOD({0},{1})",
          "&": "BITAND({0},{1})",
          "|": "BITOR({0},{1})",
          "^": "BITXOR({0},{1})",
          "<<": "{0} << {1}",
          ">>": "{0} >> {1}",
          "==": "{0} = {1}",
          "!=": "{0} <> {1}",
          ">": "{0} > {1}",
          "<": "{0} < {1}",
          ">=": "{0} >= {1}",
          "<=": "{0} <= {1}",
          "&&": "({0} AND {1})",
          "||": "({0} OR {1})",
          "[]": "N/A",
          "=": "{0} = {1}",
          "+=": "{0} = ({0} + {1})",
          "-=": "{0} = ({0} - {1})",
          "*=": "{0} = ({0} * {1})",
          "/=": "{0} = ({0} / {1})",
          "**=": "{0} = POWER({0},{1})",
          "//=": "{0} = POWER({0},(1/{1}))",
          "%=": "{0} = MOD({0},{1})",
          "&=": "{0} = BITAND({0},{1})",
          "|=": "{0} = BITOR({0},{1})",
          "^=": "{0} = BITXOR({0},{1})",
          "<<=": "{0} = {0} << {1}",
          ">>=": "{0} = {0} >> {1}"
        },
        "ternary": {
          "?": "IF {0} THEN {1} ELSE {2} END"
        }
      },
      "functions": {
        "general": {
          "as": "{value} AS {alias}",
          "desc": "{0} desc",
          "asc": "{0} asc",
          "between": "{0} BETWEEN {1} AND {2}",
          "includes": " {0} IN ({1})"
        },
        "numeric": {
          "abs": "ABS({0})",
          "acos": "ACOS({0})",
          "asin": "ASIN({0})",
          "atan": "ATAN({0})",
          "atan2": "ATAN2({0},{1})",
          "ceil": "CEIL({0})",
          "cos": "COS({0})",
          "cosh": "COSH({0})",
          "exp": "EXP({0})",
          "floor": "FLOOR({0})",
          "ln": "LN({0})",
          "log": "LOG({0},{1})",
          "remainder": "REMAINDER({0},{1})",
          "round": "ROUND({0},{1})",
          "sign": "SIGN({0})",
          "sin": "SIN({0})",
          "sinh": "SINH({0})",
          "tan": "TAN({0})",
          "tanh": "TANH({0})",
          "trunc": "TRUNC({0},{1})"
        },
        "string": {
          "chr": "CHR({0})",
          "initcap": "INITCAP({0})",
          "lower": "LOWER({0})",
          "lpad": "LPAD({0},{1},{2})",
          "ltrim": "LTRIM({0})",
          "regExpReplace": "REGEXP_REPLACE({0},{1})",
          "regExpSubstr": "REGEXP_SUBSTR({0},{1})",
          "replace": "REPLACE({0},{1},{2})",
          "rpad": "RPAD({0},{1},{2})",
          "rtrim": "RTRIM({0})",
          "substr": "SUBSTR({0},{1},{2})",
          "trim": "TRIM({0})",
          "upper": "UPPER({0})",
          "length": "LENGTH({0})"
        },
        "datetime": {
          "curtime": "SYSTIMESTAMP",
          "today": "TRUNC(SYSDATE)",
          "now": "SYSTIMESTAMP",
          "date": "CAST({0} AS DATE)",
          "datetime": "CAST({0} AS TIMESTAMP)",
          "time": "CAST({0} AS TIME)",
          "year": "EXTRACT(YEAR FROM {0})",
          "month": "EXTRACT(MONTH FROM {0})",
          "day": "DAY(DAY FROM {0})",
          "weekday": "TO_NUMBER(TO_CHAR({0}, 'D'))",
          "hours": "EXTRACT(HOUR FROM {0})",
          "minutes": "EXTRACT(MINUTE FROM {0})",
          "seconds": "EXTRACT(SECOND FROM {0})",
          "addYear": "{0} + interval '{1}' YEAR",
          "addMonth": "ADD_MONTHS({0},{1})",
          "addDay": "{0} + {1}",
          "addHours": "{0} + interval '{1}' HOUR",
          "addMinutes": "{0} + interval '{1}' MINUTE",
          "addSeconds": "{0} + interval '{1}' SECOND",
          "addTime": "ADDTIME({0},{1})",
          "dateDiff": "DATEDIFF({0},{1})",
          "timeDiff": "TIMEDIFF({0},{1})"
        },
        "convert": {
          "toString": "CAST({0} AS VARCHAR2)",
          "toJson": "json_value({0})",
          "toNumber": "CAST({0} AS NUMBER)"
        },
        "metadata": {
          "user": "USER",
          "source": "SYS_CONTEXT('USERENV','DB_NAME')"
        },
        "null": {
          "nvl": "NVL({0},{1})",
          "nvl2": "NVL2({0},{1},{2})",
          "isNull": "({0} IS NULL)",
          "isNotNull": "({0} IS NOT NULL)"
        },
        "multiple": {
          "concat": "{acumulated} || {value}"
        },
        "group": {
          "avg": "AVG({0})",
          "count": "COUNT({0})",
          "first": "FIRST({0})",
          "last": "LAST({0})",
          "max": "MAX({0})",
          "min": "MIN({0})",
          "sum": "SUM({0})"
        }
      }
    },
    "mysql": {
      "ddl": {
        "dropIndex": "DROP INDEX {name} ON {table}",
        "createDatabase": "CREATE DATABASE IF NOT EXISTS {name}",
        "createTable": "CREATE TABLE {name} ({define})",
        "incrementalColumDefine": "{name} {type} {nullable} AUTO_INCREMENT",
        "columnDefine": "{name} {type} {nullable} ",
        "createPk": "CONSTRAINT {name} PRIMARY KEY ({columns})",
        "createUk": "CONSTRAINT {name} UNIQUE ({columns})",
        "createFk": "CONSTRAINT {name} FOREIGN KEY ({column}) REFERENCES {fTable} ({fColumn})",
        "createIndex": "CREATE INDEX {name} ON {table} ({columns})",
        "alterTable": "ALTER TABLE {name}",
        "addColumn": "ADD {columnDefine}",
        "addPk": "ADD CONSTRAINT {name} PRIMARY KEY ({columns})",
        "addUk": "ADD CONSTRAINT {name} UNIQUE ({columns})",
        "addFk": "ADD CONSTRAINT {name} FOREIGN KEY ({column}) REFERENCES {fTable} ({fColumn})",
        "alterColumn": "MODIFY {columnDefine}",
        "dropDatabase": "DROP DATABASE IF EXISTS {name}",
        "dropTable": "DROP TABLE {name}",
        "dropColumn": "DROP COLUMN {name}",
        "dropPk": "DROP PRIMARY KEY {name}",
        "dropUk": "DROP UNIQUE {name}",
        "dropFk": "DROP FOREIGN KEY {name}",
        "truncateTable": "TRUNCATE TABLE {name}"
      },
      "dml": {
        "bulkInsert": "INSERT INTO {name}({fields}) VALUES ?",
        "map": "SELECT {0}",
        "first": "SELECT TOP 1 {0}",
        "filter": "WHERE {0}",
        "groupBy": "GROUP BY {0}",
        "having": "HAVING {0}",
        "sort": "ORDER BY {0}",
        "insert": "INSERT INTO {name}({fields}) VALUES({values})",
        "update": "UPDATE {name} {alias} SET {assings}",
        "delete": "DELETE FROM {name} {alias}"
      },
      "others": {
        "delimiterSpaces": "`{name}`",
        "variable": "?",
        "sepatatorSql": ";",
        "notNullable": "NOT NULL",
        "field": "{entityAlias}.{name}",
        "column": "{name}",
        "from": "FROM {name} {alias} ",
        "join": "INNER JOIN {name} {alias} ON {relation}",
        "false": "FALSE",
        "true": "TRUE"
      },
      "functions": {
        "numeric": {
          "atan2": "ATAN({0},{1})",
          "cosh": "((EXP({0}) + EXP(-{0})) / 2)",
          "remainder": "({0} - {1}*ROUND({0}/{1}))",
          "sinh": "((EXP({0}) - EXP(-{0})) / 2)",
          "tanh": "(EXP(2*{0}) - 1)/(EXP(2*{0}) + 1)",
          "trunc": "TRUNCATE({0},{1})",
          "abs": "ABS({0})",
          "acos": "ACOS({0})",
          "asin": "ASIN({0})",
          "atan": "ATAN({0})",
          "ceil": "CEIL({0})",
          "cos": "COS({0})",
          "exp": "EXP({0})",
          "floor": "FLOOR({0})",
          "ln": "LN({0})",
          "log": "LOG({0},{1})",
          "round": "ROUND({0},{1})",
          "sign": "SIGN({0})",
          "sin": "SIN({0})",
          "tan": "TAN({0})"
        },
        "string": {
          "chr": "CHAR({0} USING ASCII)",
          "initcap": "INITCAP({0})",
          "length": "CHAR_LENGTH({0})",
          "lower": "LOWER({0})",
          "lpad": "LPAD({0},{1},{2})",
          "ltrim": "LTRIM({0})",
          "regExpReplace": "REGEXP_REPLACE({0},{1})",
          "regExpSubstr": "REGEXP_SUBSTR({0},{1})",
          "replace": "REPLACE({0},{1},{2})",
          "rpad": "RPAD({0},{1},{2})",
          "rtrim": "RTRIM({0})",
          "substr": "SUBSTR({0},{1},{2})",
          "trim": "TRIM({0})",
          "upper": "UPPER({0})"
        },
        "datetime": {
          "curtime": "CURTIME()",
          "today": "CURDATE()",
          "now": "NOW()",
          "date": "CONVERT({0}, DATE)",
          "datetime": "CONVERT({0}, DATETIME)",
          "time": "CONVERT({0}, TIME)",
          "year": "EXTRACT(YEAR FROM {0})",
          "month": "EXTRACT(MONTH FROM {0})",
          "day": "DAYOFMONTH({0})",
          "weekday": "DAYOFWEEK({0})",
          "hours": "EXTRACT(HOUR FROM {0})",
          "minutes": "EXTRACT(MINUTE FROM {0})",
          "seconds": "EXTRACT(SECOND FROM {0})",
          "addYear": "DATE_ADD({0}, INTERVAL {1} YEAR)",
          "addMonth": "DATE_ADD({0}, INTERVAL {1} MONTH)",
          "addDay": "DATE_ADD({0}, INTERVAL {1} DAY)",
          "addHours": "DATE_ADD({0}, INTERVAL {1} HOUR)",
          "addMinutes": "DATE_ADD({0}, INTERVAL {1} MINUTE)",
          "addSeconds": "DATE_ADD({0}, INTERVAL {1} SECOND)",
          "addTime": "ADDTIME({0},{1})",
          "dateDiff": "DATEDIFF({0},{1})",
          "timeDiff": "TIMEDIFF({0},{1})"
        },
        "convert": {
          "toString": "CONVERT({0}, CHAR)",
          "toJson": "CONVERT({0}, JSON)",
          "toNumber": "CONVERT({0}, DECIMAL)"
        },
        "metadata": {
          "user": "CURRENT_USER()",
          "database": "DATABASE()",
          "source": "SYS_CONTEXT('USERENV','DB_NAME')"
        },
        "null": {
          "nvl": "IFNULL({0},{1})",
          "nvl2": "CASE WHEN {0} NOT NULL THEN {1} ELSE {2} END",
          "isNull": "({0} IS NULL)",
          "isNotNull": "({0} IS NOT NULL)"
        },
        "multiple": {
          "concat": "CONCAT({acumulated},{value})"
        },
        "general": {
          "as": "{value} AS {alias}",
          "desc": "{0} desc",
          "asc": "{0} asc",
          "between": "{0} BETWEEN {1} AND {2}",
          "includes": " {0} IN ({1})"
        },
        "group": {
          "avg": "AVG({0})",
          "count": "COUNT({0})",
          "first": "FIRST({0})",
          "last": "LAST({0})",
          "max": "MAX({0})",
          "min": "MIN({0})",
          "sum": "SUM({0})"
        }
      },
      "types": {
        "boolean": "BOOLEAN",
        "integer": "INTEGER",
        "decimal": "DECIMAL(10,4)",
        "string": "VARCHAR({0})",
        "datetime": "DATETIME",
        "date": "DATE",
        "time": "TIME"
      },
      "formats": {
        "datetime": "yyyy-LL-dd HH:mm:ss",
        "date": "yyyy-LL-dd",
        "time": "HH:mm:ss"
      },
      "operators": {
        "unary": {
          "-": "- {0}",
          "~": "~ {0}",
          "!": "NOT {0}"
        },
        "binary": {
          "+": "({0} + {1})",
          "-": "({0} - {1})",
          "*": "({0} * {1})",
          "/": "({0} / {1})",
          "**": "POWER({0},{1})",
          "//": "POWER({0},(1/{1}))",
          "%": "MOD({0},{1})",
          "&": "BITAND({0},{1})",
          "|": "BITOR({0},{1})",
          "^": "BITXOR({0},{1})",
          "<<": "{0} << {1}",
          ">>": "{0} >> {1}",
          "==": "{0} = {1}",
          "!=": "{0} <> {1}",
          ">": "{0} > {1}",
          "<": "{0} < {1}",
          ">=": "{0} >= {1}",
          "<=": "{0} <= {1}",
          "&&": "({0} AND {1})",
          "||": "({0} OR {1})",
          "[]": "N/A",
          "=": "{0} = {1}",
          "+=": "{0} = ({0} + {1})",
          "-=": "{0} = ({0} - {1})",
          "*=": "{0} = ({0} * {1})",
          "/=": "{0} = ({0} / {1})",
          "**=": "{0} = POWER({0},{1})",
          "//=": "{0} = POWER({0},(1/{1}))",
          "%=": "{0} = MOD({0},{1})",
          "&=": "{0} = BITAND({0},{1})",
          "|=": "{0} = BITOR({0},{1})",
          "^=": "{0} = BITXOR({0},{1})",
          "<<=": "{0} = {0} << {1}",
          ">>=": "{0} = {0} >> {1}"
        },
        "ternary": {
          "?": "IF {0} THEN {1} ELSE {2} END"
        }
      }
    },
    "oracle": {
      "types": {
        "boolean": "BOOLEAN",
        "integer": "INTEGER",
        "decimal": "DECIMAL(10,4)",
        "string": "VARCHAR({0})",
        "datetime": "DATETIME",
        "date": "DATE",
        "time": "TIME"
      },
      "formats": {
        "datetime": "yyyy-LL-dd HH:mm:ss",
        "date": "yyyy-LL-dd",
        "time": "HH:mm:ss"
      },
      "ddl": {
        "createDatabase": "CREATE DATABASE IF NOT EXISTS {name}",
        "createTable": "CREATE TABLE {name} ({define})",
        "incrementalColumDefine": "{name} {type} {nullable} AUTO_INCREMENT",
        "columnDefine": "{name} {type} {nullable} ",
        "createPk": "CONSTRAINT {name} PRIMARY KEY ({columns})",
        "createUk": "CONSTRAINT {name} UNIQUE ({columns})",
        "createFk": "CONSTRAINT {name} FOREIGN KEY ({column}) REFERENCES {fTable} ({fColumn})",
        "createIndex": "CREATE INDEX {name} ON {table} ({columns})",
        "alterTable": "ALTER TABLE {name}",
        "addColumn": "ADD {columnDefine}",
        "addPk": "ADD CONSTRAINT {name} PRIMARY KEY ({columns})",
        "addUk": "ADD CONSTRAINT {name} UNIQUE ({columns})",
        "addFk": "ADD CONSTRAINT {name} FOREIGN KEY ({column}) REFERENCES {fTable} ({fColumn})",
        "alterColumn": "MODIFY {columnDefine}",
        "dropDatabase": "DROP DATABASE IF EXISTS {name}",
        "dropTable": "DROP TABLE {name}",
        "dropColumn": "DROP COLUMN {name}",
        "dropPk": "DROP PRIMARY KEY {name}",
        "dropUk": "DROP UNIQUE {name}",
        "dropFk": "DROP FOREIGN KEY {name}",
        "dropIndex": "DROP INDEX {name} ON {table}",
        "truncateTable": "TRUNCATE TABLE {name}"
      },
      "dml": {
        "map": "SELECT {0}",
        "first": "SELECT TOP 1 {0}",
        "filter": "WHERE {0}",
        "groupBy": "GROUP BY {0}",
        "having": "HAVING {0}",
        "sort": "ORDER BY {0}",
        "insert": "INSERT INTO {name}({fields}) VALUES({values})",
        "update": "UPDATE {name} {alias} SET {assings}",
        "delete": "DELETE FROM {name} {alias}",
        "bulkInsert": "INSERT INTO {name}({fields}) VALUES {values}"
      },
      "others": {
        "delimiterSpaces": "\"{name}\"",
        "sepatatorSql": ";",
        "notNullable": "NOT NULL",
        "variable": ":{name}",
        "field": "{entityAlias}.{name}",
        "column": "{name}",
        "from": "FROM {name} {alias} ",
        "join": "INNER JOIN {name} {alias} ON {relation}",
        "false": "FALSE",
        "true": "TRUE"
      },
      "operators": {
        "unary": {
          "-": "- {0}",
          "~": "~ {0}",
          "!": "NOT {0}"
        },
        "binary": {
          "+": "({0} + {1})",
          "-": "({0} - {1})",
          "*": "({0} * {1})",
          "/": "({0} / {1})",
          "**": "POWER({0},{1})",
          "//": "POWER({0},(1/{1}))",
          "%": "MOD({0},{1})",
          "&": "BITAND({0},{1})",
          "|": "BITOR({0},{1})",
          "^": "BITXOR({0},{1})",
          "<<": "{0} << {1}",
          ">>": "{0} >> {1}",
          "==": "{0} = {1}",
          "!=": "{0} <> {1}",
          ">": "{0} > {1}",
          "<": "{0} < {1}",
          ">=": "{0} >= {1}",
          "<=": "{0} <= {1}",
          "&&": "({0} AND {1})",
          "||": "({0} OR {1})",
          "[]": "N/A",
          "=": "{0} = {1}",
          "+=": "{0} = ({0} + {1})",
          "-=": "{0} = ({0} - {1})",
          "*=": "{0} = ({0} * {1})",
          "/=": "{0} = ({0} / {1})",
          "**=": "{0} = POWER({0},{1})",
          "//=": "{0} = POWER({0},(1/{1}))",
          "%=": "{0} = MOD({0},{1})",
          "&=": "{0} = BITAND({0},{1})",
          "|=": "{0} = BITOR({0},{1})",
          "^=": "{0} = BITXOR({0},{1})",
          "<<=": "{0} = {0} << {1}",
          ">>=": "{0} = {0} >> {1}"
        },
        "ternary": {
          "?": "IF {0} THEN {1} ELSE {2} END"
        }
      },
      "functions": {
        "general": {
          "as": "{value} AS {alias}",
          "desc": "{0} desc",
          "asc": "{0} asc",
          "between": "{0} BETWEEN {1} AND {2}",
          "includes": " {0} IN ({1})"
        },
        "numeric": {
          "abs": "ABS({0})",
          "acos": "ACOS({0})",
          "asin": "ASIN({0})",
          "atan": "ATAN({0})",
          "atan2": "ATAN2({0},{1})",
          "ceil": "CEIL({0})",
          "cos": "COS({0})",
          "cosh": "COSH({0})",
          "exp": "EXP({0})",
          "floor": "FLOOR({0})",
          "ln": "LN({0})",
          "log": "LOG({0},{1})",
          "remainder": "REMAINDER({0},{1})",
          "round": "ROUND({0},{1})",
          "sign": "SIGN({0})",
          "sin": "SIN({0})",
          "sinh": "SINH({0})",
          "tan": "TAN({0})",
          "tanh": "TANH({0})",
          "trunc": "TRUNC({0},{1})"
        },
        "string": {
          "chr": "CHR({0})",
          "initcap": "INITCAP({0})",
          "lower": "LOWER({0})",
          "lpad": "LPAD({0},{1},{2})",
          "ltrim": "LTRIM({0})",
          "regExpReplace": "REGEXP_REPLACE({0},{1})",
          "regExpSubstr": "REGEXP_SUBSTR({0},{1})",
          "replace": "REPLACE({0},{1},{2})",
          "rpad": "RPAD({0},{1},{2})",
          "rtrim": "RTRIM({0})",
          "substr": "SUBSTR({0},{1},{2})",
          "trim": "TRIM({0})",
          "upper": "UPPER({0})",
          "length": "LENGTH({0})"
        },
        "datetime": {
          "curtime": "SYSTIMESTAMP",
          "today": "TRUNC(SYSDATE)",
          "now": "SYSTIMESTAMP",
          "date": "CAST({0} AS DATE)",
          "datetime": "CAST({0} AS TIMESTAMP)",
          "time": "CAST({0} AS TIME)",
          "year": "EXTRACT(YEAR FROM {0})",
          "month": "EXTRACT(MONTH FROM {0})",
          "day": "DAY(DAY FROM {0})",
          "weekday": "TO_NUMBER(TO_CHAR({0}, 'D'))",
          "hours": "EXTRACT(HOUR FROM {0})",
          "minutes": "EXTRACT(MINUTE FROM {0})",
          "seconds": "EXTRACT(SECOND FROM {0})",
          "addYear": "{0} + interval '{1}' YEAR",
          "addMonth": "ADD_MONTHS({0},{1})",
          "addDay": "{0} + {1}",
          "addHours": "{0} + interval '{1}' HOUR",
          "addMinutes": "{0} + interval '{1}' MINUTE",
          "addSeconds": "{0} + interval '{1}' SECOND",
          "addTime": "ADDTIME({0},{1})",
          "dateDiff": "DATEDIFF({0},{1})",
          "timeDiff": "TIMEDIFF({0},{1})"
        },
        "convert": {
          "toString": "CAST({0} AS VARCHAR2)",
          "toJson": "json_value({0})",
          "toNumber": "CAST({0} AS NUMBER)"
        },
        "metadata": {
          "user": "USER",
          "source": "SYS_CONTEXT('USERENV','DB_NAME')"
        },
        "null": {
          "nvl": "NVL({0},{1})",
          "nvl2": "NVL2({0},{1},{2})",
          "isNull": "({0} IS NULL)",
          "isNotNull": "({0} IS NOT NULL)"
        },
        "multiple": {
          "concat": "{acumulated} || {value}"
        },
        "group": {
          "avg": "AVG({0})",
          "count": "COUNT({0})",
          "first": "FIRST({0})",
          "last": "LAST({0})",
          "max": "MAX({0})",
          "min": "MIN({0})",
          "sum": "SUM({0})"
        }
      }
    },
    "postgres": {
      "types": {
        "datetime": "TIMESTAMP",
        "boolean": "BOOLEAN",
        "integer": "INTEGER",
        "decimal": "DECIMAL(10,4)",
        "string": "VARCHAR({0})",
        "date": "DATE",
        "time": "TIME"
      },
      "ddl": {
        "incrementalColumDefine": "{name} serial",
        "dropPk": "DROP CONSTRAINT {name}",
        "dropUk": "DROP CONSTRAINT {name}",
        "dropFk": "DROP CONSTRAINT {name}",
        "dropIndex": "DROP INDEX {name}",
        "createDatabase": "CREATE DATABASE IF NOT EXISTS {name}",
        "createTable": "CREATE TABLE {name} ({define})",
        "columnDefine": "{name} {type} {nullable} ",
        "createPk": "CONSTRAINT {name} PRIMARY KEY ({columns})",
        "createUk": "CONSTRAINT {name} UNIQUE ({columns})",
        "createFk": "CONSTRAINT {name} FOREIGN KEY ({column}) REFERENCES {fTable} ({fColumn})",
        "createIndex": "CREATE INDEX {name} ON {table} ({columns})",
        "alterTable": "ALTER TABLE {name}",
        "addColumn": "ADD {columnDefine}",
        "addPk": "ADD CONSTRAINT {name} PRIMARY KEY ({columns})",
        "addUk": "ADD CONSTRAINT {name} UNIQUE ({columns})",
        "addFk": "ADD CONSTRAINT {name} FOREIGN KEY ({column}) REFERENCES {fTable} ({fColumn})",
        "alterColumn": "MODIFY {columnDefine}",
        "dropDatabase": "DROP DATABASE IF EXISTS {name}",
        "dropTable": "DROP TABLE {name}",
        "dropColumn": "DROP COLUMN {name}",
        "truncateTable": "TRUNCATE TABLE {name}"
      },
      "dml": {
        "insert": "INSERT INTO {name}({fields}) VALUES({values}) RETURNING {autoincrementField} AS id",
        "bulkInsert": "INSERT INTO {name}({fields}) VALUES",
        "map": "SELECT {0}",
        "first": "SELECT TOP 1 {0}",
        "filter": "WHERE {0}",
        "groupBy": "GROUP BY {0}",
        "having": "HAVING {0}",
        "sort": "ORDER BY {0}",
        "update": "UPDATE {name} {alias} SET {assings}",
        "delete": "DELETE FROM {name} {alias}"
      },
      "others": {
        "variable": "${number}",
        "delimiterSpaces": "\"{name}\"",
        "sepatatorSql": ";",
        "notNullable": "NOT NULL",
        "field": "{entityAlias}.{name}",
        "column": "{name}",
        "from": "FROM {name} {alias} ",
        "join": "INNER JOIN {name} {alias} ON {relation}",
        "false": "FALSE",
        "true": "TRUE"
      },
      "formats": {
        "datetime": "yyyy-LL-dd HH:mm:ss",
        "date": "yyyy-LL-dd",
        "time": "HH:mm:ss"
      },
      "operators": {
        "unary": {
          "-": "- {0}",
          "~": "~ {0}",
          "!": "NOT {0}"
        },
        "binary": {
          "+": "({0} + {1})",
          "-": "({0} - {1})",
          "*": "({0} * {1})",
          "/": "({0} / {1})",
          "**": "POWER({0},{1})",
          "//": "POWER({0},(1/{1}))",
          "%": "MOD({0},{1})",
          "&": "BITAND({0},{1})",
          "|": "BITOR({0},{1})",
          "^": "BITXOR({0},{1})",
          "<<": "{0} << {1}",
          ">>": "{0} >> {1}",
          "==": "{0} = {1}",
          "!=": "{0} <> {1}",
          ">": "{0} > {1}",
          "<": "{0} < {1}",
          ">=": "{0} >= {1}",
          "<=": "{0} <= {1}",
          "&&": "({0} AND {1})",
          "||": "({0} OR {1})",
          "[]": "N/A",
          "=": "{0} = {1}",
          "+=": "{0} = ({0} + {1})",
          "-=": "{0} = ({0} - {1})",
          "*=": "{0} = ({0} * {1})",
          "/=": "{0} = ({0} / {1})",
          "**=": "{0} = POWER({0},{1})",
          "//=": "{0} = POWER({0},(1/{1}))",
          "%=": "{0} = MOD({0},{1})",
          "&=": "{0} = BITAND({0},{1})",
          "|=": "{0} = BITOR({0},{1})",
          "^=": "{0} = BITXOR({0},{1})",
          "<<=": "{0} = {0} << {1}",
          ">>=": "{0} = {0} >> {1}"
        },
        "ternary": {
          "?": "IF {0} THEN {1} ELSE {2} END"
        }
      },
      "functions": {
        "general": {
          "as": "{value} AS {alias}",
          "desc": "{0} desc",
          "asc": "{0} asc",
          "between": "{0} BETWEEN {1} AND {2}",
          "includes": " {0} IN ({1})"
        },
        "numeric": {
          "abs": "ABS({0})",
          "acos": "ACOS({0})",
          "asin": "ASIN({0})",
          "atan": "ATAN({0})",
          "atan2": "ATAN2({0},{1})",
          "ceil": "CEIL({0})",
          "cos": "COS({0})",
          "cosh": "COSH({0})",
          "exp": "EXP({0})",
          "floor": "FLOOR({0})",
          "ln": "LN({0})",
          "log": "LOG({0},{1})",
          "remainder": "REMAINDER({0},{1})",
          "round": "ROUND({0},{1})",
          "sign": "SIGN({0})",
          "sin": "SIN({0})",
          "sinh": "SINH({0})",
          "tan": "TAN({0})",
          "tanh": "TANH({0})",
          "trunc": "TRUNC({0},{1})"
        },
        "string": {
          "chr": "CHR({0})",
          "initcap": "INITCAP({0})",
          "lower": "LOWER({0})",
          "lpad": "LPAD({0},{1},{2})",
          "ltrim": "LTRIM({0})",
          "regExpReplace": "REGEXP_REPLACE({0},{1})",
          "regExpSubstr": "REGEXP_SUBSTR({0},{1})",
          "replace": "REPLACE({0},{1},{2})",
          "rpad": "RPAD({0},{1},{2})",
          "rtrim": "RTRIM({0})",
          "substr": "SUBSTR({0},{1},{2})",
          "trim": "TRIM({0})",
          "upper": "UPPER({0})",
          "length": "LENGTH({0})"
        },
        "datetime": {
          "curtime": "SYSTIMESTAMP",
          "today": "TRUNC(SYSDATE)",
          "now": "SYSTIMESTAMP",
          "date": "CAST({0} AS DATE)",
          "datetime": "CAST({0} AS TIMESTAMP)",
          "time": "CAST({0} AS TIME)",
          "year": "EXTRACT(YEAR FROM {0})",
          "month": "EXTRACT(MONTH FROM {0})",
          "day": "DAY(DAY FROM {0})",
          "weekday": "TO_NUMBER(TO_CHAR({0}, 'D'))",
          "hours": "EXTRACT(HOUR FROM {0})",
          "minutes": "EXTRACT(MINUTE FROM {0})",
          "seconds": "EXTRACT(SECOND FROM {0})",
          "addYear": "{0} + interval '{1}' YEAR",
          "addMonth": "ADD_MONTHS({0},{1})",
          "addDay": "{0} + {1}",
          "addHours": "{0} + interval '{1}' HOUR",
          "addMinutes": "{0} + interval '{1}' MINUTE",
          "addSeconds": "{0} + interval '{1}' SECOND",
          "addTime": "ADDTIME({0},{1})",
          "dateDiff": "DATEDIFF({0},{1})",
          "timeDiff": "TIMEDIFF({0},{1})"
        },
        "convert": {
          "toString": "CAST({0} AS VARCHAR2)",
          "toJson": "json_value({0})",
          "toNumber": "CAST({0} AS NUMBER)"
        },
        "metadata": {
          "user": "USER",
          "source": "SYS_CONTEXT('USERENV','DB_NAME')"
        },
        "null": {
          "nvl": "NVL({0},{1})",
          "nvl2": "NVL2({0},{1},{2})",
          "isNull": "({0} IS NULL)",
          "isNotNull": "({0} IS NOT NULL)"
        },
        "multiple": {
          "concat": "{acumulated} || {value}"
        },
        "group": {
          "avg": "AVG({0})",
          "count": "COUNT({0})",
          "first": "FIRST({0})",
          "last": "LAST({0})",
          "max": "MAX({0})",
          "min": "MIN({0})",
          "sum": "SUM({0})"
        }
      }
    }
  },
  "sql": {
    "types": {
      "boolean": "BOOLEAN",
      "integer": "INTEGER",
      "decimal": "DECIMAL(10,4)",
      "string": "VARCHAR({0})",
      "datetime": "DATETIME",
      "date": "DATE",
      "time": "TIME"
    },
    "formats": {
      "datetime": "yyyy-LL-dd HH:mm:ss",
      "date": "yyyy-LL-dd",
      "time": "HH:mm:ss"
    },
    "ddl": {
      "createDatabase": "CREATE DATABASE IF NOT EXISTS {name}",
      "createTable": "CREATE TABLE {name} ({define})",
      "incrementalColumDefine": "{name} {type} {nullable} AUTO_INCREMENT",
      "columnDefine": "{name} {type} {nullable} ",
      "createPk": "CONSTRAINT {name} PRIMARY KEY ({columns})",
      "createUk": "CONSTRAINT {name} UNIQUE ({columns})",
      "createFk": "CONSTRAINT {name} FOREIGN KEY ({column}) REFERENCES {fTable} ({fColumn})",
      "createIndex": "CREATE INDEX {name} ON {table} ({columns})",
      "alterTable": "ALTER TABLE {name}",
      "addColumn": "ADD {columnDefine}",
      "addPk": "ADD CONSTRAINT {name} PRIMARY KEY ({columns})",
      "addUk": "ADD CONSTRAINT {name} UNIQUE ({columns})",
      "addFk": "ADD CONSTRAINT {name} FOREIGN KEY ({column}) REFERENCES {fTable} ({fColumn})",
      "alterColumn": "MODIFY {columnDefine}",
      "dropDatabase": "DROP DATABASE IF EXISTS {name}",
      "dropTable": "DROP TABLE {name}",
      "dropColumn": "DROP COLUMN {name}",
      "dropPk": "DROP PRIMARY KEY {name}",
      "dropUk": "DROP UNIQUE {name}",
      "dropFk": "DROP FOREIGN KEY {name}",
      "dropIndex": "DROP INDEX {name} ON {table}",
      "truncateTable": "TRUNCATE TABLE {name}"
    },
    "dml": {
      "map": "SELECT {0}",
      "first": "SELECT TOP 1 {0}",
      "filter": "WHERE {0}",
      "groupBy": "GROUP BY {0}",
      "having": "HAVING {0}",
      "sort": "ORDER BY {0}",
      "insert": "INSERT INTO {name}({fields}) VALUES({values})",
      "update": "UPDATE {name} {alias} SET {assings}",
      "delete": "DELETE FROM {name} {alias}",
      "bulkInsert": "INSERT INTO {name}({fields}) VALUES {values}"
    },
    "others": {
      "delimiterSpaces": "\"{name}\"",
      "sepatatorSql": ";",
      "notNullable": "NOT NULL",
      "variable": ":{name}",
      "field": "{entityAlias}.{name}",
      "column": "{name}",
      "from": "FROM {name} {alias} ",
      "join": "INNER JOIN {name} {alias} ON {relation}",
      "false": "FALSE",
      "true": "TRUE"
    },
    "operators": {
      "unary": {
        "-": "- {0}",
        "~": "~ {0}",
        "!": "NOT {0}"
      },
      "binary": {
        "+": "({0} + {1})",
        "-": "({0} - {1})",
        "*": "({0} * {1})",
        "/": "({0} / {1})",
        "**": "POWER({0},{1})",
        "//": "POWER({0},(1/{1}))",
        "%": "MOD({0},{1})",
        "&": "BITAND({0},{1})",
        "|": "BITOR({0},{1})",
        "^": "BITXOR({0},{1})",
        "<<": "{0} << {1}",
        ">>": "{0} >> {1}",
        "==": "{0} = {1}",
        "!=": "{0} <> {1}",
        ">": "{0} > {1}",
        "<": "{0} < {1}",
        ">=": "{0} >= {1}",
        "<=": "{0} <= {1}",
        "&&": "({0} AND {1})",
        "||": "({0} OR {1})",
        "[]": "N/A",
        "=": "{0} = {1}",
        "+=": "{0} = ({0} + {1})",
        "-=": "{0} = ({0} - {1})",
        "*=": "{0} = ({0} * {1})",
        "/=": "{0} = ({0} / {1})",
        "**=": "{0} = POWER({0},{1})",
        "//=": "{0} = POWER({0},(1/{1}))",
        "%=": "{0} = MOD({0},{1})",
        "&=": "{0} = BITAND({0},{1})",
        "|=": "{0} = BITOR({0},{1})",
        "^=": "{0} = BITXOR({0},{1})",
        "<<=": "{0} = {0} << {1}",
        ">>=": "{0} = {0} >> {1}"
      },
      "ternary": {
        "?": "IF {0} THEN {1} ELSE {2} END"
      }
    },
    "functions": {
      "general": {
        "as": "{value} AS {alias}",
        "desc": "{0} desc",
        "asc": "{0} asc",
        "between": "{0} BETWEEN {1} AND {2}",
        "includes": " {0} IN ({1})"
      },
      "numeric": {
        "abs": "ABS({0})",
        "acos": "ACOS({0})",
        "asin": "ASIN({0})",
        "atan": "ATAN({0})",
        "atan2": "ATAN2({0},{1})",
        "ceil": "CEIL({0})",
        "cos": "COS({0})",
        "cosh": "COSH({0})",
        "exp": "EXP({0})",
        "floor": "FLOOR({0})",
        "ln": "LN({0})",
        "log": "LOG({0},{1})",
        "remainder": "REMAINDER({0},{1})",
        "round": "ROUND({0},{1})",
        "sign": "SIGN({0})",
        "sin": "SIN({0})",
        "sinh": "SINH({0})",
        "tan": "TAN({0})",
        "tanh": "TANH({0})",
        "trunc": "TRUNC({0},{1})"
      },
      "string": {
        "chr": "CHR({0})",
        "initcap": "INITCAP({0})",
        "lower": "LOWER({0})",
        "lpad": "LPAD({0},{1},{2})",
        "ltrim": "LTRIM({0})",
        "regExpReplace": "REGEXP_REPLACE({0},{1})",
        "regExpSubstr": "REGEXP_SUBSTR({0},{1})",
        "replace": "REPLACE({0},{1},{2})",
        "rpad": "RPAD({0},{1},{2})",
        "rtrim": "RTRIM({0})",
        "substr": "SUBSTR({0},{1},{2})",
        "trim": "TRIM({0})",
        "upper": "UPPER({0})",
        "length": "LENGTH({0})"
      },
      "datetime": {
        "curtime": "SYSTIMESTAMP",
        "today": "TRUNC(SYSDATE)",
        "now": "SYSTIMESTAMP",
        "date": "CAST({0} AS DATE)",
        "datetime": "CAST({0} AS TIMESTAMP)",
        "time": "CAST({0} AS TIME)",
        "year": "EXTRACT(YEAR FROM {0})",
        "month": "EXTRACT(MONTH FROM {0})",
        "day": "DAY(DAY FROM {0})",
        "weekday": "TO_NUMBER(TO_CHAR({0}, 'D'))",
        "hours": "EXTRACT(HOUR FROM {0})",
        "minutes": "EXTRACT(MINUTE FROM {0})",
        "seconds": "EXTRACT(SECOND FROM {0})",
        "addYear": "{0} + interval '{1}' YEAR",
        "addMonth": "ADD_MONTHS({0},{1})",
        "addDay": "{0} + {1}",
        "addHours": "{0} + interval '{1}' HOUR",
        "addMinutes": "{0} + interval '{1}' MINUTE",
        "addSeconds": "{0} + interval '{1}' SECOND",
        "addTime": "ADDTIME({0},{1})",
        "dateDiff": "DATEDIFF({0},{1})",
        "timeDiff": "TIMEDIFF({0},{1})"
      },
      "convert": {
        "toString": "CAST({0} AS VARCHAR2)",
        "toJson": "json_value({0})",
        "toNumber": "CAST({0} AS NUMBER)"
      },
      "metadata": {
        "user": "USER",
        "source": "SYS_CONTEXT('USERENV','DB_NAME')"
      },
      "null": {
        "nvl": "NVL({0},{1})",
        "nvl2": "NVL2({0},{1},{2})",
        "isNull": "({0} IS NULL)",
        "isNotNull": "({0} IS NOT NULL)"
      },
      "multiple": {
        "concat": "{acumulated} || {value}"
      },
      "group": {
        "avg": "AVG({0})",
        "count": "COUNT({0})",
        "first": "FIRST({0})",
        "last": "LAST({0})",
        "max": "MAX({0})",
        "min": "MIN({0})",
        "sum": "SUM({0})"
      }
    }
  }
}