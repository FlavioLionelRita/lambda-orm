_extends: [SQL]
dbTypes:
  boolean: BIT
types:
  int: integer 
  tinyint: integer
  nvarchar: string
  ntext: string
  binary: buffer
  varbinary:  buffer
  image:  buffer
  datetime2: dateTime
  datetimeoffset: dateTime
  smalldatetime: dateTime
  bit: boolean
  uniqueidentifier: string
  sql_variant: any
  xml: string
  cursor: any
  table: any
support:
  pkTablespaces: false
  ukTablespaces: false     
ddl:
  createPk: "PRIMARY KEY ({columns})"
  incrementalColumDefine: "{name} {type} {required} IDENTITY (1, 1)"
  dropPk: "DROP CONSTRAINT {name}"
  dropUk: "DROP CONSTRAINT {name}"
  dropFk: "DROP CONSTRAINT {name}"
  dropIndex: "DROP INDEX {name} ON {table}"
  alterProperty: 'ALTER COLUMN {columnDefine}'
  alterPropertyType: '{name} {type}'
  alterPropertyNullable: '{name} NULL'
  alterPropertyNotNullable: '{name} NOT NULL'
  objects: |
    SELECT 'table' as [type], TABLE_NAME AS [name]
    FROM INFORMATION_SCHEMA.TABLES
    WHERE TABLE_TYPE = 'BASE TABLE'
    union all
    SELECT 'view' as [type], TABLE_NAME AS [name]
    FROM INFORMATION_SCHEMA.VIEWS  
  tables: |
    SELECT 
        t.name AS tableName,
        c.name AS columnName,
        TYPE_NAME(c.user_type_id) AS dbType,
        CASE WHEN c.is_nullable = 0 THEN 1 ELSE 0 END AS required,
        c.is_identity as isAutoIncremental,
        c.max_length AS [length],
        c.precision AS [precision],
        c.scale AS scale,
        c.collation_name AS collation    
    FROM sys.tables t
    JOIN sys.columns c ON t.object_id = c.object_id
    WHERE SCHEMA_NAME(t.schema_id) = SCHEMA_NAME()
      AND t.name IN ({names})
  views: |
    SELECT 
        v.name AS viewName,
        c.name AS columnName,
        TYPE_NAME(c.user_type_id) AS dbType,
        CASE WHEN c.is_nullable = 0 THEN 1 ELSE 0 END AS required,
        c.is_identity AS isAutoIncremental,
        c.max_length AS [length],
        c.precision AS [precision],
        c.scale AS scale,
        c.collation_name AS collation    
    FROM sys.views v
    JOIN sys.columns c ON v.object_id = c.object_id
    WHERE SCHEMA_NAME(v.schema_id) = SCHEMA_NAME()
      AND v.name IN ({names})
  primaryKeys: |
    SELECT
        tc.TABLE_NAME AS tableName,
        kcu.COLUMN_NAME AS columnName,
        tc.CONSTRAINT_NAME AS constraintName
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc
    JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu ON tc.CONSTRAINT_NAME = kcu.CONSTRAINT_NAME
    WHERE tc.CONSTRAINT_TYPE = 'PRIMARY KEY'
        AND tc.TABLE_CATALOG = DB_NAME()
        AND tc.TABLE_SCHEMA = SCHEMA_NAME()
        AND tc.TABLE_NAME IN ({tableNames})
  uniqueKeys: |
    SELECT
        tc.TABLE_NAME AS tableName,
        kcu.COLUMN_NAME AS columnName,
        tc.CONSTRAINT_NAME AS constraintName
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc
    JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu ON tc.CONSTRAINT_NAME = kcu.CONSTRAINT_NAME
    WHERE tc.CONSTRAINT_TYPE = 'UNIQUE'
        AND tc.TABLE_CATALOG = DB_NAME()
        AND tc.TABLE_SCHEMA = SCHEMA_NAME()
        AND tc.TABLE_NAME IN ({tableNames})
  foreignKeys: |
    SELECT
        tc.TABLE_NAME AS tableName,
        kcu.COLUMN_NAME AS columnName,
        ccu.TABLE_NAME AS refTableName,
        ccu.COLUMN_NAME AS refColumnName,
        tc.CONSTRAINT_NAME AS constraintName
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc
    JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu ON tc.CONSTRAINT_NAME = kcu.CONSTRAINT_NAME
    JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE ccu ON tc.CONSTRAINT_NAME = ccu.CONSTRAINT_NAME
    WHERE 
        tc.CONSTRAINT_TYPE = 'FOREIGN KEY'
        AND tc.TABLE_CATALOG = DB_NAME()
        AND tc.TABLE_SCHEMA = SCHEMA_NAME()
        AND tc.TABLE_NAME IN ({tableNames})
  indexes: |
   SELECT
        t.name AS tableName,
        i.name AS indexName,
        c.name AS columnName,
        CASE WHEN i.is_unique = 1 THEN 'true' ELSE 'false' END AS isUnique,
        CASE WHEN i.is_primary_key = 1 THEN 'true' ELSE 'false' END AS isPrimary
    FROM sys.tables t
    JOIN sys.indexes i ON t.object_id = i.object_id
    JOIN sys.index_columns ic ON i.object_id = ic.object_id AND i.index_id = ic.index_id
    JOIN sys.columns c ON ic.object_id = c.object_id AND ic.column_id = c.column_id
    WHERE t.type = 'U'
      AND t.name IN ({tableNames})
      AND i.is_unique = 0
      AND i.is_primary_key = 0
  sequences: |
    SELECT name AS sequenceName,
        start_value AS startValue,
        increment AS increment
    FROM sys.sequences
    WHERE object_id = OBJECT_ID('sequence_schema.sequence_name')
dml:
  insert: INSERT INTO {name}({fields}) OUTPUT INSERTED.{autoIncrementField} VALUES({values})
  insertConditional: |
    INSERT INTO {name} ({fields}) OUTPUT INSERTED.{autoIncrementField}
    SELECT {values}
    WHERE NOT EXISTS (SELECT 1 FROM {name} WHERE {condition})
  update: UPDATE {alias} SET {assigns} FROM {name} {alias}
  upsert: |
    MERGE INTO {name} AS target
    USING (VALUES {values}) AS source ({fields})
    ON {condition}
    WHEN MATCHED THEN
        UPDATE SET {assigns}
    WHEN NOT MATCHED THEN
        INSERT ({fields}) VALUES ({values})
        OUTPUT INSERTED.{autoIncrementField}
  bulkInsert: INSERT INTO {name}({fields})
  page: "{sentence} OFFSET {offset} ROWS FETCH NEXT {records} ROWS ONLY"
  callStoredProcedure: EXEC {name} {parameters};  
others:
  delimiter: "[{name}]"
  separatorSql: ' \nGO'
  variable: "@{name}"
  false: 0
  true: 1
functions:
  numeric:
    atan2: 'ATN2({0},{1})'
    ceil: 'CEILING({0})'
    trunc: 'ROUND({0},{1},1)'
    ln: 'LOG({0})'
    log: 'LOG({1},{0})' # en SqlServer la función LOG tiene los parámetros en diferente orden que en otros bases de datos
