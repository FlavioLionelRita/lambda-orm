{
  "name": "query",
  "context": {
    "id": 1,
    "minValue": 10,
    "fromDate": "1997-01-01",
    "toDate": "1997-12-31"
  },
  "cases": [
    {
      "name": "MySQL",
      "tests": [
        {
          "test": "Products.sort(p => p.name)",
          "result": []
        },
        {
          "test": "Products.map(p => p).sort(p => p.id).page(1, 1)",
          "result": []
        },
        {
          "test": "Products.sort(p => p.id).page(1, 1)",
          "result": []
        },
        {
          "test": "Products.filter(p => p.id === id).map(p => p).sort(p => p.id)",
          "result": []
        },
        {
          "test": "Products.filter(p => p.id === id).sort(p => p.id) ",
          "result": []
        },
        {
          "test": "Products.map(p => ({ category: p.category.name })).sort(p => p.category)",
          "result": []
        },
        {
          "test": "Products.map(p => ({ name: p.name, category: p.category.name })).sort(p => [p.category, p.name])",
          "result": []
        },
        {
          "test": "Products.map(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock })).sort(p => p.name)",
          "result": []
        },
        {
          "test": "Products.filter(p => p.discontinued !== false).map(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock })).sort(p => [p.category, desc(p.name)])",
          "result": []
        },
        {
          "test": "Orders.details.filter(p => between(p.order.shippedDate, fromDate, toDate) && p.unitPrice > minValue).map(p => ({ category: p.product.category.name, product: p.product.name, unitPrice: p.unitPrice, quantity: p.quantity }))",
          "result": []
        },
        {
          "test": "Orders.details.filter(p => between(p.order.shippedDate, fromDate, toDate) && p.unitPrice > minValue).map(p => ({ category: p.product.category.name, product: p.product.name, unitPrice: p.unitPrice, quantity: p.quantity })).sort(p => [p.category, p.product, p.unitPrice, p.quantity]) ",
          "result": []
        },
        {
          "test": "Products.first(p => p)",
          "result": []
        },
        {
          "test": "Products.last(p => p)",
          "result": []
        },
        {
          "test": "Products.first(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock }))",
          "result": []
        },
        {
          "test": "Products.filter(p => p.discontinued !== false).last(p => p.id)",
          "result": []
        },
        {
          "test": "Products.distinct(p => p).sort(p => p.id)",
          "result": []
        },
        {
          "test": "Products.distinct(p => ({ category: p.category.name })).sort(p => p.category)",
          "result": []
        },
        {
          "test": "Products.distinct(p => ({ quantity: p.quantity, category: p.category.name })).sort(p => [p.quantity, p.category])",
          "result": []
        }
      ],
      "errors": 0
    },
    {
      "name": "MariaDB",
      "tests": [
        {
          "test": "Products.sort(p => p.name)",
          "result": []
        },
        {
          "test": "Products.map(p => p).sort(p => p.id).page(1, 1)",
          "result": []
        },
        {
          "test": "Products.sort(p => p.id).page(1, 1)",
          "result": []
        },
        {
          "test": "Products.filter(p => p.id === id).map(p => p).sort(p => p.id)",
          "result": []
        },
        {
          "test": "Products.filter(p => p.id === id).sort(p => p.id) ",
          "result": []
        },
        {
          "test": "Products.map(p => ({ category: p.category.name })).sort(p => p.category)",
          "result": []
        },
        {
          "test": "Products.map(p => ({ name: p.name, category: p.category.name })).sort(p => [p.category, p.name])",
          "result": []
        },
        {
          "test": "Products.map(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock })).sort(p => p.name)",
          "result": []
        },
        {
          "test": "Products.filter(p => p.discontinued !== false).map(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock })).sort(p => [p.category, desc(p.name)])",
          "result": []
        },
        {
          "test": "Orders.details.filter(p => between(p.order.shippedDate, fromDate, toDate) && p.unitPrice > minValue).map(p => ({ category: p.product.category.name, product: p.product.name, unitPrice: p.unitPrice, quantity: p.quantity }))",
          "result": []
        },
        {
          "test": "Orders.details.filter(p => between(p.order.shippedDate, fromDate, toDate) && p.unitPrice > minValue).map(p => ({ category: p.product.category.name, product: p.product.name, unitPrice: p.unitPrice, quantity: p.quantity })).sort(p => [p.category, p.product, p.unitPrice, p.quantity]) ",
          "result": []
        },
        {
          "test": "Products.first(p => p)",
          "result": []
        },
        {
          "test": "Products.last(p => p)",
          "result": []
        },
        {
          "test": "Products.first(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock }))",
          "result": []
        },
        {
          "test": "Products.filter(p => p.discontinued !== false).last(p => p.id)",
          "result": []
        },
        {
          "test": "Products.distinct(p => p).sort(p => p.id)",
          "result": []
        },
        {
          "test": "Products.distinct(p => ({ category: p.category.name })).sort(p => p.category)",
          "result": []
        },
        {
          "test": "Products.distinct(p => ({ quantity: p.quantity, category: p.category.name })).sort(p => [p.quantity, p.category])",
          "result": []
        }
      ],
      "errors": 0
    },
    {
      "name": "PostgreSQL",
      "tests": [
        {
          "test": "Products.sort(p => p.name)",
          "result": []
        },
        {
          "test": "Products.map(p => p).sort(p => p.id).page(1, 1)",
          "result": []
        },
        {
          "test": "Products.sort(p => p.id).page(1, 1)",
          "result": []
        },
        {
          "test": "Products.filter(p => p.id === id).map(p => p).sort(p => p.id)",
          "result": []
        },
        {
          "test": "Products.filter(p => p.id === id).sort(p => p.id) ",
          "result": []
        },
        {
          "test": "Products.map(p => ({ category: p.category.name })).sort(p => p.category)",
          "result": []
        },
        {
          "test": "Products.map(p => ({ name: p.name, category: p.category.name })).sort(p => [p.category, p.name])",
          "result": []
        },
        {
          "test": "Products.map(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock })).sort(p => p.name)",
          "result": []
        },
        {
          "test": "Products.filter(p => p.discontinued !== false).map(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock })).sort(p => [p.category, desc(p.name)])",
          "result": []
        },
        {
          "test": "Orders.details.filter(p => between(p.order.shippedDate, fromDate, toDate) && p.unitPrice > minValue).map(p => ({ category: p.product.category.name, product: p.product.name, unitPrice: p.unitPrice, quantity: p.quantity }))",
          "result": []
        },
        {
          "test": "Orders.details.filter(p => between(p.order.shippedDate, fromDate, toDate) && p.unitPrice > minValue).map(p => ({ category: p.product.category.name, product: p.product.name, unitPrice: p.unitPrice, quantity: p.quantity })).sort(p => [p.category, p.product, p.unitPrice, p.quantity]) ",
          "result": []
        },
        {
          "test": "Products.first(p => p)",
          "result": []
        },
        {
          "test": "Products.last(p => p)",
          "result": []
        },
        {
          "test": "Products.first(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock }))",
          "result": []
        },
        {
          "test": "Products.filter(p => p.discontinued !== false).last(p => p.id)",
          "result": []
        },
        {
          "test": "Products.distinct(p => p).sort(p => p.id)",
          "result": []
        },
        {
          "test": "Products.distinct(p => ({ category: p.category.name })).sort(p => p.category)",
          "result": []
        },
        {
          "test": "Products.distinct(p => ({ quantity: p.quantity, category: p.category.name })).sort(p => [p.quantity, p.category])",
          "result": []
        }
      ],
      "errors": 0
    },
    {
      "name": "SqlServer",
      "tests": [
        {
          "test": "Products.sort(p => p.name)",
          "result": []
        },
        {
          "test": "Products.map(p => p).sort(p => p.id).page(1, 1)",
          "result": []
        },
        {
          "test": "Products.sort(p => p.id).page(1, 1)",
          "result": []
        },
        {
          "test": "Products.filter(p => p.id === id).map(p => p).sort(p => p.id)",
          "result": []
        },
        {
          "test": "Products.filter(p => p.id === id).sort(p => p.id) ",
          "result": []
        },
        {
          "test": "Products.map(p => ({ category: p.category.name })).sort(p => p.category)",
          "result": []
        },
        {
          "test": "Products.map(p => ({ name: p.name, category: p.category.name })).sort(p => [p.category, p.name])",
          "result": []
        },
        {
          "test": "Products.map(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock })).sort(p => p.name)",
          "result": []
        },
        {
          "test": "Products.filter(p => p.discontinued !== false).map(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock })).sort(p => [p.category, desc(p.name)])",
          "result": []
        },
        {
          "test": "Orders.details.filter(p => between(p.order.shippedDate, fromDate, toDate) && p.unitPrice > minValue).map(p => ({ category: p.product.category.name, product: p.product.name, unitPrice: p.unitPrice, quantity: p.quantity }))",
          "result": []
        },
        {
          "test": "Orders.details.filter(p => between(p.order.shippedDate, fromDate, toDate) && p.unitPrice > minValue).map(p => ({ category: p.product.category.name, product: p.product.name, unitPrice: p.unitPrice, quantity: p.quantity })).sort(p => [p.category, p.product, p.unitPrice, p.quantity]) ",
          "result": []
        },
        {
          "test": "Products.first(p => p)",
          "result": []
        },
        {
          "test": "Products.last(p => p)",
          "result": []
        },
        {
          "test": "Products.first(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock }))",
          "result": []
        },
        {
          "test": "Products.filter(p => p.discontinued !== false).last(p => p.id)",
          "result": []
        },
        {
          "test": "Products.distinct(p => p).sort(p => p.id)",
          "result": []
        },
        {
          "test": "Products.distinct(p => ({ category: p.category.name })).sort(p => p.category)",
          "result": []
        },
        {
          "test": "Products.distinct(p => ({ quantity: p.quantity, category: p.category.name })).sort(p => [p.quantity, p.category])",
          "result": []
        }
      ],
      "errors": 0
    },
    {
      "name": "Oracle",
      "tests": [
        {
          "test": "Products.sort(p => p.name)",
          "result": []
        },
        {
          "test": "Products.map(p => p).sort(p => p.id).page(1, 1)",
          "result": []
        },
        {
          "test": "Products.sort(p => p.id).page(1, 1)",
          "result": []
        },
        {
          "test": "Products.filter(p => p.id === id).map(p => p).sort(p => p.id)",
          "result": []
        },
        {
          "test": "Products.filter(p => p.id === id).sort(p => p.id) ",
          "result": []
        },
        {
          "test": "Products.map(p => ({ category: p.category.name })).sort(p => p.category)",
          "result": []
        },
        {
          "test": "Products.map(p => ({ name: p.name, category: p.category.name })).sort(p => [p.category, p.name])",
          "result": []
        },
        {
          "test": "Products.map(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock })).sort(p => p.name)",
          "result": []
        },
        {
          "test": "Products.filter(p => p.discontinued !== false).map(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock })).sort(p => [p.category, desc(p.name)])",
          "result": []
        },
        {
          "test": "Orders.details.filter(p => between(p.order.shippedDate, fromDate, toDate) && p.unitPrice > minValue).map(p => ({ category: p.product.category.name, product: p.product.name, unitPrice: p.unitPrice, quantity: p.quantity }))",
          "result": []
        },
        {
          "test": "Orders.details.filter(p => between(p.order.shippedDate, fromDate, toDate) && p.unitPrice > minValue).map(p => ({ category: p.product.category.name, product: p.product.name, unitPrice: p.unitPrice, quantity: p.quantity })).sort(p => [p.category, p.product, p.unitPrice, p.quantity]) ",
          "result": []
        },
        {
          "test": "Products.first(p => p)",
          "result": []
        },
        {
          "test": "Products.last(p => p)",
          "result": []
        },
        {
          "test": "Products.first(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock }))",
          "result": []
        },
        {
          "test": "Products.filter(p => p.discontinued !== false).last(p => p.id)",
          "result": []
        },
        {
          "test": "Products.distinct(p => p).sort(p => p.id)",
          "result": []
        },
        {
          "test": "Products.distinct(p => ({ category: p.category.name })).sort(p => p.category)",
          "result": []
        },
        {
          "test": "Products.distinct(p => ({ quantity: p.quantity, category: p.category.name })).sort(p => [p.quantity, p.category])",
          "result": []
        }
      ],
      "errors": 0
    },
    {
      "name": "MongoDB",
      "tests": [
        {
          "test": "Products.sort(p => p.name)",
          "result": []
        },
        {
          "test": "Products.map(p => p).sort(p => p.id).page(1, 1)",
          "result": []
        },
        {
          "test": "Products.sort(p => p.id).page(1, 1)",
          "result": []
        },
        {
          "test": "Products.filter(p => p.id === id).map(p => p).sort(p => p.id)",
          "result": []
        },
        {
          "test": "Products.filter(p => p.id === id).sort(p => p.id) ",
          "result": []
        },
        {
          "test": "Products.map(p => ({ category: p.category.name })).sort(p => p.category)",
          "result": []
        },
        {
          "test": "Products.map(p => ({ name: p.name, category: p.category.name })).sort(p => [p.category, p.name])",
          "result": []
        },
        {
          "test": "Products.map(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock })).sort(p => p.name)",
          "result": []
        },
        {
          "test": "Products.filter(p => p.discontinued !== false).map(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock })).sort(p => [p.category, desc(p.name)])",
          "result": []
        },
        {
          "test": "Orders.details.filter(p => between(p.order.shippedDate, fromDate, toDate) && p.unitPrice > minValue).map(p => ({ category: p.product.category.name, product: p.product.name, unitPrice: p.unitPrice, quantity: p.quantity }))",
          "result": []
        },
        {
          "test": "Orders.details.filter(p => between(p.order.shippedDate, fromDate, toDate) && p.unitPrice > minValue).map(p => ({ category: p.product.category.name, product: p.product.name, unitPrice: p.unitPrice, quantity: p.quantity })).sort(p => [p.category, p.product, p.unitPrice, p.quantity]) ",
          "result": []
        },
        {
          "test": "Products.first(p => p)",
          "result": []
        },
        {
          "test": "Products.last(p => p)",
          "result": []
        },
        {
          "test": "Products.first(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock }))",
          "result": []
        },
        {
          "test": "Products.filter(p => p.discontinued !== false).last(p => p.id)",
          "result": []
        },
        {
          "test": "Products.distinct(p => p).sort(p => p.id)",
          "result": []
        },
        {
          "test": "Products.distinct(p => ({ category: p.category.name })).sort(p => p.category)",
          "result": []
        },
        {
          "test": "Products.distinct(p => ({ quantity: p.quantity, category: p.category.name })).sort(p => [p.quantity, p.category])",
          "result": []
        }
      ],
      "errors": 0
    }
  ],
  "errors": 0
}