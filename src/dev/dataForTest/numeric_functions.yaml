name: numeric functions
data:
  a:
    id: 1
test:
  - name: function abs
    data: a
    sentences:
      - stage: MySQL
        sentence:
          entity: Products
          dialect: MySQL
          dataSource: MySQL
          sentence: >-
            SELECT p.ProductName AS name, (p.UnitPrice * -1) AS source,
            ROUND(ABS((p.UnitPrice * -1)),10) AS result FROM Products p  WHERE
            p.ProductID = ? 
          children: []
      - stage: MariaDB
        sentence:
          entity: Products
          dialect: MariaDB
          dataSource: MariaDB
          sentence: >-
            SELECT p.ProductName AS name, (p.UnitPrice * -1) AS source,
            ROUND(ABS((p.UnitPrice * -1)),10) AS result FROM Products p  WHERE
            p.ProductID = ? 
          children: []
      - stage: PostgreSQL
        sentence:
          entity: Products
          dialect: PostgreSQL
          dataSource: PostgreSQL
          sentence: >-
            SELECT p.ProductName AS "name", (p.UnitPrice * -1) AS "source",
            ROUND(CAST(ABS((p.UnitPrice * -1)) AS DECIMAL),10) AS "result" FROM
            Products p  WHERE p.ProductID = $1 
          children: []
      - stage: SqlServer
        sentence:
          entity: Products
          dialect: SqlServer
          dataSource: SqlServer
          sentence: >-
            SELECT p.ProductName AS name, (p.UnitPrice * -1) AS source,
            ROUND(ABS((p.UnitPrice * -1)),10) AS result FROM Products p  WHERE
            p.ProductID = @id 
          children: []
      - stage: Oracle
        sentence:
          entity: Products
          dialect: Oracle
          dataSource: Oracle
          sentence: >-
            SELECT p.ProductName AS "name", (p.UnitPrice * -1) AS "source",
            ROUND(ABS((p.UnitPrice * -1)),10) AS "result" FROM Products p  WHERE
            p.ProductID = :id 
          children: []
      - stage: MongoDB
        sentence:
          entity: Products
          dialect: MongoDB
          dataSource: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":{ "$multiply" :["$UnitPrice",-1] },
            "result":{ "$round" :[{ "$abs" :{ "$multiply" :["$UnitPrice",-1] }
            },10] } }} ]
          children: []
    errors: 0
    expression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:(p.price*-1),result:round(abs((p.price*-1)),10)})
    normalizeExpression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:(p.price*-1),result:round(abs((p.price*-1)),10)})
    model:
      - name: name
        type: string
      - name: source
        type: any
      - name: result
        type: any
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      name: select
      classtype: Sentence
      children:
        - name: filter
          classtype: Filter
          children:
            - name: '==='
              classtype: Operator
              children:
                - name: id
                  classtype: Field
                  children: []
                  type: integer
                  entity: Products
                  alias: p
                  isRoot: true
                - name: id
                  classtype: Variable
                  children: []
                  type: integer
                  number: 1
              type: any
          type: any
        - name: Products
          classtype: From
          children: []
          type: any
          alias: p
        - name: map
          classtype: Map
          children:
            - name: obj
              classtype: Obj
              children:
                - name: name
                  classtype: KeyValue
                  children:
                    - name: name
                      classtype: Field
                      children: []
                      type: string
                      entity: Products
                      alias: p
                      isRoot: true
                  type: any
                - name: source
                  classtype: KeyValue
                  children:
                    - name: '*'
                      classtype: Operator
                      children:
                        - name: price
                          classtype: Field
                          children: []
                          type: decimal
                          entity: Products
                          alias: p
                          isRoot: true
                        - name: -1
                          classtype: Constant2
                          children: []
                          type: number
                      type: any
                  type: any
                - name: result
                  classtype: KeyValue
                  children:
                    - name: round
                      classtype: FunctionRef
                      children:
                        - name: abs
                          classtype: FunctionRef
                          children:
                            - name: '*'
                              classtype: Operator
                              children:
                                - name: price
                                  classtype: Field
                                  children: []
                                  type: decimal
                                  entity: Products
                                  alias: p
                                  isRoot: true
                                - name: -1
                                  classtype: Constant2
                                  children: []
                                  type: number
                              type: any
                          type: any
                        - name: 10
                          classtype: Constant2
                          children: []
                          type: number
                      type: any
                  type: any
              type: object
          type: any
      type: any
      columns:
        - name: name
          type: string
        - name: source
          type: any
        - name: result
          type: any
      parameters:
        - name: id
          type: integer
      entity: Products
      constraints: []
    executions:
      - stage: MySQL
      - stage: MariaDB
      - stage: PostgreSQL
      - stage: SqlServer
      - stage: Oracle
      - stage: MongoDB
    result:
      - name: Chai
        source: -18
        result: 18
  - name: function acos
    data: a
    sentences:
      - stage: MySQL
        sentence:
          entity: Products
          dialect: MySQL
          dataSource: MySQL
          sentence: >-
            SELECT p.ProductName AS name, 0.25 AS source, ROUND(ACOS(0.25),10)
            AS result FROM Products p  WHERE p.ProductID = ? 
          children: []
      - stage: MariaDB
        sentence:
          entity: Products
          dialect: MariaDB
          dataSource: MariaDB
          sentence: >-
            SELECT p.ProductName AS name, 0.25 AS source, ROUND(ACOS(0.25),10)
            AS result FROM Products p  WHERE p.ProductID = ? 
          children: []
      - stage: PostgreSQL
        sentence:
          entity: Products
          dialect: PostgreSQL
          dataSource: PostgreSQL
          sentence: >-
            SELECT p.ProductName AS "name", 0.25 AS "source",
            ROUND(CAST(ACOS(0.25) AS DECIMAL),10) AS "result" FROM Products p 
            WHERE p.ProductID = $1 
          children: []
      - stage: SqlServer
        sentence:
          entity: Products
          dialect: SqlServer
          dataSource: SqlServer
          sentence: >-
            SELECT p.ProductName AS name, 0.25 AS source, ROUND(ACOS(0.25),10)
            AS result FROM Products p  WHERE p.ProductID = @id 
          children: []
      - stage: Oracle
        sentence:
          entity: Products
          dialect: Oracle
          dataSource: Oracle
          sentence: >-
            SELECT p.ProductName AS "name", 0.25 AS "source",
            ROUND(ACOS(0.25),10) AS "result" FROM Products p  WHERE p.ProductID
            = :id 
          children: []
      - stage: MongoDB
        sentence:
          entity: Products
          dialect: MongoDB
          dataSource: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":0.25, "result":{ "$round" :[{
            "$acos" :0.25 },10] } }} ]
          children: []
    errors: 1
    expression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:0.25,result:round(acos(0.25),10)})
    normalizeExpression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:0.25,result:round(acos(0.25),10)})
    model:
      - name: name
        type: string
      - name: source
        type: number
      - name: result
        type: any
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      name: select
      classtype: Sentence
      children:
        - name: filter
          classtype: Filter
          children:
            - name: '==='
              classtype: Operator
              children:
                - name: id
                  classtype: Field
                  children: []
                  type: integer
                  entity: Products
                  alias: p
                  isRoot: true
                - name: id
                  classtype: Variable
                  children: []
                  type: integer
                  number: 1
              type: any
          type: any
        - name: Products
          classtype: From
          children: []
          type: any
          alias: p
        - name: map
          classtype: Map
          children:
            - name: obj
              classtype: Obj
              children:
                - name: name
                  classtype: KeyValue
                  children:
                    - name: name
                      classtype: Field
                      children: []
                      type: string
                      entity: Products
                      alias: p
                      isRoot: true
                  type: any
                - name: source
                  classtype: KeyValue
                  children:
                    - name: 0.25
                      classtype: Constant2
                      children: []
                      type: number
                  type: any
                - name: result
                  classtype: KeyValue
                  children:
                    - name: round
                      classtype: FunctionRef
                      children:
                        - name: acos
                          classtype: FunctionRef
                          children:
                            - name: 0.25
                              classtype: Constant2
                              children: []
                              type: number
                          type: any
                        - name: 10
                          classtype: Constant2
                          children: []
                          type: number
                      type: any
                  type: any
              type: object
          type: any
      type: any
      columns:
        - name: name
          type: string
        - name: source
          type: number
        - name: result
          type: any
      parameters:
        - name: id
          type: integer
      entity: Products
      constraints: []
    executions:
      - stage: MySQL
      - stage: MariaDB
      - stage: PostgreSQL
      - stage: SqlServer
      - stage: Oracle
      - stage: MongoDB
        error: not equal MySQL
        result:
          - name: Chai
            result: 1.3181160717
    result:
      - name: Chai
        source: 0.25
        result: 1.3181160717
  - name: function asin
    data: a
    sentences:
      - stage: MySQL
        sentence:
          entity: Products
          dialect: MySQL
          dataSource: MySQL
          sentence: >-
            SELECT p.ProductName AS name, 0.25 AS source, ROUND(ASIN(0.25),10)
            AS result FROM Products p  WHERE p.ProductID = ? 
          children: []
      - stage: MariaDB
        sentence:
          entity: Products
          dialect: MariaDB
          dataSource: MariaDB
          sentence: >-
            SELECT p.ProductName AS name, 0.25 AS source, ROUND(ASIN(0.25),10)
            AS result FROM Products p  WHERE p.ProductID = ? 
          children: []
      - stage: PostgreSQL
        sentence:
          entity: Products
          dialect: PostgreSQL
          dataSource: PostgreSQL
          sentence: >-
            SELECT p.ProductName AS "name", 0.25 AS "source",
            ROUND(CAST(ASIN(0.25) AS DECIMAL),10) AS "result" FROM Products p 
            WHERE p.ProductID = $1 
          children: []
      - stage: SqlServer
        sentence:
          entity: Products
          dialect: SqlServer
          dataSource: SqlServer
          sentence: >-
            SELECT p.ProductName AS name, 0.25 AS source, ROUND(ASIN(0.25),10)
            AS result FROM Products p  WHERE p.ProductID = @id 
          children: []
      - stage: Oracle
        sentence:
          entity: Products
          dialect: Oracle
          dataSource: Oracle
          sentence: >-
            SELECT p.ProductName AS "name", 0.25 AS "source",
            ROUND(ASIN(0.25),10) AS "result" FROM Products p  WHERE p.ProductID
            = :id 
          children: []
      - stage: MongoDB
        sentence:
          entity: Products
          dialect: MongoDB
          dataSource: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":0.25, "result":{ "$round" :[{
            "$asin" :0.25 },10] } }} ]
          children: []
    errors: 1
    expression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:0.25,result:round(asin(0.25),10)})
    normalizeExpression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:0.25,result:round(asin(0.25),10)})
    model:
      - name: name
        type: string
      - name: source
        type: number
      - name: result
        type: any
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      name: select
      classtype: Sentence
      children:
        - name: filter
          classtype: Filter
          children:
            - name: '==='
              classtype: Operator
              children:
                - name: id
                  classtype: Field
                  children: []
                  type: integer
                  entity: Products
                  alias: p
                  isRoot: true
                - name: id
                  classtype: Variable
                  children: []
                  type: integer
                  number: 1
              type: any
          type: any
        - name: Products
          classtype: From
          children: []
          type: any
          alias: p
        - name: map
          classtype: Map
          children:
            - name: obj
              classtype: Obj
              children:
                - name: name
                  classtype: KeyValue
                  children:
                    - name: name
                      classtype: Field
                      children: []
                      type: string
                      entity: Products
                      alias: p
                      isRoot: true
                  type: any
                - name: source
                  classtype: KeyValue
                  children:
                    - name: 0.25
                      classtype: Constant2
                      children: []
                      type: number
                  type: any
                - name: result
                  classtype: KeyValue
                  children:
                    - name: round
                      classtype: FunctionRef
                      children:
                        - name: asin
                          classtype: FunctionRef
                          children:
                            - name: 0.25
                              classtype: Constant2
                              children: []
                              type: number
                          type: any
                        - name: 10
                          classtype: Constant2
                          children: []
                          type: number
                      type: any
                  type: any
              type: object
          type: any
      type: any
      columns:
        - name: name
          type: string
        - name: source
          type: number
        - name: result
          type: any
      parameters:
        - name: id
          type: integer
      entity: Products
      constraints: []
    executions:
      - stage: MySQL
      - stage: MariaDB
      - stage: PostgreSQL
      - stage: SqlServer
      - stage: Oracle
      - stage: MongoDB
        error: not equal MySQL
        result:
          - name: Chai
            result: 0.2526802551
    result:
      - name: Chai
        source: 0.25
        result: 0.2526802551
  - name: function atan
    data: a
    sentences:
      - stage: MySQL
        sentence:
          entity: Products
          dialect: MySQL
          dataSource: MySQL
          sentence: >-
            SELECT p.ProductName AS name, 0.25 AS source, ROUND(ATAN(0.25),10)
            AS result FROM Products p  WHERE p.ProductID = ? 
          children: []
      - stage: MariaDB
        sentence:
          entity: Products
          dialect: MariaDB
          dataSource: MariaDB
          sentence: >-
            SELECT p.ProductName AS name, 0.25 AS source, ROUND(ATAN(0.25),10)
            AS result FROM Products p  WHERE p.ProductID = ? 
          children: []
      - stage: PostgreSQL
        sentence:
          entity: Products
          dialect: PostgreSQL
          dataSource: PostgreSQL
          sentence: >-
            SELECT p.ProductName AS "name", 0.25 AS "source",
            ROUND(CAST(ATAN(0.25) AS DECIMAL),10) AS "result" FROM Products p 
            WHERE p.ProductID = $1 
          children: []
      - stage: SqlServer
        sentence:
          entity: Products
          dialect: SqlServer
          dataSource: SqlServer
          sentence: >-
            SELECT p.ProductName AS name, 0.25 AS source, ROUND(ATAN(0.25),10)
            AS result FROM Products p  WHERE p.ProductID = @id 
          children: []
      - stage: Oracle
        sentence:
          entity: Products
          dialect: Oracle
          dataSource: Oracle
          sentence: >-
            SELECT p.ProductName AS "name", 0.25 AS "source",
            ROUND(ATAN(0.25),10) AS "result" FROM Products p  WHERE p.ProductID
            = :id 
          children: []
      - stage: MongoDB
        sentence:
          entity: Products
          dialect: MongoDB
          dataSource: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":0.25, "result":{ "$round" :[{
            "$atan" :0.25 },10] } }} ]
          children: []
    errors: 1
    expression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:0.25,result:round(atan(0.25),10)})
    normalizeExpression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:0.25,result:round(atan(0.25),10)})
    model:
      - name: name
        type: string
      - name: source
        type: number
      - name: result
        type: any
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      name: select
      classtype: Sentence
      children:
        - name: filter
          classtype: Filter
          children:
            - name: '==='
              classtype: Operator
              children:
                - name: id
                  classtype: Field
                  children: []
                  type: integer
                  entity: Products
                  alias: p
                  isRoot: true
                - name: id
                  classtype: Variable
                  children: []
                  type: integer
                  number: 1
              type: any
          type: any
        - name: Products
          classtype: From
          children: []
          type: any
          alias: p
        - name: map
          classtype: Map
          children:
            - name: obj
              classtype: Obj
              children:
                - name: name
                  classtype: KeyValue
                  children:
                    - name: name
                      classtype: Field
                      children: []
                      type: string
                      entity: Products
                      alias: p
                      isRoot: true
                  type: any
                - name: source
                  classtype: KeyValue
                  children:
                    - name: 0.25
                      classtype: Constant2
                      children: []
                      type: number
                  type: any
                - name: result
                  classtype: KeyValue
                  children:
                    - name: round
                      classtype: FunctionRef
                      children:
                        - name: atan
                          classtype: FunctionRef
                          children:
                            - name: 0.25
                              classtype: Constant2
                              children: []
                              type: number
                          type: any
                        - name: 10
                          classtype: Constant2
                          children: []
                          type: number
                      type: any
                  type: any
              type: object
          type: any
      type: any
      columns:
        - name: name
          type: string
        - name: source
          type: number
        - name: result
          type: any
      parameters:
        - name: id
          type: integer
      entity: Products
      constraints: []
    executions:
      - stage: MySQL
      - stage: MariaDB
      - stage: PostgreSQL
      - stage: SqlServer
      - stage: Oracle
      - stage: MongoDB
        error: not equal MySQL
        result:
          - name: Chai
            result: 0.2449786631
    result:
      - name: Chai
        source: 0.25
        result: 0.2449786631
  - name: function atan2
    data: a
    sentences:
      - stage: MySQL
        sentence:
          entity: Products
          dialect: MySQL
          dataSource: MySQL
          sentence: >-
            SELECT p.ProductName AS name, 0.5 AS source, ROUND(ATAN(0.25,1),10)
            AS result FROM Products p  WHERE p.ProductID = ? 
          children: []
      - stage: MariaDB
        sentence:
          entity: Products
          dialect: MariaDB
          dataSource: MariaDB
          sentence: >-
            SELECT p.ProductName AS name, 0.5 AS source, ROUND(ATAN(0.25,1),10)
            AS result FROM Products p  WHERE p.ProductID = ? 
          children: []
      - stage: PostgreSQL
        sentence:
          entity: Products
          dialect: PostgreSQL
          dataSource: PostgreSQL
          sentence: >-
            SELECT p.ProductName AS "name", 0.5 AS "source",
            ROUND(CAST(ATAN2(0.25,1) AS DECIMAL),10) AS "result" FROM Products
            p  WHERE p.ProductID = $1 
          children: []
      - stage: SqlServer
        sentence:
          entity: Products
          dialect: SqlServer
          dataSource: SqlServer
          sentence: >-
            SELECT p.ProductName AS name, 0.5 AS source, ROUND(ATN2(0.25,1),10)
            AS result FROM Products p  WHERE p.ProductID = @id 
          children: []
      - stage: Oracle
        sentence:
          entity: Products
          dialect: Oracle
          dataSource: Oracle
          sentence: >-
            SELECT p.ProductName AS "name", 0.5 AS "source",
            ROUND(ATAN2(0.25,1),10) AS "result" FROM Products p  WHERE
            p.ProductID = :id 
          children: []
      - stage: MongoDB
        sentence:
          entity: Products
          dialect: MongoDB
          dataSource: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":0.5, "result":{ "$round" :[{
            "$atan2":[0.25,1] },10] } }} ]
          children: []
    errors: 1
    expression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:0.5,result:round(atan2(0.25,1),10)})
    normalizeExpression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:0.5,result:round(atan2(0.25,1),10)})
    model:
      - name: name
        type: string
      - name: source
        type: number
      - name: result
        type: any
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      name: select
      classtype: Sentence
      children:
        - name: filter
          classtype: Filter
          children:
            - name: '==='
              classtype: Operator
              children:
                - name: id
                  classtype: Field
                  children: []
                  type: integer
                  entity: Products
                  alias: p
                  isRoot: true
                - name: id
                  classtype: Variable
                  children: []
                  type: integer
                  number: 1
              type: any
          type: any
        - name: Products
          classtype: From
          children: []
          type: any
          alias: p
        - name: map
          classtype: Map
          children:
            - name: obj
              classtype: Obj
              children:
                - name: name
                  classtype: KeyValue
                  children:
                    - name: name
                      classtype: Field
                      children: []
                      type: string
                      entity: Products
                      alias: p
                      isRoot: true
                  type: any
                - name: source
                  classtype: KeyValue
                  children:
                    - name: 0.5
                      classtype: Constant2
                      children: []
                      type: number
                  type: any
                - name: result
                  classtype: KeyValue
                  children:
                    - name: round
                      classtype: FunctionRef
                      children:
                        - name: atan2
                          classtype: FunctionRef
                          children:
                            - name: 0.25
                              classtype: Constant2
                              children: []
                              type: number
                            - name: 1
                              classtype: Constant2
                              children: []
                              type: number
                          type: any
                        - name: 10
                          classtype: Constant2
                          children: []
                          type: number
                      type: any
                  type: any
              type: object
          type: any
      type: any
      columns:
        - name: name
          type: string
        - name: source
          type: number
        - name: result
          type: any
      parameters:
        - name: id
          type: integer
      entity: Products
      constraints: []
    executions:
      - stage: MySQL
      - stage: MariaDB
      - stage: PostgreSQL
      - stage: SqlServer
      - stage: Oracle
      - stage: MongoDB
        error: not equal MySQL
        result:
          - name: Chai
            result: 0.2449786631
    result:
      - name: Chai
        source: 0.5
        result: 0.2449786631
  - name: function ceil
    data: a
    sentences:
      - stage: MySQL
        sentence:
          entity: Products
          dialect: MySQL
          dataSource: MySQL
          sentence: >-
            SELECT p.ProductName AS name, 25.75 AS source, ROUND(CEIL(25.75),10)
            AS result FROM Products p  WHERE p.ProductID = ? 
          children: []
      - stage: MariaDB
        sentence:
          entity: Products
          dialect: MariaDB
          dataSource: MariaDB
          sentence: >-
            SELECT p.ProductName AS name, 25.75 AS source, ROUND(CEIL(25.75),10)
            AS result FROM Products p  WHERE p.ProductID = ? 
          children: []
      - stage: PostgreSQL
        sentence:
          entity: Products
          dialect: PostgreSQL
          dataSource: PostgreSQL
          sentence: >-
            SELECT p.ProductName AS "name", 25.75 AS "source",
            ROUND(CAST(CEIL(25.75) AS DECIMAL),10) AS "result" FROM Products p 
            WHERE p.ProductID = $1 
          children: []
      - stage: SqlServer
        sentence:
          entity: Products
          dialect: SqlServer
          dataSource: SqlServer
          sentence: >-
            SELECT p.ProductName AS name, 25.75 AS source,
            ROUND(CEILING(25.75),10) AS result FROM Products p  WHERE
            p.ProductID = @id 
          children: []
      - stage: Oracle
        sentence:
          entity: Products
          dialect: Oracle
          dataSource: Oracle
          sentence: >-
            SELECT p.ProductName AS "name", 25.75 AS "source",
            ROUND(CEIL(25.75),10) AS "result" FROM Products p  WHERE p.ProductID
            = :id 
          children: []
      - stage: MongoDB
        sentence:
          entity: Products
          dialect: MongoDB
          dataSource: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":25.75, "result":{ "$round" :[{
            "$ceil" :25.75 },10] } }} ]
          children: []
    errors: 1
    expression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:25.75,result:round(ceil(25.75),10)})
    normalizeExpression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:25.75,result:round(ceil(25.75),10)})
    model:
      - name: name
        type: string
      - name: source
        type: number
      - name: result
        type: any
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      name: select
      classtype: Sentence
      children:
        - name: filter
          classtype: Filter
          children:
            - name: '==='
              classtype: Operator
              children:
                - name: id
                  classtype: Field
                  children: []
                  type: integer
                  entity: Products
                  alias: p
                  isRoot: true
                - name: id
                  classtype: Variable
                  children: []
                  type: integer
                  number: 1
              type: any
          type: any
        - name: Products
          classtype: From
          children: []
          type: any
          alias: p
        - name: map
          classtype: Map
          children:
            - name: obj
              classtype: Obj
              children:
                - name: name
                  classtype: KeyValue
                  children:
                    - name: name
                      classtype: Field
                      children: []
                      type: string
                      entity: Products
                      alias: p
                      isRoot: true
                  type: any
                - name: source
                  classtype: KeyValue
                  children:
                    - name: 25.75
                      classtype: Constant2
                      children: []
                      type: number
                  type: any
                - name: result
                  classtype: KeyValue
                  children:
                    - name: round
                      classtype: FunctionRef
                      children:
                        - name: ceil
                          classtype: FunctionRef
                          children:
                            - name: 25.75
                              classtype: Constant2
                              children: []
                              type: number
                          type: any
                        - name: 10
                          classtype: Constant2
                          children: []
                          type: number
                      type: any
                  type: any
              type: object
          type: any
      type: any
      columns:
        - name: name
          type: string
        - name: source
          type: number
        - name: result
          type: any
      parameters:
        - name: id
          type: integer
      entity: Products
      constraints: []
    executions:
      - stage: MySQL
      - stage: MariaDB
      - stage: PostgreSQL
      - stage: SqlServer
      - stage: Oracle
      - stage: MongoDB
        error: not equal MySQL
        result:
          - name: Chai
            result: 26
    result:
      - name: Chai
        source: 25.75
        result: 26
  - name: function cos
    data: a
    sentences:
      - stage: MySQL
        sentence:
          entity: Products
          dialect: MySQL
          dataSource: MySQL
          sentence: >-
            SELECT p.ProductName AS name, 2 AS source, ROUND(COS(2),10) AS
            result FROM Products p  WHERE p.ProductID = ? 
          children: []
      - stage: MariaDB
        sentence:
          entity: Products
          dialect: MariaDB
          dataSource: MariaDB
          sentence: >-
            SELECT p.ProductName AS name, 2 AS source, ROUND(COS(2),10) AS
            result FROM Products p  WHERE p.ProductID = ? 
          children: []
      - stage: PostgreSQL
        sentence:
          entity: Products
          dialect: PostgreSQL
          dataSource: PostgreSQL
          sentence: >-
            SELECT p.ProductName AS "name", 2 AS "source", ROUND(CAST(COS(2) AS
            DECIMAL),10) AS "result" FROM Products p  WHERE p.ProductID = $1 
          children: []
      - stage: SqlServer
        sentence:
          entity: Products
          dialect: SqlServer
          dataSource: SqlServer
          sentence: >-
            SELECT p.ProductName AS name, 2 AS source, ROUND(COS(2),10) AS
            result FROM Products p  WHERE p.ProductID = @id 
          children: []
      - stage: Oracle
        sentence:
          entity: Products
          dialect: Oracle
          dataSource: Oracle
          sentence: >-
            SELECT p.ProductName AS "name", 2 AS "source", ROUND(COS(2),10) AS
            "result" FROM Products p  WHERE p.ProductID = :id 
          children: []
      - stage: MongoDB
        sentence:
          entity: Products
          dialect: MongoDB
          dataSource: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":2, "result":{ "$round" :[{ "$cos" :2
            },10] } }} ]
          children: []
    errors: 1
    expression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:2,result:round(cos(2),10)})
    normalizeExpression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:2,result:round(cos(2),10)})
    model:
      - name: name
        type: string
      - name: source
        type: number
      - name: result
        type: any
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      name: select
      classtype: Sentence
      children:
        - name: filter
          classtype: Filter
          children:
            - name: '==='
              classtype: Operator
              children:
                - name: id
                  classtype: Field
                  children: []
                  type: integer
                  entity: Products
                  alias: p
                  isRoot: true
                - name: id
                  classtype: Variable
                  children: []
                  type: integer
                  number: 1
              type: any
          type: any
        - name: Products
          classtype: From
          children: []
          type: any
          alias: p
        - name: map
          classtype: Map
          children:
            - name: obj
              classtype: Obj
              children:
                - name: name
                  classtype: KeyValue
                  children:
                    - name: name
                      classtype: Field
                      children: []
                      type: string
                      entity: Products
                      alias: p
                      isRoot: true
                  type: any
                - name: source
                  classtype: KeyValue
                  children:
                    - name: 2
                      classtype: Constant2
                      children: []
                      type: number
                  type: any
                - name: result
                  classtype: KeyValue
                  children:
                    - name: round
                      classtype: FunctionRef
                      children:
                        - name: cos
                          classtype: FunctionRef
                          children:
                            - name: 2
                              classtype: Constant2
                              children: []
                              type: number
                          type: any
                        - name: 10
                          classtype: Constant2
                          children: []
                          type: number
                      type: any
                  type: any
              type: object
          type: any
      type: any
      columns:
        - name: name
          type: string
        - name: source
          type: number
        - name: result
          type: any
      parameters:
        - name: id
          type: integer
      entity: Products
      constraints: []
    executions:
      - stage: MySQL
      - stage: MariaDB
      - stage: PostgreSQL
      - stage: SqlServer
      - stage: Oracle
      - stage: MongoDB
        error: not equal MySQL
        result:
          - name: Chai
            result: -0.4161468365
    result:
      - name: Chai
        source: 2
        result: -0.4161468365
  - name: function exp
    data: a
    sentences:
      - stage: MySQL
        sentence:
          entity: Products
          dialect: MySQL
          dataSource: MySQL
          sentence: >-
            SELECT p.ProductName AS name, 1 AS source, ROUND(EXP(1),10) AS
            result FROM Products p  WHERE p.ProductID = ? 
          children: []
      - stage: MariaDB
        sentence:
          entity: Products
          dialect: MariaDB
          dataSource: MariaDB
          sentence: >-
            SELECT p.ProductName AS name, 1 AS source, ROUND(EXP(1),10) AS
            result FROM Products p  WHERE p.ProductID = ? 
          children: []
      - stage: PostgreSQL
        sentence:
          entity: Products
          dialect: PostgreSQL
          dataSource: PostgreSQL
          sentence: >-
            SELECT p.ProductName AS "name", 1 AS "source", ROUND(CAST(EXP(1) AS
            DECIMAL),10) AS "result" FROM Products p  WHERE p.ProductID = $1 
          children: []
      - stage: SqlServer
        sentence:
          entity: Products
          dialect: SqlServer
          dataSource: SqlServer
          sentence: >-
            SELECT p.ProductName AS name, 1 AS source, ROUND(EXP(1),10) AS
            result FROM Products p  WHERE p.ProductID = @id 
          children: []
      - stage: Oracle
        sentence:
          entity: Products
          dialect: Oracle
          dataSource: Oracle
          sentence: >-
            SELECT p.ProductName AS "name", 1 AS "source", ROUND(EXP(1),10) AS
            "result" FROM Products p  WHERE p.ProductID = :id 
          children: []
      - stage: MongoDB
        sentence:
          entity: Products
          dialect: MongoDB
          dataSource: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":1, "result":{ "$round" :[{ "$exp" :1
            },10] } }} ]
          children: []
    errors: 1
    expression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:1,result:round(exp(1),10)})
    normalizeExpression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:1,result:round(exp(1),10)})
    model:
      - name: name
        type: string
      - name: source
        type: number
      - name: result
        type: any
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      name: select
      classtype: Sentence
      children:
        - name: filter
          classtype: Filter
          children:
            - name: '==='
              classtype: Operator
              children:
                - name: id
                  classtype: Field
                  children: []
                  type: integer
                  entity: Products
                  alias: p
                  isRoot: true
                - name: id
                  classtype: Variable
                  children: []
                  type: integer
                  number: 1
              type: any
          type: any
        - name: Products
          classtype: From
          children: []
          type: any
          alias: p
        - name: map
          classtype: Map
          children:
            - name: obj
              classtype: Obj
              children:
                - name: name
                  classtype: KeyValue
                  children:
                    - name: name
                      classtype: Field
                      children: []
                      type: string
                      entity: Products
                      alias: p
                      isRoot: true
                  type: any
                - name: source
                  classtype: KeyValue
                  children:
                    - name: 1
                      classtype: Constant2
                      children: []
                      type: number
                  type: any
                - name: result
                  classtype: KeyValue
                  children:
                    - name: round
                      classtype: FunctionRef
                      children:
                        - name: exp
                          classtype: FunctionRef
                          children:
                            - name: 1
                              classtype: Constant2
                              children: []
                              type: number
                          type: any
                        - name: 10
                          classtype: Constant2
                          children: []
                          type: number
                      type: any
                  type: any
              type: object
          type: any
      type: any
      columns:
        - name: name
          type: string
        - name: source
          type: number
        - name: result
          type: any
      parameters:
        - name: id
          type: integer
      entity: Products
      constraints: []
    executions:
      - stage: MySQL
      - stage: MariaDB
      - stage: PostgreSQL
      - stage: SqlServer
      - stage: Oracle
      - stage: MongoDB
        error: not equal MySQL
        result:
          - name: Chai
            result: 2.7182818285
    result:
      - name: Chai
        source: 1
        result: 2.7182818285
  - name: function floor
    data: a
    sentences:
      - stage: MySQL
        sentence:
          entity: Products
          dialect: MySQL
          dataSource: MySQL
          sentence: >-
            SELECT p.ProductName AS name, 25.75 AS source,
            ROUND(FLOOR(25.75),10) AS result FROM Products p  WHERE p.ProductID
            = ? 
          children: []
      - stage: MariaDB
        sentence:
          entity: Products
          dialect: MariaDB
          dataSource: MariaDB
          sentence: >-
            SELECT p.ProductName AS name, 25.75 AS source,
            ROUND(FLOOR(25.75),10) AS result FROM Products p  WHERE p.ProductID
            = ? 
          children: []
      - stage: PostgreSQL
        sentence:
          entity: Products
          dialect: PostgreSQL
          dataSource: PostgreSQL
          sentence: >-
            SELECT p.ProductName AS "name", 25.75 AS "source",
            ROUND(CAST(FLOOR(25.75) AS DECIMAL),10) AS "result" FROM Products p 
            WHERE p.ProductID = $1 
          children: []
      - stage: SqlServer
        sentence:
          entity: Products
          dialect: SqlServer
          dataSource: SqlServer
          sentence: >-
            SELECT p.ProductName AS name, 25.75 AS source,
            ROUND(FLOOR(25.75),10) AS result FROM Products p  WHERE p.ProductID
            = @id 
          children: []
      - stage: Oracle
        sentence:
          entity: Products
          dialect: Oracle
          dataSource: Oracle
          sentence: >-
            SELECT p.ProductName AS "name", 25.75 AS "source",
            ROUND(FLOOR(25.75),10) AS "result" FROM Products p  WHERE
            p.ProductID = :id 
          children: []
      - stage: MongoDB
        sentence:
          entity: Products
          dialect: MongoDB
          dataSource: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":25.75, "result":{ "$round" :[{
            "$floor" :25.75 },10] } }} ]
          children: []
    errors: 1
    expression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:25.75,result:round(floor(25.75),10)})
    normalizeExpression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:25.75,result:round(floor(25.75),10)})
    model:
      - name: name
        type: string
      - name: source
        type: number
      - name: result
        type: any
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      name: select
      classtype: Sentence
      children:
        - name: filter
          classtype: Filter
          children:
            - name: '==='
              classtype: Operator
              children:
                - name: id
                  classtype: Field
                  children: []
                  type: integer
                  entity: Products
                  alias: p
                  isRoot: true
                - name: id
                  classtype: Variable
                  children: []
                  type: integer
                  number: 1
              type: any
          type: any
        - name: Products
          classtype: From
          children: []
          type: any
          alias: p
        - name: map
          classtype: Map
          children:
            - name: obj
              classtype: Obj
              children:
                - name: name
                  classtype: KeyValue
                  children:
                    - name: name
                      classtype: Field
                      children: []
                      type: string
                      entity: Products
                      alias: p
                      isRoot: true
                  type: any
                - name: source
                  classtype: KeyValue
                  children:
                    - name: 25.75
                      classtype: Constant2
                      children: []
                      type: number
                  type: any
                - name: result
                  classtype: KeyValue
                  children:
                    - name: round
                      classtype: FunctionRef
                      children:
                        - name: floor
                          classtype: FunctionRef
                          children:
                            - name: 25.75
                              classtype: Constant2
                              children: []
                              type: number
                          type: any
                        - name: 10
                          classtype: Constant2
                          children: []
                          type: number
                      type: any
                  type: any
              type: object
          type: any
      type: any
      columns:
        - name: name
          type: string
        - name: source
          type: number
        - name: result
          type: any
      parameters:
        - name: id
          type: integer
      entity: Products
      constraints: []
    executions:
      - stage: MySQL
      - stage: MariaDB
      - stage: PostgreSQL
      - stage: SqlServer
      - stage: Oracle
      - stage: MongoDB
        error: not equal MySQL
        result:
          - name: Chai
            result: 25
    result:
      - name: Chai
        source: 25.75
        result: 25
  - name: function ln
    data: a
    sentences:
      - stage: MySQL
        sentence:
          entity: Products
          dialect: MySQL
          dataSource: MySQL
          sentence: >-
            SELECT p.ProductName AS name, 2 AS source, ROUND(LN(2),10) AS result
            FROM Products p  WHERE p.ProductID = ? 
          children: []
      - stage: MariaDB
        sentence:
          entity: Products
          dialect: MariaDB
          dataSource: MariaDB
          sentence: >-
            SELECT p.ProductName AS name, 2 AS source, ROUND(LN(2),10) AS result
            FROM Products p  WHERE p.ProductID = ? 
          children: []
      - stage: PostgreSQL
        sentence:
          entity: Products
          dialect: PostgreSQL
          dataSource: PostgreSQL
          sentence: >-
            SELECT p.ProductName AS "name", 2 AS "source", ROUND(CAST(LN(2) AS
            DECIMAL),10) AS "result" FROM Products p  WHERE p.ProductID = $1 
          children: []
      - stage: SqlServer
        sentence:
          entity: Products
          dialect: SqlServer
          dataSource: SqlServer
          sentence: >-
            SELECT p.ProductName AS name, 2 AS source, ROUND(LOG(2),10) AS
            result FROM Products p  WHERE p.ProductID = @id 
          children: []
      - stage: Oracle
        sentence:
          entity: Products
          dialect: Oracle
          dataSource: Oracle
          sentence: >-
            SELECT p.ProductName AS "name", 2 AS "source", ROUND(LN(2),10) AS
            "result" FROM Products p  WHERE p.ProductID = :id 
          children: []
      - stage: MongoDB
        sentence:
          entity: Products
          dialect: MongoDB
          dataSource: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":2, "result":{ "$round" :[{ "$ln" :2
            },10] } }} ]
          children: []
    errors: 1
    expression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:2,result:round(ln(2),10)})
    normalizeExpression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:2,result:round(ln(2),10)})
    model:
      - name: name
        type: string
      - name: source
        type: number
      - name: result
        type: any
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      name: select
      classtype: Sentence
      children:
        - name: filter
          classtype: Filter
          children:
            - name: '==='
              classtype: Operator
              children:
                - name: id
                  classtype: Field
                  children: []
                  type: integer
                  entity: Products
                  alias: p
                  isRoot: true
                - name: id
                  classtype: Variable
                  children: []
                  type: integer
                  number: 1
              type: any
          type: any
        - name: Products
          classtype: From
          children: []
          type: any
          alias: p
        - name: map
          classtype: Map
          children:
            - name: obj
              classtype: Obj
              children:
                - name: name
                  classtype: KeyValue
                  children:
                    - name: name
                      classtype: Field
                      children: []
                      type: string
                      entity: Products
                      alias: p
                      isRoot: true
                  type: any
                - name: source
                  classtype: KeyValue
                  children:
                    - name: 2
                      classtype: Constant2
                      children: []
                      type: number
                  type: any
                - name: result
                  classtype: KeyValue
                  children:
                    - name: round
                      classtype: FunctionRef
                      children:
                        - name: ln
                          classtype: FunctionRef
                          children:
                            - name: 2
                              classtype: Constant2
                              children: []
                              type: number
                          type: any
                        - name: 10
                          classtype: Constant2
                          children: []
                          type: number
                      type: any
                  type: any
              type: object
          type: any
      type: any
      columns:
        - name: name
          type: string
        - name: source
          type: number
        - name: result
          type: any
      parameters:
        - name: id
          type: integer
      entity: Products
      constraints: []
    executions:
      - stage: MySQL
      - stage: MariaDB
      - stage: PostgreSQL
      - stage: SqlServer
      - stage: Oracle
      - stage: MongoDB
        error: not equal MySQL
        result:
          - name: Chai
            result: 0.6931471806
    result:
      - name: Chai
        source: 2
        result: 0.6931471806
  - name: function log
    data: a
    sentences:
      - stage: MySQL
        sentence:
          entity: Products
          dialect: MySQL
          dataSource: MySQL
          sentence: >-
            SELECT p.ProductName AS name, 10 AS m, 20 AS n, ROUND(LOG(10,20),10)
            AS result FROM Products p  WHERE p.ProductID = ? 
          children: []
      - stage: MariaDB
        sentence:
          entity: Products
          dialect: MariaDB
          dataSource: MariaDB
          sentence: >-
            SELECT p.ProductName AS name, 10 AS m, 20 AS n, ROUND(LOG(10,20),10)
            AS result FROM Products p  WHERE p.ProductID = ? 
          children: []
      - stage: PostgreSQL
        sentence:
          entity: Products
          dialect: PostgreSQL
          dataSource: PostgreSQL
          sentence: >-
            SELECT p.ProductName AS "name", 10 AS "m", 20 AS "n",
            ROUND(CAST(LOG(10,20) AS DECIMAL),10) AS "result" FROM Products p 
            WHERE p.ProductID = $1 
          children: []
      - stage: SqlServer
        sentence:
          entity: Products
          dialect: SqlServer
          dataSource: SqlServer
          sentence: >-
            SELECT p.ProductName AS name, 10 AS m, 20 AS n, ROUND(LOG(20,10),10)
            AS result FROM Products p  WHERE p.ProductID = @id 
          children: []
      - stage: Oracle
        sentence:
          entity: Products
          dialect: Oracle
          dataSource: Oracle
          sentence: >-
            SELECT p.ProductName AS "name", 10 AS "m", 20 AS "n",
            ROUND(LOG(10,20),10) AS "result" FROM Products p  WHERE p.ProductID
            = :id 
          children: []
      - stage: MongoDB
        sentence:
          entity: Products
          dialect: MongoDB
          dataSource: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "m":10, "n":20, "result":{ "$round" :[{
            "$log":[10,20] },10] } }} ]
          children: []
    errors: 1
    expression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,m:10,n:20,result:round(log(10,20),10)})
    normalizeExpression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,m:10,n:20,result:round(log(10,20),10)})
    model:
      - name: name
        type: string
      - name: m
        type: number
      - name: 'n'
        type: number
      - name: result
        type: any
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      name: select
      classtype: Sentence
      children:
        - name: filter
          classtype: Filter
          children:
            - name: '==='
              classtype: Operator
              children:
                - name: id
                  classtype: Field
                  children: []
                  type: integer
                  entity: Products
                  alias: p
                  isRoot: true
                - name: id
                  classtype: Variable
                  children: []
                  type: integer
                  number: 1
              type: any
          type: any
        - name: Products
          classtype: From
          children: []
          type: any
          alias: p
        - name: map
          classtype: Map
          children:
            - name: obj
              classtype: Obj
              children:
                - name: name
                  classtype: KeyValue
                  children:
                    - name: name
                      classtype: Field
                      children: []
                      type: string
                      entity: Products
                      alias: p
                      isRoot: true
                  type: any
                - name: m
                  classtype: KeyValue
                  children:
                    - name: 10
                      classtype: Constant2
                      children: []
                      type: number
                  type: any
                - name: 'n'
                  classtype: KeyValue
                  children:
                    - name: 20
                      classtype: Constant2
                      children: []
                      type: number
                  type: any
                - name: result
                  classtype: KeyValue
                  children:
                    - name: round
                      classtype: FunctionRef
                      children:
                        - name: log
                          classtype: FunctionRef
                          children:
                            - name: 10
                              classtype: Constant2
                              children: []
                              type: number
                            - name: 20
                              classtype: Constant2
                              children: []
                              type: number
                          type: any
                        - name: 10
                          classtype: Constant2
                          children: []
                          type: number
                      type: any
                  type: any
              type: object
          type: any
      type: any
      columns:
        - name: name
          type: string
        - name: m
          type: number
        - name: 'n'
          type: number
        - name: result
          type: any
      parameters:
        - name: id
          type: integer
      entity: Products
      constraints: []
    executions:
      - stage: MySQL
      - stage: MariaDB
      - stage: PostgreSQL
      - stage: SqlServer
      - stage: Oracle
      - stage: MongoDB
        error: not equal MySQL
        result:
          - name: Chai
            result: 0.7686217868
    result:
      - name: Chai
        m: 10
        'n': 20
        result: 1.3010299957
  - name: function round
    data: a
    sentences:
      - stage: MySQL
        sentence:
          entity: Products
          dialect: MySQL
          dataSource: MySQL
          sentence: >-
            SELECT p.ProductName AS name, 135.375 AS source, ROUND(135.375,2) AS
            result FROM Products p  WHERE p.ProductID = ? 
          children: []
      - stage: MariaDB
        sentence:
          entity: Products
          dialect: MariaDB
          dataSource: MariaDB
          sentence: >-
            SELECT p.ProductName AS name, 135.375 AS source, ROUND(135.375,2) AS
            result FROM Products p  WHERE p.ProductID = ? 
          children: []
      - stage: PostgreSQL
        sentence:
          entity: Products
          dialect: PostgreSQL
          dataSource: PostgreSQL
          sentence: >-
            SELECT p.ProductName AS "name", 135.375 AS "source",
            ROUND(CAST(135.375 AS DECIMAL),2) AS "result" FROM Products p  WHERE
            p.ProductID = $1 
          children: []
      - stage: SqlServer
        sentence:
          entity: Products
          dialect: SqlServer
          dataSource: SqlServer
          sentence: >-
            SELECT p.ProductName AS name, 135.375 AS source, ROUND(135.375,2) AS
            result FROM Products p  WHERE p.ProductID = @id 
          children: []
      - stage: Oracle
        sentence:
          entity: Products
          dialect: Oracle
          dataSource: Oracle
          sentence: >-
            SELECT p.ProductName AS "name", 135.375 AS "source",
            ROUND(135.375,2) AS "result" FROM Products p  WHERE p.ProductID =
            :id 
          children: []
      - stage: MongoDB
        sentence:
          entity: Products
          dialect: MongoDB
          dataSource: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":135.375, "result":{ "$round"
            :[135.375,2] } }} ]
          children: []
    errors: 1
    expression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:135.375,result:round(135.375,2)})
    normalizeExpression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:135.375,result:round(135.375,2)})
    model:
      - name: name
        type: string
      - name: source
        type: number
      - name: result
        type: any
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      name: select
      classtype: Sentence
      children:
        - name: filter
          classtype: Filter
          children:
            - name: '==='
              classtype: Operator
              children:
                - name: id
                  classtype: Field
                  children: []
                  type: integer
                  entity: Products
                  alias: p
                  isRoot: true
                - name: id
                  classtype: Variable
                  children: []
                  type: integer
                  number: 1
              type: any
          type: any
        - name: Products
          classtype: From
          children: []
          type: any
          alias: p
        - name: map
          classtype: Map
          children:
            - name: obj
              classtype: Obj
              children:
                - name: name
                  classtype: KeyValue
                  children:
                    - name: name
                      classtype: Field
                      children: []
                      type: string
                      entity: Products
                      alias: p
                      isRoot: true
                  type: any
                - name: source
                  classtype: KeyValue
                  children:
                    - name: 135.375
                      classtype: Constant2
                      children: []
                      type: number
                  type: any
                - name: result
                  classtype: KeyValue
                  children:
                    - name: round
                      classtype: FunctionRef
                      children:
                        - name: 135.375
                          classtype: Constant2
                          children: []
                          type: number
                        - name: 2
                          classtype: Constant2
                          children: []
                          type: number
                      type: any
                  type: any
              type: object
          type: any
      type: any
      columns:
        - name: name
          type: string
        - name: source
          type: number
        - name: result
          type: any
      parameters:
        - name: id
          type: integer
      entity: Products
      constraints: []
    executions:
      - stage: MySQL
      - stage: MariaDB
      - stage: PostgreSQL
      - stage: SqlServer
      - stage: Oracle
      - stage: MongoDB
        error: not equal MySQL
        result:
          - name: Chai
            result: 135.38
    result:
      - name: Chai
        source: 135.375
        result: 135.38
  - name: function sign
    data: a
    sentences:
      - stage: MySQL
        sentence:
          entity: Products
          dialect: MySQL
          dataSource: MySQL
          sentence: >-
            SELECT p.ProductName AS name, 255.5 AS source, ROUND(SIGN(255.5),10)
            AS result FROM Products p  WHERE p.ProductID = ? 
          children: []
      - stage: MariaDB
        sentence:
          entity: Products
          dialect: MariaDB
          dataSource: MariaDB
          sentence: >-
            SELECT p.ProductName AS name, 255.5 AS source, ROUND(SIGN(255.5),10)
            AS result FROM Products p  WHERE p.ProductID = ? 
          children: []
      - stage: PostgreSQL
        sentence:
          entity: Products
          dialect: PostgreSQL
          dataSource: PostgreSQL
          sentence: >-
            SELECT p.ProductName AS "name", 255.5 AS "source",
            ROUND(CAST(SIGN(255.5) AS DECIMAL),10) AS "result" FROM Products p 
            WHERE p.ProductID = $1 
          children: []
      - stage: SqlServer
        sentence:
          entity: Products
          dialect: SqlServer
          dataSource: SqlServer
          sentence: >-
            SELECT p.ProductName AS name, 255.5 AS source, ROUND(SIGN(255.5),10)
            AS result FROM Products p  WHERE p.ProductID = @id 
          children: []
      - stage: Oracle
        sentence:
          entity: Products
          dialect: Oracle
          dataSource: Oracle
          sentence: >-
            SELECT p.ProductName AS "name", 255.5 AS "source",
            ROUND(SIGN(255.5),10) AS "result" FROM Products p  WHERE p.ProductID
            = :id 
          children: []
      - stage: MongoDB
        sentence:
          entity: Products
          dialect: MongoDB
          dataSource: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":255.5, "result":{ "$round" :[{
            "$sign":255.5},10] } }} ]
          children: []
    errors: 1
    expression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:255.5,result:round(sign(255.5),10)})
    normalizeExpression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:255.5,result:round(sign(255.5),10)})
    model:
      - name: name
        type: string
      - name: source
        type: number
      - name: result
        type: any
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      name: select
      classtype: Sentence
      children:
        - name: filter
          classtype: Filter
          children:
            - name: '==='
              classtype: Operator
              children:
                - name: id
                  classtype: Field
                  children: []
                  type: integer
                  entity: Products
                  alias: p
                  isRoot: true
                - name: id
                  classtype: Variable
                  children: []
                  type: integer
                  number: 1
              type: any
          type: any
        - name: Products
          classtype: From
          children: []
          type: any
          alias: p
        - name: map
          classtype: Map
          children:
            - name: obj
              classtype: Obj
              children:
                - name: name
                  classtype: KeyValue
                  children:
                    - name: name
                      classtype: Field
                      children: []
                      type: string
                      entity: Products
                      alias: p
                      isRoot: true
                  type: any
                - name: source
                  classtype: KeyValue
                  children:
                    - name: 255.5
                      classtype: Constant2
                      children: []
                      type: number
                  type: any
                - name: result
                  classtype: KeyValue
                  children:
                    - name: round
                      classtype: FunctionRef
                      children:
                        - name: sign
                          classtype: FunctionRef
                          children:
                            - name: 255.5
                              classtype: Constant2
                              children: []
                              type: number
                          type: any
                        - name: 10
                          classtype: Constant2
                          children: []
                          type: number
                      type: any
                  type: any
              type: object
          type: any
      type: any
      columns:
        - name: name
          type: string
        - name: source
          type: number
        - name: result
          type: any
      parameters:
        - name: id
          type: integer
      entity: Products
      constraints: []
    executions:
      - stage: MongoDB
        error: >-
          MongoServerError: Invalid $project :: caused by :: Unrecognized
          expression '$sign'
      - stage: MySQL
      - stage: MariaDB
      - stage: PostgreSQL
      - stage: SqlServer
      - stage: Oracle
    result:
      - name: Chai
        source: 255.5
        result: 1
  - name: function tan
    data: a
    sentences:
      - stage: MySQL
        sentence:
          entity: Products
          dialect: MySQL
          dataSource: MySQL
          sentence: >-
            SELECT p.ProductName AS name, 1.75 AS source, ROUND(TAN(1.75),10) AS
            result FROM Products p  WHERE p.ProductID = ? 
          children: []
      - stage: MariaDB
        sentence:
          entity: Products
          dialect: MariaDB
          dataSource: MariaDB
          sentence: >-
            SELECT p.ProductName AS name, 1.75 AS source, ROUND(TAN(1.75),10) AS
            result FROM Products p  WHERE p.ProductID = ? 
          children: []
      - stage: PostgreSQL
        sentence:
          entity: Products
          dialect: PostgreSQL
          dataSource: PostgreSQL
          sentence: >-
            SELECT p.ProductName AS "name", 1.75 AS "source",
            ROUND(CAST(TAN(1.75) AS DECIMAL),10) AS "result" FROM Products p 
            WHERE p.ProductID = $1 
          children: []
      - stage: SqlServer
        sentence:
          entity: Products
          dialect: SqlServer
          dataSource: SqlServer
          sentence: >-
            SELECT p.ProductName AS name, 1.75 AS source, ROUND(TAN(1.75),10) AS
            result FROM Products p  WHERE p.ProductID = @id 
          children: []
      - stage: Oracle
        sentence:
          entity: Products
          dialect: Oracle
          dataSource: Oracle
          sentence: >-
            SELECT p.ProductName AS "name", 1.75 AS "source",
            ROUND(TAN(1.75),10) AS "result" FROM Products p  WHERE p.ProductID =
            :id 
          children: []
      - stage: MongoDB
        sentence:
          entity: Products
          dialect: MongoDB
          dataSource: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":1.75, "result":{ "$round" :[{ "$tan"
            :1.75 },10] } }} ]
          children: []
    errors: 1
    expression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:1.75,result:round(tan(1.75),10)})
    normalizeExpression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:1.75,result:round(tan(1.75),10)})
    model:
      - name: name
        type: string
      - name: source
        type: number
      - name: result
        type: any
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      name: select
      classtype: Sentence
      children:
        - name: filter
          classtype: Filter
          children:
            - name: '==='
              classtype: Operator
              children:
                - name: id
                  classtype: Field
                  children: []
                  type: integer
                  entity: Products
                  alias: p
                  isRoot: true
                - name: id
                  classtype: Variable
                  children: []
                  type: integer
                  number: 1
              type: any
          type: any
        - name: Products
          classtype: From
          children: []
          type: any
          alias: p
        - name: map
          classtype: Map
          children:
            - name: obj
              classtype: Obj
              children:
                - name: name
                  classtype: KeyValue
                  children:
                    - name: name
                      classtype: Field
                      children: []
                      type: string
                      entity: Products
                      alias: p
                      isRoot: true
                  type: any
                - name: source
                  classtype: KeyValue
                  children:
                    - name: 1.75
                      classtype: Constant2
                      children: []
                      type: number
                  type: any
                - name: result
                  classtype: KeyValue
                  children:
                    - name: round
                      classtype: FunctionRef
                      children:
                        - name: tan
                          classtype: FunctionRef
                          children:
                            - name: 1.75
                              classtype: Constant2
                              children: []
                              type: number
                          type: any
                        - name: 10
                          classtype: Constant2
                          children: []
                          type: number
                      type: any
                  type: any
              type: object
          type: any
      type: any
      columns:
        - name: name
          type: string
        - name: source
          type: number
        - name: result
          type: any
      parameters:
        - name: id
          type: integer
      entity: Products
      constraints: []
    executions:
      - stage: MySQL
      - stage: MariaDB
      - stage: PostgreSQL
      - stage: SqlServer
      - stage: Oracle
      - stage: MongoDB
        error: not equal MySQL
        result:
          - name: Chai
            result: -5.5203799225
    result:
      - name: Chai
        source: 1.75
        result: -5.5203799225
  - name: function trunc
    data: a
    sentences:
      - stage: MySQL
        sentence:
          entity: Products
          dialect: MySQL
          dataSource: MySQL
          sentence: >-
            SELECT p.ProductName AS name, 135.375 AS source,
            ROUND(TRUNCATE(135.375,2),10) AS result FROM Products p  WHERE
            p.ProductID = ? 
          children: []
      - stage: MariaDB
        sentence:
          entity: Products
          dialect: MariaDB
          dataSource: MariaDB
          sentence: >-
            SELECT p.ProductName AS name, 135.375 AS source,
            ROUND(TRUNCATE(135.375,2),10) AS result FROM Products p  WHERE
            p.ProductID = ? 
          children: []
      - stage: PostgreSQL
        sentence:
          entity: Products
          dialect: PostgreSQL
          dataSource: PostgreSQL
          sentence: >-
            SELECT p.ProductName AS "name", 135.375 AS "source",
            ROUND(CAST(TRUNC(135.375,2) AS DECIMAL),10) AS "result" FROM
            Products p  WHERE p.ProductID = $1 
          children: []
      - stage: SqlServer
        sentence:
          entity: Products
          dialect: SqlServer
          dataSource: SqlServer
          sentence: >-
            SELECT p.ProductName AS name, 135.375 AS source,
            ROUND(ROUND(135.375,2,1),10) AS result FROM Products p  WHERE
            p.ProductID = @id 
          children: []
      - stage: Oracle
        sentence:
          entity: Products
          dialect: Oracle
          dataSource: Oracle
          sentence: >-
            SELECT p.ProductName AS "name", 135.375 AS "source",
            ROUND(TRUNC(135.375,2),10) AS "result" FROM Products p  WHERE
            p.ProductID = :id 
          children: []
      - stage: MongoDB
        sentence:
          entity: Products
          dialect: MongoDB
          dataSource: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":135.375, "result":{ "$round" :[{
            "$trunc" :135.375 },10] } }} ]
          children: []
    errors: 1
    expression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:135.375,result:round(trunc(135.375,2),10)})
    normalizeExpression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:135.375,result:round(trunc(135.375,2),10)})
    model:
      - name: name
        type: string
      - name: source
        type: number
      - name: result
        type: any
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      name: select
      classtype: Sentence
      children:
        - name: filter
          classtype: Filter
          children:
            - name: '==='
              classtype: Operator
              children:
                - name: id
                  classtype: Field
                  children: []
                  type: integer
                  entity: Products
                  alias: p
                  isRoot: true
                - name: id
                  classtype: Variable
                  children: []
                  type: integer
                  number: 1
              type: any
          type: any
        - name: Products
          classtype: From
          children: []
          type: any
          alias: p
        - name: map
          classtype: Map
          children:
            - name: obj
              classtype: Obj
              children:
                - name: name
                  classtype: KeyValue
                  children:
                    - name: name
                      classtype: Field
                      children: []
                      type: string
                      entity: Products
                      alias: p
                      isRoot: true
                  type: any
                - name: source
                  classtype: KeyValue
                  children:
                    - name: 135.375
                      classtype: Constant2
                      children: []
                      type: number
                  type: any
                - name: result
                  classtype: KeyValue
                  children:
                    - name: round
                      classtype: FunctionRef
                      children:
                        - name: trunc
                          classtype: FunctionRef
                          children:
                            - name: 135.375
                              classtype: Constant2
                              children: []
                              type: number
                            - name: 2
                              classtype: Constant2
                              children: []
                              type: number
                          type: any
                        - name: 10
                          classtype: Constant2
                          children: []
                          type: number
                      type: any
                  type: any
              type: object
          type: any
      type: any
      columns:
        - name: name
          type: string
        - name: source
          type: number
        - name: result
          type: any
      parameters:
        - name: id
          type: integer
      entity: Products
      constraints: []
    executions:
      - stage: MySQL
      - stage: MariaDB
      - stage: PostgreSQL
      - stage: SqlServer
      - stage: Oracle
      - stage: MongoDB
        error: not equal MySQL
        result:
          - name: Chai
            result: 135
    result:
      - name: Chai
        source: 135.375
        result: 135.37
errors: 14
