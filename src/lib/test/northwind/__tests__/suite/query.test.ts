/* eslint-disable no-template-curly-in-string */
import { orm } from '../../../..'
beforeAll(async () => {
	require('dotenv').config({ path: './config/northwind.env' })
	await orm.init('./config/northwind.yaml')
})

describe('query', () => {
	const context = JSON.parse('{}')
	test('normalize', () => {
		expect(orm.normalize('Products.sort(p => p.name)')).toStrictEqual('Products.map(p=>{id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued}).sort(p=>asc(p.name))')
		expect(orm.normalize('Products.map(p => p).sort(p => p.id).page(1, 1)')).toStrictEqual('Products.map(p=>{id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued}).sort(p=>asc(p.id)).page(1,1)')
		expect(orm.normalize('Products.sort(p => p.id).page(1, 1)')).toStrictEqual('Products.map(p=>{id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued}).sort(p=>asc(p.id)).page(1,1)')
		expect(orm.normalize('Products.filter(p => p.id === id).map(p => p).sort(p => p.id)')).toStrictEqual('Products.map(p=>{id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued}).filter(p=>(p.id==id)).sort(p=>asc(p.id))')
		expect(orm.normalize('Products.filter(p => p.id === id).sort(p => p.id) ')).toStrictEqual('Products.map(p=>{id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued}).filter(p=>(p.id==id)).sort(p=>asc(p.id))')
		expect(orm.normalize('Products.map(p => ({ category: p.category.name })).sort(p => p.category)')).toStrictEqual('Products.map(p=>{category:p.category.name}).sort(p=>asc(p.category))')
		expect(orm.normalize('Products.map(p => ({ name: p.name, category: p.category.name })).sort(p => [p.category, p.name])')).toStrictEqual('Products.map(p=>{name:p.name,category:p.category.name}).sort(p=>[asc(p.category),asc(p.name)])')
		expect(orm.normalize('Products.map(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock })).sort(p => p.name)')).toStrictEqual('Products.map(p=>{category:p.category.name,name:p.name,quantity:p.quantity,inStock:p.inStock}).sort(p=>asc(p.name))')
		expect(orm.normalize('Products.filter(p => p.discontinued !== false).map(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock })).sort(p => [p.category, desc(p.name)])')).toStrictEqual('Products.map(p=>{category:p.category.name,name:p.name,quantity:p.quantity,inStock:p.inStock}).filter(p=>(p.discontinued!=false)).sort(p=>[asc(p.category),desc(p.name)])')
		expect(orm.normalize('Orders.details.filter(p => between(p.order.shippedDate, fromDate, toDate) && p.unitPrice > minValue).map(p => ({ category: p.product.category.name, product: p.product.name, unitPrice: p.unitPrice, quantity: p.quantity }))')).toStrictEqual('Orders.details.map(p=>{category:p.product.category.name,product:p.product.name,unitPrice:p.unitPrice,quantity:p.quantity}).filter(p=>(between(p.order.shippedDate,fromDate,toDate)&&(p.unitPrice>minValue)))')
		expect(orm.normalize('Orders.details.filter(p => between(p.order.shippedDate, fromDate, toDate) && p.unitPrice > minValue).map(p => ({ category: p.product.category.name, product: p.product.name, unitPrice: p.unitPrice, quantity: p.quantity })).sort(p => [p.category, p.product, p.unitPrice, p.quantity]) ')).toStrictEqual('Orders.details.map(p=>{category:p.product.category.name,product:p.product.name,unitPrice:p.unitPrice,quantity:p.quantity}).filter(p=>(between(p.order.shippedDate,fromDate,toDate)&&(p.unitPrice>minValue))).sort(p=>[asc(p.category),asc(p.product),asc(p.unitPrice),asc(p.quantity)])')
		expect(orm.normalize('Products.first(p => p)')).toStrictEqual('Products.map(p=>{id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued}).sort(p=>asc(p.id)).page(1,1)')
		expect(orm.normalize('Products.last(p => p)')).toStrictEqual('Products.map(p=>{id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued}).sort(p=>desc(p.id)).page(1,1)')
		expect(orm.normalize('Products.first(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock }))')).toStrictEqual('Products.map(p=>{category:p.category.name,name:p.name,quantity:p.quantity,inStock:p.inStock}).sort(p=>asc(p.category)).page(1,1)')
		expect(orm.normalize('Products.filter(p => p.discontinued !== false).last(p => p.id)')).toStrictEqual('Products.map(p=>{id:p.id}).filter(p=>(p.discontinued!=false)).sort(p=>desc(p.id)).page(1,1)')
		expect(orm.normalize('Products.distinct(p => p).sort(p => p.id)')).toStrictEqual('Products.map(p=>distinct({id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued})).sort(p=>asc(p.id))')
		expect(orm.normalize('Products.distinct(p => ({ category: p.category.name })).sort(p => p.category)')).toStrictEqual('Products.map(p=>distinct({category:p.category.name})).sort(p=>asc(p.category))')
		expect(orm.normalize('Products.distinct(p => ({ quantity: p.quantity, category: p.category.name })).sort(p => [p.quantity, p.category])')).toStrictEqual('Products.map(p=>distinct({quantity:p.quantity,category:p.category.name})).sort(p=>[asc(p.quantity),asc(p.category)])')
		expect(orm.normalize('Orders.filter(p => p.id === id).map(p => [p,p.customer,p.details])')).toStrictEqual('Orders.map(p=>{p:p,customer:p.customer,details:p.details}).filter(p=>(p.id==id))')
		expect(orm.normalize('Orders.filter(p => p.id === id).map(p => [p,p.customer,p.employee])')).toStrictEqual('Orders.map(p=>{p:p,customer:p.customer,employee:p.employee}).filter(p=>(p.id==id))')
		expect(orm.normalize('Orders.filter(p => p.id === id).map(p => [p.name,p.customer,p.employee])')).toStrictEqual('Orders.map(p=>{name:p.name,customer:p.customer,employee:p.employee}).filter(p=>(p.id==id))')
		expect(orm.normalize('Orders.filter(p => p.id === id).map(p => [p.name,p.customer])')).toStrictEqual('Orders.map(p=>{name:p.name,customer:p.customer}).filter(p=>(p.id==id))')
	})
	test('model', () => {
		expect(orm.model('Products.sort(p => p.name)')).toStrictEqual([{'name':'id','type':'integer'},{'name':'name','type':'string'},{'name':'supplierId','type':'integer'},{'name':'categoryId','type':'integer'},{'name':'quantity','type':'string'},{'name':'price','type':'decimal'},{'name':'inStock','type':'decimal'},{'name':'onOrder','type':'decimal'},{'name':'reorderLevel','type':'decimal'},{'name':'discontinued','type':'boolean'}])
		expect(orm.model('Products.map(p => p).sort(p => p.id).page(1, 1)')).toStrictEqual([{'name':'id','type':'integer'},{'name':'name','type':'string'},{'name':'supplierId','type':'integer'},{'name':'categoryId','type':'integer'},{'name':'quantity','type':'string'},{'name':'price','type':'decimal'},{'name':'inStock','type':'decimal'},{'name':'onOrder','type':'decimal'},{'name':'reorderLevel','type':'decimal'},{'name':'discontinued','type':'boolean'}])
		expect(orm.model('Products.sort(p => p.id).page(1, 1)')).toStrictEqual([{'name':'id','type':'integer'},{'name':'name','type':'string'},{'name':'supplierId','type':'integer'},{'name':'categoryId','type':'integer'},{'name':'quantity','type':'string'},{'name':'price','type':'decimal'},{'name':'inStock','type':'decimal'},{'name':'onOrder','type':'decimal'},{'name':'reorderLevel','type':'decimal'},{'name':'discontinued','type':'boolean'}])
		expect(orm.model('Products.filter(p => p.id === id).map(p => p).sort(p => p.id)')).toStrictEqual([{'name':'id','type':'integer'},{'name':'name','type':'string'},{'name':'supplierId','type':'integer'},{'name':'categoryId','type':'integer'},{'name':'quantity','type':'string'},{'name':'price','type':'decimal'},{'name':'inStock','type':'decimal'},{'name':'onOrder','type':'decimal'},{'name':'reorderLevel','type':'decimal'},{'name':'discontinued','type':'boolean'}])
		expect(orm.model('Products.filter(p => p.id === id).sort(p => p.id) ')).toStrictEqual([{'name':'id','type':'integer'},{'name':'name','type':'string'},{'name':'supplierId','type':'integer'},{'name':'categoryId','type':'integer'},{'name':'quantity','type':'string'},{'name':'price','type':'decimal'},{'name':'inStock','type':'decimal'},{'name':'onOrder','type':'decimal'},{'name':'reorderLevel','type':'decimal'},{'name':'discontinued','type':'boolean'}])
		expect(orm.model('Products.map(p => ({ category: p.category.name })).sort(p => p.category)')).toStrictEqual([{'name':'category','type':'string'}])
		expect(orm.model('Products.map(p => ({ name: p.name, category: p.category.name })).sort(p => [p.category, p.name])')).toStrictEqual([{'name':'name','type':'string'},{'name':'category','type':'string'}])
		expect(orm.model('Products.map(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock })).sort(p => p.name)')).toStrictEqual([{'name':'category','type':'string'},{'name':'name','type':'string'},{'name':'quantity','type':'string'},{'name':'inStock','type':'decimal'}])
		expect(orm.model('Products.filter(p => p.discontinued !== false).map(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock })).sort(p => [p.category, desc(p.name)])')).toStrictEqual([{'name':'category','type':'string'},{'name':'name','type':'string'},{'name':'quantity','type':'string'},{'name':'inStock','type':'decimal'}])
		expect(orm.model('Orders.details.filter(p => between(p.order.shippedDate, fromDate, toDate) && p.unitPrice > minValue).map(p => ({ category: p.product.category.name, product: p.product.name, unitPrice: p.unitPrice, quantity: p.quantity }))')).toStrictEqual([{'name':'category','type':'string'},{'name':'product','type':'string'},{'name':'unitPrice','type':'decimal'},{'name':'quantity','type':'decimal'}])
		expect(orm.model('Orders.details.filter(p => between(p.order.shippedDate, fromDate, toDate) && p.unitPrice > minValue).map(p => ({ category: p.product.category.name, product: p.product.name, unitPrice: p.unitPrice, quantity: p.quantity })).sort(p => [p.category, p.product, p.unitPrice, p.quantity]) ')).toStrictEqual([{'name':'category','type':'string'},{'name':'product','type':'string'},{'name':'unitPrice','type':'decimal'},{'name':'quantity','type':'decimal'}])
		expect(orm.model('Products.first(p => p)')).toStrictEqual([{'name':'id','type':'integer'},{'name':'name','type':'string'},{'name':'supplierId','type':'integer'},{'name':'categoryId','type':'integer'},{'name':'quantity','type':'string'},{'name':'price','type':'decimal'},{'name':'inStock','type':'decimal'},{'name':'onOrder','type':'decimal'},{'name':'reorderLevel','type':'decimal'},{'name':'discontinued','type':'boolean'}])
		expect(orm.model('Products.last(p => p)')).toStrictEqual([{'name':'id','type':'integer'},{'name':'name','type':'string'},{'name':'supplierId','type':'integer'},{'name':'categoryId','type':'integer'},{'name':'quantity','type':'string'},{'name':'price','type':'decimal'},{'name':'inStock','type':'decimal'},{'name':'onOrder','type':'decimal'},{'name':'reorderLevel','type':'decimal'},{'name':'discontinued','type':'boolean'}])
		expect(orm.model('Products.first(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock }))')).toStrictEqual([{'name':'category','type':'string'},{'name':'name','type':'string'},{'name':'quantity','type':'string'},{'name':'inStock','type':'decimal'}])
		expect(orm.model('Products.filter(p => p.discontinued !== false).last(p => p.id)')).toStrictEqual([{'name':'id','type':'integer'}])
		expect(orm.model('Products.distinct(p => p).sort(p => p.id)')).toStrictEqual([{'name':'id','type':'integer'},{'name':'name','type':'string'},{'name':'supplierId','type':'integer'},{'name':'categoryId','type':'integer'},{'name':'quantity','type':'string'},{'name':'price','type':'decimal'},{'name':'inStock','type':'decimal'},{'name':'onOrder','type':'decimal'},{'name':'reorderLevel','type':'decimal'},{'name':'discontinued','type':'boolean'}])
		expect(orm.model('Products.distinct(p => ({ category: p.category.name })).sort(p => p.category)')).toStrictEqual([{'name':'category','type':'string'}])
		expect(orm.model('Products.distinct(p => ({ quantity: p.quantity, category: p.category.name })).sort(p => [p.quantity, p.category])')).toStrictEqual([{'name':'quantity','type':'string'},{'name':'category','type':'string'}])
		expect(orm.model('Orders.filter(p => p.id === id).map(p => [p,p.customer,p.details])')).toStrictEqual([{'name':'id','type':'integer'},{'name':'customerId','type':'string'},{'name':'employeeId','type':'integer'},{'name':'orderDate','type':'dateTime'},{'name':'requiredDate','type':'date'},{'name':'shippedDate','type':'date'},{'name':'shipViaId','type':'integer'},{'name':'freight','type':'decimal'},{'name':'name','type':'string'},{'name':'address','type':'string'},{'name':'city','type':'string'},{'name':'region','type':'string'},{'name':'postalCode','type':'string'},{'name':'country','type':'string'},{'name':'customer.id','type':'string'},{'name':'customer.name','type':'string'},{'name':'customer.contact','type':'string'},{'name':'customer.phone','type':'string'},{'name':'customer.address','type':'string'},{'name':'customer.city','type':'string'},{'name':'customer.region','type':'string'},{'name':'customer.postalCode','type':'string'},{'name':'customer.country','type':'string'},{'name':'details.orderId','type':'integer'},{'name':'details.productId','type':'integer'},{'name':'details.unitPrice','type':'decimal'},{'name':'details.quantity','type':'decimal'},{'name':'details.discount','type':'decimal'}])
		expect(orm.model('Orders.filter(p => p.id === id).map(p => [p,p.customer,p.employee])')).toStrictEqual([{'name':'id','type':'integer'},{'name':'customerId','type':'string'},{'name':'employeeId','type':'integer'},{'name':'orderDate','type':'dateTime'},{'name':'requiredDate','type':'date'},{'name':'shippedDate','type':'date'},{'name':'shipViaId','type':'integer'},{'name':'freight','type':'decimal'},{'name':'name','type':'string'},{'name':'address','type':'string'},{'name':'city','type':'string'},{'name':'region','type':'string'},{'name':'postalCode','type':'string'},{'name':'country','type':'string'},{'name':'customer.id','type':'string'},{'name':'customer.name','type':'string'},{'name':'customer.contact','type':'string'},{'name':'customer.phone','type':'string'},{'name':'customer.address','type':'string'},{'name':'customer.city','type':'string'},{'name':'customer.region','type':'string'},{'name':'customer.postalCode','type':'string'},{'name':'customer.country','type':'string'},{'name':'employee.id','type':'integer'},{'name':'employee.lastName','type':'string'},{'name':'employee.firstName','type':'string'},{'name':'employee.title','type':'string'},{'name':'employee.titleOfCourtesy','type':'string'},{'name':'employee.birthDate','type':'dateTime'},{'name':'employee.hireDate','type':'dateTime'},{'name':'employee.phone','type':'string'},{'name':'employee.reportsToId','type':'integer'},{'name':'employee.address','type':'string'},{'name':'employee.city','type':'string'},{'name':'employee.region','type':'string'},{'name':'employee.postalCode','type':'string'},{'name':'employee.country','type':'string'}])
		expect(orm.model('Orders.filter(p => p.id === id).map(p => [p.name,p.customer,p.employee])')).toStrictEqual([{'name':'name','type':'string'},{'name':'customer.id','type':'string'},{'name':'customer.name','type':'string'},{'name':'customer.contact','type':'string'},{'name':'customer.phone','type':'string'},{'name':'customer.address','type':'string'},{'name':'customer.city','type':'string'},{'name':'customer.region','type':'string'},{'name':'customer.postalCode','type':'string'},{'name':'customer.country','type':'string'},{'name':'employee.id','type':'integer'},{'name':'employee.lastName','type':'string'},{'name':'employee.firstName','type':'string'},{'name':'employee.title','type':'string'},{'name':'employee.titleOfCourtesy','type':'string'},{'name':'employee.birthDate','type':'dateTime'},{'name':'employee.hireDate','type':'dateTime'},{'name':'employee.phone','type':'string'},{'name':'employee.reportsToId','type':'integer'},{'name':'employee.address','type':'string'},{'name':'employee.city','type':'string'},{'name':'employee.region','type':'string'},{'name':'employee.postalCode','type':'string'},{'name':'employee.country','type':'string'}])
		expect(orm.model('Orders.filter(p => p.id === id).map(p => [p.name,p.customer])')).toStrictEqual([{'name':'name','type':'string'},{'name':'customer.id','type':'string'},{'name':'customer.name','type':'string'},{'name':'customer.contact','type':'string'},{'name':'customer.phone','type':'string'},{'name':'customer.address','type':'string'},{'name':'customer.city','type':'string'},{'name':'customer.region','type':'string'},{'name':'customer.postalCode','type':'string'},{'name':'customer.country','type':'string'}])
	})
	test('parameters', () => {
		expect(orm.parameters('Products.sort(p => p.name)')).toStrictEqual([])
		expect(orm.parameters('Products.map(p => p).sort(p => p.id).page(1, 1)')).toStrictEqual([])
		expect(orm.parameters('Products.sort(p => p.id).page(1, 1)')).toStrictEqual([])
		expect(orm.parameters('Products.filter(p => p.id === id).map(p => p).sort(p => p.id)')).toStrictEqual([{'name':'id','type':'integer'}])
		expect(orm.parameters('Products.filter(p => p.id === id).sort(p => p.id) ')).toStrictEqual([{'name':'id','type':'integer'}])
		expect(orm.parameters('Products.map(p => ({ category: p.category.name })).sort(p => p.category)')).toStrictEqual([])
		expect(orm.parameters('Products.map(p => ({ name: p.name, category: p.category.name })).sort(p => [p.category, p.name])')).toStrictEqual([])
		expect(orm.parameters('Products.map(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock })).sort(p => p.name)')).toStrictEqual([])
		expect(orm.parameters('Products.filter(p => p.discontinued !== false).map(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock })).sort(p => [p.category, desc(p.name)])')).toStrictEqual([])
		expect(orm.parameters('Orders.details.filter(p => between(p.order.shippedDate, fromDate, toDate) && p.unitPrice > minValue).map(p => ({ category: p.product.category.name, product: p.product.name, unitPrice: p.unitPrice, quantity: p.quantity }))')).toStrictEqual([{'name':'fromDate','type':'date'},{'name':'toDate','type':'date'},{'name':'minValue','type':'decimal'}])
		expect(orm.parameters('Orders.details.filter(p => between(p.order.shippedDate, fromDate, toDate) && p.unitPrice > minValue).map(p => ({ category: p.product.category.name, product: p.product.name, unitPrice: p.unitPrice, quantity: p.quantity })).sort(p => [p.category, p.product, p.unitPrice, p.quantity]) ')).toStrictEqual([{'name':'fromDate','type':'date'},{'name':'toDate','type':'date'},{'name':'minValue','type':'decimal'}])
		expect(orm.parameters('Products.first(p => p)')).toStrictEqual([])
		expect(orm.parameters('Products.last(p => p)')).toStrictEqual([])
		expect(orm.parameters('Products.first(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock }))')).toStrictEqual([])
		expect(orm.parameters('Products.filter(p => p.discontinued !== false).last(p => p.id)')).toStrictEqual([])
		expect(orm.parameters('Products.distinct(p => p).sort(p => p.id)')).toStrictEqual([])
		expect(orm.parameters('Products.distinct(p => ({ category: p.category.name })).sort(p => p.category)')).toStrictEqual([])
		expect(orm.parameters('Products.distinct(p => ({ quantity: p.quantity, category: p.category.name })).sort(p => [p.quantity, p.category])')).toStrictEqual([])
		expect(orm.parameters('Orders.filter(p => p.id === id).map(p => [p,p.customer,p.details])')).toStrictEqual([{'name':'id','type':'integer'}])
		expect(orm.parameters('Orders.filter(p => p.id === id).map(p => [p,p.customer,p.employee])')).toStrictEqual([{'name':'id','type':'integer'}])
		expect(orm.parameters('Orders.filter(p => p.id === id).map(p => [p.name,p.customer,p.employee])')).toStrictEqual([{'name':'id','type':'integer'}])
		expect(orm.parameters('Orders.filter(p => p.id === id).map(p => [p.name,p.customer])')).toStrictEqual([{'name':'id','type':'integer'}])
	})
	test('constraints', () => {
		expect(orm.constraints('Products.sort(p => p.name)')).toStrictEqual({"entity":"Products","constraints":[]})
		expect(orm.constraints('Products.map(p => p).sort(p => p.id).page(1, 1)')).toStrictEqual({"entity":"Products","constraints":[]})
		expect(orm.constraints('Products.sort(p => p.id).page(1, 1)')).toStrictEqual({"entity":"Products","constraints":[]})
		expect(orm.constraints('Products.filter(p => p.id === id).map(p => p).sort(p => p.id)')).toStrictEqual({"entity":"Products","constraints":[]})
		expect(orm.constraints('Products.filter(p => p.id === id).sort(p => p.id) ')).toStrictEqual({"entity":"Products","constraints":[]})
		expect(orm.constraints('Products.map(p => ({ category: p.category.name })).sort(p => p.category)')).toStrictEqual({"entity":"Products","constraints":[]})
		expect(orm.constraints('Products.map(p => ({ name: p.name, category: p.category.name })).sort(p => [p.category, p.name])')).toStrictEqual({"entity":"Products","constraints":[]})
		expect(orm.constraints('Products.map(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock })).sort(p => p.name)')).toStrictEqual({"entity":"Products","constraints":[]})
		expect(orm.constraints('Products.filter(p => p.discontinued !== false).map(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock })).sort(p => [p.category, desc(p.name)])')).toStrictEqual({"entity":"Products","constraints":[]})
		expect(orm.constraints('Orders.details.filter(p => between(p.order.shippedDate, fromDate, toDate) && p.unitPrice > minValue).map(p => ({ category: p.product.category.name, product: p.product.name, unitPrice: p.unitPrice, quantity: p.quantity }))')).toStrictEqual({"entity":"Orders.details","constraints":[]})
		expect(orm.constraints('Orders.details.filter(p => between(p.order.shippedDate, fromDate, toDate) && p.unitPrice > minValue).map(p => ({ category: p.product.category.name, product: p.product.name, unitPrice: p.unitPrice, quantity: p.quantity })).sort(p => [p.category, p.product, p.unitPrice, p.quantity]) ')).toStrictEqual({"entity":"Orders.details","constraints":[]})
		expect(orm.constraints('Products.first(p => p)')).toStrictEqual({"entity":"Products","constraints":[]})
		expect(orm.constraints('Products.last(p => p)')).toStrictEqual({"entity":"Products","constraints":[]})
		expect(orm.constraints('Products.first(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock }))')).toStrictEqual({"entity":"Products","constraints":[]})
		expect(orm.constraints('Products.filter(p => p.discontinued !== false).last(p => p.id)')).toStrictEqual({"entity":"Products","constraints":[]})
		expect(orm.constraints('Products.distinct(p => p).sort(p => p.id)')).toStrictEqual({"entity":"Products","constraints":[]})
		expect(orm.constraints('Products.distinct(p => ({ category: p.category.name })).sort(p => p.category)')).toStrictEqual({"entity":"Products","constraints":[]})
		expect(orm.constraints('Products.distinct(p => ({ quantity: p.quantity, category: p.category.name })).sort(p => [p.quantity, p.category])')).toStrictEqual({"entity":"Products","constraints":[]})
		expect(orm.constraints('Orders.filter(p => p.id === id).map(p => [p,p.customer,p.details])')).toStrictEqual({"entity":"Orders","constraints":[]})
		expect(orm.constraints('Orders.filter(p => p.id === id).map(p => [p,p.customer,p.employee])')).toStrictEqual({"entity":"Orders","constraints":[]})
		expect(orm.constraints('Orders.filter(p => p.id === id).map(p => [p.name,p.customer,p.employee])')).toStrictEqual({"entity":"Orders","constraints":[]})
		expect(orm.constraints('Orders.filter(p => p.id === id).map(p => [p.name,p.customer])')).toStrictEqual({"entity":"Orders","constraints":[]})
	})
	test('metadata', () => {
		expect(orm.metadata('Products.sort(p => p.name)')).toEqual({"classtype":"Sentence","pos":{"ln":0,"col":14},"name":"select","children":[],"type":"any","entity":"Products","columns":[{"name":"id","type":"integer"},{"name":"name","type":"string"},{"name":"supplierId","type":"integer"},{"name":"categoryId","type":"integer"},{"name":"quantity","type":"string"},{"name":"price","type":"decimal"},{"name":"inStock","type":"decimal"},{"name":"onOrder","type":"decimal"},{"name":"reorderLevel","type":"decimal"},{"name":"discontinued","type":"boolean"}],"parameters":[],"constraints":[],"values":[],"defaults":[],"clause":"select","alias":"p"})
		expect(orm.metadata('Products.map(p => p).sort(p => p.id).page(1, 1)')).toEqual({"classtype":"Sentence","pos":{"ln":0,"col":42},"name":"select","children":[],"type":"any","entity":"Products","columns":[{"name":"id","type":"integer"},{"name":"name","type":"string"},{"name":"supplierId","type":"integer"},{"name":"categoryId","type":"integer"},{"name":"quantity","type":"string"},{"name":"price","type":"decimal"},{"name":"inStock","type":"decimal"},{"name":"onOrder","type":"decimal"},{"name":"reorderLevel","type":"decimal"},{"name":"discontinued","type":"boolean"}],"parameters":[],"constraints":[],"values":[],"defaults":[],"clause":"select","alias":"p"})
		expect(orm.metadata('Products.sort(p => p.id).page(1, 1)')).toEqual({"classtype":"Sentence","pos":{"ln":0,"col":30},"name":"select","children":[],"type":"any","entity":"Products","columns":[{"name":"id","type":"integer"},{"name":"name","type":"string"},{"name":"supplierId","type":"integer"},{"name":"categoryId","type":"integer"},{"name":"quantity","type":"string"},{"name":"price","type":"decimal"},{"name":"inStock","type":"decimal"},{"name":"onOrder","type":"decimal"},{"name":"reorderLevel","type":"decimal"},{"name":"discontinued","type":"boolean"}],"parameters":[],"constraints":[],"values":[],"defaults":[],"clause":"select","alias":"p"})
		expect(orm.metadata('Products.filter(p => p.id === id).map(p => p).sort(p => p.id)')).toEqual({"classtype":"Sentence","pos":{"ln":0,"col":51},"name":"select","children":[],"type":"any","entity":"Products","columns":[{"name":"id","type":"integer"},{"name":"name","type":"string"},{"name":"supplierId","type":"integer"},{"name":"categoryId","type":"integer"},{"name":"quantity","type":"string"},{"name":"price","type":"decimal"},{"name":"inStock","type":"decimal"},{"name":"onOrder","type":"decimal"},{"name":"reorderLevel","type":"decimal"},{"name":"discontinued","type":"boolean"}],"parameters":[{"name":"id","type":"integer"}],"constraints":[],"values":[],"defaults":[],"clause":"select","alias":"p"})
		expect(orm.metadata('Products.filter(p => p.id === id).sort(p => p.id) ')).toEqual({"classtype":"Sentence","pos":{"ln":0,"col":39},"name":"select","children":[],"type":"any","entity":"Products","columns":[{"name":"id","type":"integer"},{"name":"name","type":"string"},{"name":"supplierId","type":"integer"},{"name":"categoryId","type":"integer"},{"name":"quantity","type":"string"},{"name":"price","type":"decimal"},{"name":"inStock","type":"decimal"},{"name":"onOrder","type":"decimal"},{"name":"reorderLevel","type":"decimal"},{"name":"discontinued","type":"boolean"}],"parameters":[{"name":"id","type":"integer"}],"constraints":[],"values":[],"defaults":[],"clause":"select","alias":"p"})
		expect(orm.metadata('Products.map(p => ({ category: p.category.name })).sort(p => p.category)')).toEqual({"classtype":"Sentence","pos":{"ln":0,"col":56},"name":"select","children":[],"type":"any","entity":"Products","columns":[{"name":"category","type":"string"}],"parameters":[],"constraints":[],"values":[],"defaults":[],"clause":"select","alias":"p"})
		expect(orm.metadata('Products.map(p => ({ name: p.name, category: p.category.name })).sort(p => [p.category, p.name])')).toEqual({"classtype":"Sentence","pos":{"ln":0,"col":70},"name":"select","children":[],"type":"any","entity":"Products","columns":[{"name":"name","type":"string"},{"name":"category","type":"string"}],"parameters":[],"constraints":[],"values":[],"defaults":[],"clause":"select","alias":"p"})
		expect(orm.metadata('Products.map(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock })).sort(p => p.name)')).toEqual({"classtype":"Sentence","pos":{"ln":0,"col":112},"name":"select","children":[],"type":"any","entity":"Products","columns":[{"name":"category","type":"string"},{"name":"name","type":"string"},{"name":"quantity","type":"string"},{"name":"inStock","type":"decimal"}],"parameters":[],"constraints":[],"values":[],"defaults":[],"clause":"select","alias":"p"})
		expect(orm.metadata('Products.filter(p => p.discontinued !== false).map(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock })).sort(p => [p.category, desc(p.name)])')).toEqual({"classtype":"Sentence","pos":{"ln":0,"col":150},"name":"select","children":[],"type":"any","entity":"Products","columns":[{"name":"category","type":"string"},{"name":"name","type":"string"},{"name":"quantity","type":"string"},{"name":"inStock","type":"decimal"}],"parameters":[],"constraints":[],"values":[],"defaults":[],"clause":"select","alias":"p"})
		expect(orm.metadata('Orders.details.filter(p => between(p.order.shippedDate, fromDate, toDate) && p.unitPrice > minValue).map(p => ({ category: p.product.category.name, product: p.product.name, unitPrice: p.unitPrice, quantity: p.quantity }))')).toEqual({"classtype":"Sentence","pos":{"ln":0,"col":105},"name":"select","children":[],"type":"any","entity":"Orders.details","columns":[{"name":"category","type":"string"},{"name":"product","type":"string"},{"name":"unitPrice","type":"decimal"},{"name":"quantity","type":"decimal"}],"parameters":[{"name":"fromDate","type":"date"},{"name":"toDate","type":"date"},{"name":"minValue","type":"decimal"}],"constraints":[],"values":[],"defaults":[],"clause":"select","alias":"o"})
		expect(orm.metadata('Orders.details.filter(p => between(p.order.shippedDate, fromDate, toDate) && p.unitPrice > minValue).map(p => ({ category: p.product.category.name, product: p.product.name, unitPrice: p.unitPrice, quantity: p.quantity })).sort(p => [p.category, p.product, p.unitPrice, p.quantity]) ')).toEqual({"classtype":"Sentence","pos":{"ln":0,"col":227},"name":"select","children":[],"type":"any","entity":"Orders.details","columns":[{"name":"category","type":"string"},{"name":"product","type":"string"},{"name":"unitPrice","type":"decimal"},{"name":"quantity","type":"decimal"}],"parameters":[{"name":"fromDate","type":"date"},{"name":"toDate","type":"date"},{"name":"minValue","type":"decimal"}],"constraints":[],"values":[],"defaults":[],"clause":"select","alias":"o"})
		expect(orm.metadata('Products.first(p => p)')).toEqual({"classtype":"Sentence","pos":{"ln":0,"col":15},"name":"select","children":[],"type":"any","entity":"Products","columns":[{"name":"id","type":"integer"},{"name":"name","type":"string"},{"name":"supplierId","type":"integer"},{"name":"categoryId","type":"integer"},{"name":"quantity","type":"string"},{"name":"price","type":"decimal"},{"name":"inStock","type":"decimal"},{"name":"onOrder","type":"decimal"},{"name":"reorderLevel","type":"decimal"},{"name":"discontinued","type":"boolean"}],"parameters":[],"constraints":[],"values":[],"defaults":[],"clause":"select","alias":"p"})
		expect(orm.metadata('Products.last(p => p)')).toEqual({"classtype":"Sentence","pos":{"ln":0,"col":14},"name":"select","children":[],"type":"any","entity":"Products","columns":[{"name":"id","type":"integer"},{"name":"name","type":"string"},{"name":"supplierId","type":"integer"},{"name":"categoryId","type":"integer"},{"name":"quantity","type":"string"},{"name":"price","type":"decimal"},{"name":"inStock","type":"decimal"},{"name":"onOrder","type":"decimal"},{"name":"reorderLevel","type":"decimal"},{"name":"discontinued","type":"boolean"}],"parameters":[],"constraints":[],"values":[],"defaults":[],"clause":"select","alias":"p"})
		expect(orm.metadata('Products.first(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock }))')).toEqual({"classtype":"Sentence","pos":{"ln":0,"col":15},"name":"select","children":[],"type":"any","entity":"Products","columns":[{"name":"category","type":"string"},{"name":"name","type":"string"},{"name":"quantity","type":"string"},{"name":"inStock","type":"decimal"}],"parameters":[],"constraints":[],"values":[],"defaults":[],"clause":"select","alias":"p"})
		expect(orm.metadata('Products.filter(p => p.discontinued !== false).last(p => p.id)')).toEqual({"classtype":"Sentence","pos":{"ln":0,"col":52},"name":"select","children":[],"type":"any","entity":"Products","columns":[{"name":"id","type":"integer"}],"parameters":[],"constraints":[],"values":[],"defaults":[],"clause":"select","alias":"p"})
		expect(orm.metadata('Products.distinct(p => p).sort(p => p.id)')).toEqual({"classtype":"Sentence","pos":{"ln":0,"col":31},"name":"select","children":[],"type":"any","entity":"Products","columns":[{"name":"id","type":"integer"},{"name":"name","type":"string"},{"name":"supplierId","type":"integer"},{"name":"categoryId","type":"integer"},{"name":"quantity","type":"string"},{"name":"price","type":"decimal"},{"name":"inStock","type":"decimal"},{"name":"onOrder","type":"decimal"},{"name":"reorderLevel","type":"decimal"},{"name":"discontinued","type":"boolean"}],"parameters":[],"constraints":[],"values":[],"defaults":[],"clause":"select","alias":"p"})
		expect(orm.metadata('Products.distinct(p => ({ category: p.category.name })).sort(p => p.category)')).toEqual({"classtype":"Sentence","pos":{"ln":0,"col":61},"name":"select","children":[],"type":"any","entity":"Products","columns":[{"name":"category","type":"string"}],"parameters":[],"constraints":[],"values":[],"defaults":[],"clause":"select","alias":"p"})
		expect(orm.metadata('Products.distinct(p => ({ quantity: p.quantity, category: p.category.name })).sort(p => [p.quantity, p.category])')).toEqual({"classtype":"Sentence","pos":{"ln":0,"col":83},"name":"select","children":[],"type":"any","entity":"Products","columns":[{"name":"quantity","type":"string"},{"name":"category","type":"string"}],"parameters":[],"constraints":[],"values":[],"defaults":[],"clause":"select","alias":"p"})
		expect(orm.metadata('Orders.filter(p => p.id === id).map(p => [p,p.customer,p.details])')).toEqual({"classtype":"Sentence","pos":{"ln":0,"col":36},"name":"select","children":[],"type":"any","entity":"Orders","columns":[{"name":"id","type":"integer"},{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"dateTime"},{"name":"requiredDate","type":"date"},{"name":"shippedDate","type":"date"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"},{"name":"customer.id","type":"string"},{"name":"customer.name","type":"string"},{"name":"customer.contact","type":"string"},{"name":"customer.phone","type":"string"},{"name":"customer.address","type":"string"},{"name":"customer.city","type":"string"},{"name":"customer.region","type":"string"},{"name":"customer.postalCode","type":"string"},{"name":"customer.country","type":"string"},{"name":"details.orderId","type":"integer"},{"name":"details.productId","type":"integer"},{"name":"details.unitPrice","type":"decimal"},{"name":"details.quantity","type":"decimal"},{"name":"details.discount","type":"decimal"}],"parameters":[{"name":"id","type":"integer"}],"constraints":[],"values":[],"defaults":[],"clause":"select","alias":"o"})
		expect(orm.metadata('Orders.filter(p => p.id === id).map(p => [p,p.customer,p.employee])')).toEqual({"classtype":"Sentence","pos":{"ln":0,"col":36},"name":"select","children":[],"type":"any","entity":"Orders","columns":[{"name":"id","type":"integer"},{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"dateTime"},{"name":"requiredDate","type":"date"},{"name":"shippedDate","type":"date"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"},{"name":"customer.id","type":"string"},{"name":"customer.name","type":"string"},{"name":"customer.contact","type":"string"},{"name":"customer.phone","type":"string"},{"name":"customer.address","type":"string"},{"name":"customer.city","type":"string"},{"name":"customer.region","type":"string"},{"name":"customer.postalCode","type":"string"},{"name":"customer.country","type":"string"},{"name":"employee.id","type":"integer"},{"name":"employee.lastName","type":"string"},{"name":"employee.firstName","type":"string"},{"name":"employee.title","type":"string"},{"name":"employee.titleOfCourtesy","type":"string"},{"name":"employee.birthDate","type":"dateTime"},{"name":"employee.hireDate","type":"dateTime"},{"name":"employee.phone","type":"string"},{"name":"employee.reportsToId","type":"integer"},{"name":"employee.address","type":"string"},{"name":"employee.city","type":"string"},{"name":"employee.region","type":"string"},{"name":"employee.postalCode","type":"string"},{"name":"employee.country","type":"string"}],"parameters":[{"name":"id","type":"integer"}],"constraints":[],"values":[],"defaults":[],"clause":"select","alias":"o"})
		expect(orm.metadata('Orders.filter(p => p.id === id).map(p => [p.name,p.customer,p.employee])')).toEqual({"classtype":"Sentence","pos":{"ln":0,"col":36},"name":"select","children":[],"type":"any","entity":"Orders","columns":[{"name":"name","type":"string"},{"name":"customer.id","type":"string"},{"name":"customer.name","type":"string"},{"name":"customer.contact","type":"string"},{"name":"customer.phone","type":"string"},{"name":"customer.address","type":"string"},{"name":"customer.city","type":"string"},{"name":"customer.region","type":"string"},{"name":"customer.postalCode","type":"string"},{"name":"customer.country","type":"string"},{"name":"employee.id","type":"integer"},{"name":"employee.lastName","type":"string"},{"name":"employee.firstName","type":"string"},{"name":"employee.title","type":"string"},{"name":"employee.titleOfCourtesy","type":"string"},{"name":"employee.birthDate","type":"dateTime"},{"name":"employee.hireDate","type":"dateTime"},{"name":"employee.phone","type":"string"},{"name":"employee.reportsToId","type":"integer"},{"name":"employee.address","type":"string"},{"name":"employee.city","type":"string"},{"name":"employee.region","type":"string"},{"name":"employee.postalCode","type":"string"},{"name":"employee.country","type":"string"}],"parameters":[{"name":"id","type":"integer"}],"constraints":[],"values":[],"defaults":[],"clause":"select","alias":"o"})
		expect(orm.metadata('Orders.filter(p => p.id === id).map(p => [p.name,p.customer])')).toEqual({"classtype":"Sentence","pos":{"ln":0,"col":36},"name":"select","children":[],"type":"any","entity":"Orders","columns":[{"name":"name","type":"string"},{"name":"customer.id","type":"string"},{"name":"customer.name","type":"string"},{"name":"customer.contact","type":"string"},{"name":"customer.phone","type":"string"},{"name":"customer.address","type":"string"},{"name":"customer.city","type":"string"},{"name":"customer.region","type":"string"},{"name":"customer.postalCode","type":"string"},{"name":"customer.country","type":"string"}],"parameters":[{"name":"id","type":"integer"}],"constraints":[],"values":[],"defaults":[],"clause":"select","alias":"o"})
	})
	test('getInfo', () => {
		expect(orm.plan('Products.sort(p => p.name)',{ stage: 'MySQL' })).toStrictEqual({"entity":"Products","dialect":"MySQL","source":"MySQL","sentence":"SELECT p.ProductID AS id, p.ProductName AS name, p.SupplierID AS supplierId, p.CategoryID AS categoryId, p.QuantityPerUnit AS quantity, p.UnitPrice AS price, p.UnitsInStock AS inStock, p.UnitsOnOrder AS onOrder, p.ReorderLevel AS reorderLevel, p.Discontinued AS discontinued FROM Products p  ORDER BY p.ProductName asc "})
		expect(orm.plan('Products.map(p => p).sort(p => p.id).page(1, 1)',{ stage: 'MySQL' })).toStrictEqual({"entity":"Products","dialect":"MySQL","source":"MySQL","sentence":"SELECT p.ProductID AS id, p.ProductName AS name, p.SupplierID AS supplierId, p.CategoryID AS categoryId, p.QuantityPerUnit AS quantity, p.UnitPrice AS price, p.UnitsInStock AS inStock, p.UnitsOnOrder AS onOrder, p.ReorderLevel AS reorderLevel, p.Discontinued AS discontinued FROM Products p  ORDER BY p.ProductID asc  LIMIT 0,1 "})
		expect(orm.plan('Products.sort(p => p.id).page(1, 1)',{ stage: 'MySQL' })).toStrictEqual({"entity":"Products","dialect":"MySQL","source":"MySQL","sentence":"SELECT p.ProductID AS id, p.ProductName AS name, p.SupplierID AS supplierId, p.CategoryID AS categoryId, p.QuantityPerUnit AS quantity, p.UnitPrice AS price, p.UnitsInStock AS inStock, p.UnitsOnOrder AS onOrder, p.ReorderLevel AS reorderLevel, p.Discontinued AS discontinued FROM Products p  ORDER BY p.ProductID asc  LIMIT 0,1 "})
		expect(orm.plan('Products.filter(p => p.id === id).map(p => p).sort(p => p.id)',{ stage: 'MySQL' })).toStrictEqual({"entity":"Products","dialect":"MySQL","source":"MySQL","sentence":"SELECT p.ProductID AS id, p.ProductName AS name, p.SupplierID AS supplierId, p.CategoryID AS categoryId, p.QuantityPerUnit AS quantity, p.UnitPrice AS price, p.UnitsInStock AS inStock, p.UnitsOnOrder AS onOrder, p.ReorderLevel AS reorderLevel, p.Discontinued AS discontinued FROM Products p  WHERE p.ProductID = ? ORDER BY p.ProductID asc "})
		expect(orm.plan('Products.filter(p => p.id === id).sort(p => p.id) ',{ stage: 'MySQL' })).toStrictEqual({"entity":"Products","dialect":"MySQL","source":"MySQL","sentence":"SELECT p.ProductID AS id, p.ProductName AS name, p.SupplierID AS supplierId, p.CategoryID AS categoryId, p.QuantityPerUnit AS quantity, p.UnitPrice AS price, p.UnitsInStock AS inStock, p.UnitsOnOrder AS onOrder, p.ReorderLevel AS reorderLevel, p.Discontinued AS discontinued FROM Products p  WHERE p.ProductID = ? ORDER BY p.ProductID asc "})
		expect(orm.plan('Products.map(p => ({ category: p.category.name })).sort(p => p.category)',{ stage: 'MySQL' })).toStrictEqual({"entity":"Products","dialect":"MySQL","source":"MySQL","sentence":"SELECT c.CategoryName AS category FROM Products p INNER JOIN Categories c ON c.CategoryID = p.CategoryID ORDER BY category asc "})
		expect(orm.plan('Products.map(p => ({ name: p.name, category: p.category.name })).sort(p => [p.category, p.name])',{ stage: 'MySQL' })).toStrictEqual({"entity":"Products","dialect":"MySQL","source":"MySQL","sentence":"SELECT p.ProductName AS name, c.CategoryName AS category FROM Products p INNER JOIN Categories c ON c.CategoryID = p.CategoryID ORDER BY category asc, p.ProductName asc "})
		expect(orm.plan('Products.map(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock })).sort(p => p.name)',{ stage: 'MySQL' })).toStrictEqual({"entity":"Products","dialect":"MySQL","source":"MySQL","sentence":"SELECT c.CategoryName AS category, p.ProductName AS name, p.QuantityPerUnit AS quantity, p.UnitsInStock AS inStock FROM Products p INNER JOIN Categories c ON c.CategoryID = p.CategoryID ORDER BY p.ProductName asc "})
		expect(orm.plan('Products.filter(p => p.discontinued !== false).map(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock })).sort(p => [p.category, desc(p.name)])',{ stage: 'MySQL' })).toStrictEqual({"entity":"Products","dialect":"MySQL","source":"MySQL","sentence":"SELECT c.CategoryName AS category, p.ProductName AS name, p.QuantityPerUnit AS quantity, p.UnitsInStock AS inStock FROM Products p INNER JOIN Categories c ON c.CategoryID = p.CategoryID WHERE p.Discontinued <> FALSE ORDER BY category asc, p.ProductName desc "})
		expect(orm.plan('Orders.details.filter(p => between(p.order.shippedDate, fromDate, toDate) && p.unitPrice > minValue).map(p => ({ category: p.product.category.name, product: p.product.name, unitPrice: p.unitPrice, quantity: p.quantity }))',{ stage: 'MySQL' })).toStrictEqual({"entity":"Orders.details","dialect":"MySQL","source":"MySQL","sentence":"SELECT c.CategoryName AS category, p.ProductName AS product, o.UnitPrice AS unitPrice, o.Quantity AS quantity FROM `Order Details` o INNER JOIN Orders o1 ON o1.OrderID = o.OrderID INNER JOIN Products p ON p.ProductID = o.ProductID INNER JOIN Categories c ON c.CategoryID = p.CategoryID WHERE (o1.ShippedDate BETWEEN ? AND ? AND o.UnitPrice > ?) "})
		expect(orm.plan('Orders.details.filter(p => between(p.order.shippedDate, fromDate, toDate) && p.unitPrice > minValue).map(p => ({ category: p.product.category.name, product: p.product.name, unitPrice: p.unitPrice, quantity: p.quantity })).sort(p => [p.category, p.product, p.unitPrice, p.quantity]) ',{ stage: 'MySQL' })).toStrictEqual({"entity":"Orders.details","dialect":"MySQL","source":"MySQL","sentence":"SELECT c.CategoryName AS category, p.ProductName AS product, o.UnitPrice AS unitPrice, o.Quantity AS quantity FROM `Order Details` o INNER JOIN Orders o1 ON o1.OrderID = o.OrderID INNER JOIN Products p ON p.ProductID = o.ProductID INNER JOIN Categories c ON c.CategoryID = p.CategoryID WHERE (o1.ShippedDate BETWEEN ? AND ? AND o.UnitPrice > ?) ORDER BY category asc, product asc, o.UnitPrice asc, o.Quantity asc "})
		expect(orm.plan('Products.first(p => p)',{ stage: 'MySQL' })).toStrictEqual({"entity":"Products","dialect":"MySQL","source":"MySQL","sentence":"SELECT p.ProductID AS id, p.ProductName AS name, p.SupplierID AS supplierId, p.CategoryID AS categoryId, p.QuantityPerUnit AS quantity, p.UnitPrice AS price, p.UnitsInStock AS inStock, p.UnitsOnOrder AS onOrder, p.ReorderLevel AS reorderLevel, p.Discontinued AS discontinued FROM Products p  ORDER BY p.ProductID asc  LIMIT 0,1 "})
		expect(orm.plan('Products.last(p => p)',{ stage: 'MySQL' })).toStrictEqual({"entity":"Products","dialect":"MySQL","source":"MySQL","sentence":"SELECT p.ProductID AS id, p.ProductName AS name, p.SupplierID AS supplierId, p.CategoryID AS categoryId, p.QuantityPerUnit AS quantity, p.UnitPrice AS price, p.UnitsInStock AS inStock, p.UnitsOnOrder AS onOrder, p.ReorderLevel AS reorderLevel, p.Discontinued AS discontinued FROM Products p  ORDER BY p.ProductID desc  LIMIT 0,1 "})
		expect(orm.plan('Products.first(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock }))',{ stage: 'MySQL' })).toStrictEqual({"entity":"Products","dialect":"MySQL","source":"MySQL","sentence":"SELECT c.CategoryName AS category, p.ProductName AS name, p.QuantityPerUnit AS quantity, p.UnitsInStock AS inStock FROM Products p INNER JOIN Categories c ON c.CategoryID = p.CategoryID ORDER BY category asc  LIMIT 0,1 "})
		expect(orm.plan('Products.filter(p => p.discontinued !== false).last(p => p.id)',{ stage: 'MySQL' })).toStrictEqual({"entity":"Products","dialect":"MySQL","source":"MySQL","sentence":"SELECT p.ProductID AS id FROM Products p  WHERE p.Discontinued <> FALSE ORDER BY p.ProductID desc  LIMIT 0,1 "})
		expect(orm.plan('Products.distinct(p => p).sort(p => p.id)',{ stage: 'MySQL' })).toStrictEqual({"entity":"Products","dialect":"MySQL","source":"MySQL","sentence":"SELECT DISTINCT p.ProductID AS id, p.ProductName AS name, p.SupplierID AS supplierId, p.CategoryID AS categoryId, p.QuantityPerUnit AS quantity, p.UnitPrice AS price, p.UnitsInStock AS inStock, p.UnitsOnOrder AS onOrder, p.ReorderLevel AS reorderLevel, p.Discontinued AS discontinued FROM Products p  ORDER BY p.ProductID asc "})
		expect(orm.plan('Products.distinct(p => ({ category: p.category.name })).sort(p => p.category)',{ stage: 'MySQL' })).toStrictEqual({"entity":"Products","dialect":"MySQL","source":"MySQL","sentence":"SELECT DISTINCT c.CategoryName AS category FROM Products p INNER JOIN Categories c ON c.CategoryID = p.CategoryID ORDER BY category asc "})
		expect(orm.plan('Products.distinct(p => ({ quantity: p.quantity, category: p.category.name })).sort(p => [p.quantity, p.category])',{ stage: 'MySQL' })).toStrictEqual({"entity":"Products","dialect":"MySQL","source":"MySQL","sentence":"SELECT DISTINCT p.QuantityPerUnit AS quantity, c.CategoryName AS category FROM Products p INNER JOIN Categories c ON c.CategoryID = p.CategoryID ORDER BY p.QuantityPerUnit asc, category asc "})
		expect(orm.plan('Orders.filter(p => p.id === id).map(p => [p,p.customer,p.details])',{ stage: 'MySQL' })).toStrictEqual({"entity":"Orders","dialect":"MySQL","source":"MySQL","sentence":"SELECT o.OrderID AS id, o.CustomerID AS customerId, o.EmployeeID AS employeeId, o.OrderDate AS orderDate, o.RequiredDate AS requiredDate, o.ShippedDate AS shippedDate, o.ShipVia AS shipViaId, o.Freight AS freight, o.ShipName AS name, o.ShipAddress AS address, o.ShipCity AS city, o.ShipRegion AS region, o.ShipPostalCode AS postalCode, o.ShipCountry AS country, c.CustomerID AS `customer.id`, c.CompanyName AS `customer.name`, c.ContactName AS `customer.contact`, c.ContactTitle AS `customer.phone`, c.Address AS `customer.address`, c.City AS `customer.city`, c.Region AS `customer.region`, c.PostalCode AS `customer.postalCode`, c.Country AS `customer.country`, d.OrderID AS `details.orderId`, d.ProductID AS `details.productId`, d.UnitPrice AS `details.unitPrice`, d.Quantity AS `details.quantity`, d.Discount AS `details.discount` FROM Orders o INNER JOIN Customers c ON c.CustomerID = o.CustomerID INNER JOIN `Order Details` d ON d.OrderID = o.OrderID WHERE o.OrderID = ? "})
		expect(orm.plan('Orders.filter(p => p.id === id).map(p => [p,p.customer,p.employee])',{ stage: 'MySQL' })).toStrictEqual({"entity":"Orders","dialect":"MySQL","source":"MySQL","sentence":"SELECT o.OrderID AS id, o.CustomerID AS customerId, o.EmployeeID AS employeeId, o.OrderDate AS orderDate, o.RequiredDate AS requiredDate, o.ShippedDate AS shippedDate, o.ShipVia AS shipViaId, o.Freight AS freight, o.ShipName AS name, o.ShipAddress AS address, o.ShipCity AS city, o.ShipRegion AS region, o.ShipPostalCode AS postalCode, o.ShipCountry AS country, c.CustomerID AS `customer.id`, c.CompanyName AS `customer.name`, c.ContactName AS `customer.contact`, c.ContactTitle AS `customer.phone`, c.Address AS `customer.address`, c.City AS `customer.city`, c.Region AS `customer.region`, c.PostalCode AS `customer.postalCode`, c.Country AS `customer.country`, e.EmployeeID AS `employee.id`, e.LastName AS `employee.lastName`, e.FirstName AS `employee.firstName`, e.Title AS `employee.title`, e.TitleOfCourtesy AS `employee.titleOfCourtesy`, e.BirthDate AS `employee.birthDate`, e.HireDate AS `employee.hireDate`, e.HomePhone AS `employee.phone`, e.ReportsTo AS `employee.reportsToId`, e.Address AS `employee.address`, e.City AS `employee.city`, e.Region AS `employee.region`, e.PostalCode AS `employee.postalCode`, e.Country AS `employee.country` FROM Orders o INNER JOIN Customers c ON c.CustomerID = o.CustomerID INNER JOIN Employees e ON e.EmployeeID = o.EmployeeID WHERE o.OrderID = ? "})
		expect(orm.plan('Orders.filter(p => p.id === id).map(p => [p.name,p.customer,p.employee])',{ stage: 'MySQL' })).toStrictEqual({"entity":"Orders","dialect":"MySQL","source":"MySQL","sentence":"SELECT o.ShipName AS name, c.CustomerID AS `customer.id`, c.CompanyName AS `customer.name`, c.ContactName AS `customer.contact`, c.ContactTitle AS `customer.phone`, c.Address AS `customer.address`, c.City AS `customer.city`, c.Region AS `customer.region`, c.PostalCode AS `customer.postalCode`, c.Country AS `customer.country`, e.EmployeeID AS `employee.id`, e.LastName AS `employee.lastName`, e.FirstName AS `employee.firstName`, e.Title AS `employee.title`, e.TitleOfCourtesy AS `employee.titleOfCourtesy`, e.BirthDate AS `employee.birthDate`, e.HireDate AS `employee.hireDate`, e.HomePhone AS `employee.phone`, e.ReportsTo AS `employee.reportsToId`, e.Address AS `employee.address`, e.City AS `employee.city`, e.Region AS `employee.region`, e.PostalCode AS `employee.postalCode`, e.Country AS `employee.country` FROM Orders o INNER JOIN Customers c ON c.CustomerID = o.CustomerID INNER JOIN Employees e ON e.EmployeeID = o.EmployeeID WHERE o.OrderID = ? "})
		expect(orm.plan('Orders.filter(p => p.id === id).map(p => [p.name,p.customer])',{ stage: 'MySQL' })).toStrictEqual({"entity":"Orders","dialect":"MySQL","source":"MySQL","sentence":"SELECT o.ShipName AS name, c.CustomerID AS `customer.id`, c.CompanyName AS `customer.name`, c.ContactName AS `customer.contact`, c.ContactTitle AS `customer.phone`, c.Address AS `customer.address`, c.City AS `customer.city`, c.Region AS `customer.region`, c.PostalCode AS `customer.postalCode`, c.Country AS `customer.country` FROM Orders o INNER JOIN Customers c ON c.CustomerID = o.CustomerID WHERE o.OrderID = ? "})
	})
})
