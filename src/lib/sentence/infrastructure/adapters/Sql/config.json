{
  "SQL": {
    "dbTypes": {
      "boolean": "BOOLEAN",
      "integer": "INTEGER",
      "decimal": "DECIMAL(10,4)",
      "string": "VARCHAR({0})",
      "dateTime": "DATETIME",
      "date": "DATE",
      "time": "TIME",
      "text": "TEXT"
    },
    "format": {
      "dateTime": "yyyy-LL-dd HH:mm:ss",
      "date": "yyyy-LL-dd",
      "time": "HH:mm:ss"
    },
    "ddl": {
      "createDatabase": "CREATE DATABASE IF NOT EXISTS {name}",
      "createEntity": "CREATE TABLE {name} ({define})",
      "createSequence": "CREATE SEQUENCE {name} START WITH 1 INCREMENT BY 1 MAXVALUE 999999999999 MINVALUE 1",
      "incrementalColumDefine": "{name} {type} {required} AUTO_INCREMENT",
      "columnDefine": "{name} {type} {required} ",
      "createPk": "CONSTRAINT {name} PRIMARY KEY ({columns})",
      "createUk": "CONSTRAINT {name} UNIQUE ({columns})",
      "createFk": "CONSTRAINT {name} FOREIGN KEY ({column}) REFERENCES {fTable} ({fColumn})",
      "createIndex": "CREATE INDEX {name} ON {table} ({columns})",
      "alterTable": "ALTER TABLE {name}",
      "addProperty": "ADD {columnDefine}",
      "addPk": "ADD CONSTRAINT {name} PRIMARY KEY ({columns})",
      "addUk": "ADD CONSTRAINT {name} UNIQUE ({columns})",
      "addFk": "ADD CONSTRAINT {name} FOREIGN KEY ({column}) REFERENCES {fTable} ({fColumn})",
      "alterProperty": "MODIFY {columnDefine}",
      "alterPropertyType": "({name} {type})",
      "alterPropertyNullable": "({name} NULL)",
      "alterPropertyNotNullable": "({name} NOT NULL)",
      "dropDatabase": "DROP DATABASE IF EXISTS {name}",
      "dropEntity": "DROP TABLE IF EXISTS {name}",
      "dropSequence": "DROP SEQUENCE {name}",
      "dropProperty": "DROP COLUMN {name}",
      "dropPk": "DROP PRIMARY KEY {name}",
      "dropUk": "DROP UNIQUE {name}",
      "dropFk": "DROP FOREIGN KEY {name}",
      "dropIndex": "DROP INDEX {name} ON {table}",
      "truncateEntity": "TRUNCATE TABLE {name}"
    },
    "dml": {
      "map": "SELECT {0}",
      "select": "SELECT {0}",
      "distinct": "SELECT DISTINCT {0}",
      "filter": "WHERE {0}",
      "where": "WHERE {0}",
      "groupBy": "GROUP BY {0}",
      "having": "HAVING {0}",
      "sort": "ORDER BY {0}",
      "order": "ORDER BY {0}",
      "page": "{sentence} LIMIT {offset},{records}",
      "insert": "INSERT INTO {name}({fields}) VALUES({values})",
      "update": "UPDATE {name} {alias} SET {assigns}",
      "remove": "DELETE FROM {name} {alias}",
      "delete": "DELETE FROM {name} {alias}",
      "bulkInsert": "INSERT INTO {name}({fields}) VALUES {values}",
      "from": "FROM {name} {alias} ",
      "join": "INNER JOIN {name} {alias} ON {relation}"
    },
    "others": {
      "delimiter": "\"{name}\"",
      "string": "'{name}'",
      "separatorSql": ";",
      "notNullable": "NOT NULL",
      "variable": ":{name}",
      "field": "{entityAlias}.{name}",
      "column": "{name}",
      "false": "FALSE",
      "true": "TRUE",
      "null": "NULL",
      "sequenceNextVal": "{name}.nextval",
      "solveComposite": false
    },
    "operators": {
      "unary": {
        "-": "- {0}",
        "~": "~ {0}",
        "!": "NOT {0}"
      },
      "binary": {
        "+": "({0} + {1})",
        "-": "({0} - {1})",
        "*": "({0} * {1})",
        "/": "({0} / {1})",
        "**": "POWER({0},{1})",
        "//": "POWER({0},(1/{1}))",
        "%": "MOD({0},{1})",
        "&": "{0} & {1}",
        "|": "{0} | {1}",
        "^": "{0} ^ {1}",
        "<<": "{0} << {1}",
        ">>": "{0} >> {1}",
        "==": "{0} = {1}",
        "===": "{0} = {1}",
        "!=": "{0} <> {1}",
        "!==": "{0} <> {1}",
        ">": "{0} > {1}",
        "<": "{0} < {1}",
        ">=": "{0} >= {1}",
        "<=": "{0} <= {1}",
        "&&": "({0} AND {1})",
        "||": "({0} OR {1})",
        "[]": "N/A",
        "=": "{0} = {1}",
        "+=": "{0} = ({0} + {1})",
        "-=": "{0} = ({0} - {1})",
        "*=": "{0} = ({0} * {1})",
        "/=": "{0} = ({0} / {1})",
        "**=": "{0} = POWER({0},{1})",
        "//=": "{0} = POWER({0},(1/{1}))",
        "%=": "{0} = MOD({0},{1})",
        "&=": "{0} = {0} & {1} ",
        "|=": "{0} = {0} | {1}",
        "^=": "{0} = {0} ^ {1}",
        "<<=": "{0} = {0} << {1}",
        ">>=": "{0} = {0} >> {1}"
      },
      "ternary": {
        "?": "IF {0} THEN {1} ELSE {2} END"
      }
    },
    "functions": {
      "general": {
        "as": "{value} AS {alias}",
        "desc": "{0} desc",
        "asc": "{0} asc",
        "between": "{0} BETWEEN {1} AND {2}",
        "includes": " {1} IN ({0})",
        "contains": " {1} IN ({0})",
        "in": " {0} IN ({1})",
        "distinct": "DISTINCT {0} "
      },
      "numeric": {
        "abs": "ABS({0})",
        "acos": "ACOS({0})",
        "asin": "ASIN({0})",
        "atan": "ATAN({0})",
        "atan2": "ATAN2({0},{1})",
        "ceil": "CEIL({0})",
        "cos": "COS({0})",
        "cosh": "COSH({0})",
        "exp": "EXP({0})",
        "floor": "FLOOR({0})",
        "ln": "LN({0})",
        "log10": "LOG10({0})",
        "log": "LOG({0},{1})",
        "remainder": "REMAINDER({0},{1})",
        "round": "ROUND({0},{1})",
        "sign": "SIGN({0})",
        "sin": "SIN({0})",
        "sinh": "SINH({0})",
        "tan": "TAN({0})",
        "tanh": "TANH({0})",
        "trunc": "TRUNC({0},{1})",
        "toNumber": "CAST({0} AS NUMBER)"
      },
      "string": {
        "chr": "CHR({0})",
        "initcap": "INITCAP({0})",
        "lower": "LOWER({0})",
        "lpad": "LPAD({0},{1},{2})",
        "ltrim": "LTRIM({0})",
        "regExpReplace": "REGEXP_REPLACE({0},{1})",
        "regExpSubstr": "REGEXP_SUBSTR({0},{1})",
        "replace": "REPLACE({0},{1},{2})",
        "rpad": "RPAD({0},{1},{2})",
        "rtrim": "RTRIM({0})",
        "substr": "SUBSTR({0},{1},{2})",
        "substring": "SUBSTR({0},{1},{2})",
        "strCount": "(LENGTH({0})-LENGTH(REPLACE({0},{1},'')))",
        "trim": "TRIM({0})",
        "upper": "UPPER({0})",
        "length": "LENGTH({0})",
        "mask": "Concat(LEFT({0},3),'***',RIGHT({0},3))",
        "parse": "json_value({0})",
        "toString": "CAST({0} AS VARCHAR2)",
        "like": "{0} LIKE {1}",
        "startsWith": "{0} LIKE '{1}%'",
        "startWith": "{0} LIKE '{1}%'",
        "includes": "{0} LIKE '%{1}%'"
      },
      "dateTime": {
        "now": "SYSTIMESTAMP",
        "curTime": "CAST(SYSTIMESTAMP AS TIME)",
        "today": "TRUNC(SYSDATE)",
        "dateTime": "CAST({0} AS TIMESTAMP)",
        "date": "CAST({0} AS DATE)",
        "time": "CAST({0} AS TIME)",
        "year": "EXTRACT(YEAR FROM {0})",
        "month": "EXTRACT(MONTH FROM {0})",
        "day": "DAY(DAY FROM {0})",
        "weekday": "TO_NUMBER(TO_CHAR({0}, 'D'))",
        "hour": "EXTRACT(HOUR FROM {0})",
        "minute": "EXTRACT(MINUTE FROM {0})",
        "second": "EXTRACT(SECOND FROM {0})",
        "millisecond": "EXTRACT(MILLISECOND FROM {0})",
        "addYear": "{0} + interval '{1}' YEAR",
        "addMonth": "ADD_MONTHS({0},{1})",
        "addDay": "{0} + {1}",
        "addHour": "{0} + interval '{1}' HOUR",
        "addMinute": "{0} + interval '{1}' MINUTE",
        "addSecond": "{0} + interval '{1}' SECOND",
        "addMillisecond": "{0} + interval '{1}' MILLISECOND",
        "addTime": "ADDTIME({0},{1})",
        "subtractTime": "SUBTIME({0},{1})",
        "dayDiff": "DATEDIFF({0},{1})",
        "hourDiff": "TIMESTAMPDIFF(HOUR,({0},{1})",
        "secondDiff": "TIMESTAMPDIFF(SECOND,({0},{1})",
        "millisecondDiff": "TIMESTAMPDIFF(MICROSECOND,({0},{1})",
        "dayToDate": "DATE_FORMAT(FROM_UNIXTIME({0}*24*3600*1000), '%Y-%m-%dT%TZ')",
        "hourToDate": "DATE_FORMAT(FROM_UNIXTIME({0}*3600*1000), '%Y-%m-%dT%TZ')",
        "secondToDate": "DATE_FORMAT(FROM_UNIXTIME({0}*1000), '%Y-%m-%dT%TZ')",
        "millisecondToDate": "DATE_FORMAT(FROM_UNIXTIME({0}), '%Y-%m-%dT%TZ')",
        "dateToString": "TO_CHAR({0},'YYYY-MM-DD\"T\"HH24:MI:SSTZH:TZM')"
      },
      "metadata": {
        "user": "USER",
        "source": "SYS_CONTEXT('USERENV','DB_NAME')"
      },
      "null": {
        "nvl": "NVL({0},{1})",
        "nvl2": "NVL2({0},{1},{2})",
        "isNull": "({0} IS NULL)",
        "isNotNull": "({0} IS NOT NULL)"
      },
      "multiple": {
        "concat": "{accumulated} || {value}"
      },
      "group": {
        "avg": "AVG({0})",
        "count": "COUNT({0})",
        "first": "FIRST({0})",
        "last": "LAST({0})",
        "max": "MAX({0})",
        "min": "MIN({0})",
        "sum": "SUM({0})"
      }
    }
  },
  "dialects": {
    "MariaDB": {
      "dbTypes": {
        "text": "LONGTEXT",
        "boolean": "BOOLEAN",
        "integer": "INTEGER",
        "decimal": "DECIMAL(10,4)",
        "string": "VARCHAR({0})",
        "dateTime": "DATETIME",
        "date": "DATE",
        "time": "TIME"
      },
      "ddl": {
        "dropIndex": "DROP INDEX {name} ON {table}",
        "createDatabase": "CREATE DATABASE IF NOT EXISTS {name}",
        "createEntity": "CREATE TABLE {name} ({define})",
        "createSequence": "CREATE SEQUENCE {name} START WITH 1 INCREMENT BY 1 MAXVALUE 999999999999 MINVALUE 1",
        "incrementalColumDefine": "{name} {type} {required} AUTO_INCREMENT",
        "columnDefine": "{name} {type} {required} ",
        "createPk": "CONSTRAINT {name} PRIMARY KEY ({columns})",
        "createUk": "CONSTRAINT {name} UNIQUE ({columns})",
        "createFk": "CONSTRAINT {name} FOREIGN KEY ({column}) REFERENCES {fTable} ({fColumn})",
        "createIndex": "CREATE INDEX {name} ON {table} ({columns})",
        "alterTable": "ALTER TABLE {name}",
        "addProperty": "ADD {columnDefine}",
        "addPk": "ADD CONSTRAINT {name} PRIMARY KEY ({columns})",
        "addUk": "ADD CONSTRAINT {name} UNIQUE ({columns})",
        "addFk": "ADD CONSTRAINT {name} FOREIGN KEY ({column}) REFERENCES {fTable} ({fColumn})",
        "alterProperty": "MODIFY {columnDefine}",
        "alterPropertyType": "({name} {type})",
        "alterPropertyNullable": "({name} NULL)",
        "alterPropertyNotNullable": "({name} NOT NULL)",
        "dropDatabase": "DROP DATABASE IF EXISTS {name}",
        "dropEntity": "DROP TABLE IF EXISTS {name}",
        "dropSequence": "DROP SEQUENCE {name}",
        "dropProperty": "DROP COLUMN {name}",
        "dropPk": "DROP PRIMARY KEY {name}",
        "dropUk": "DROP UNIQUE {name}",
        "dropFk": "DROP FOREIGN KEY {name}",
        "truncateEntity": "TRUNCATE TABLE {name}"
      },
      "dml": {
        "delete": "DELETE {alias} FROM {name} AS {alias}",
        "bulkInsert": "INSERT INTO {name}({fields}) VALUES ?",
        "map": "SELECT {0}",
        "select": "SELECT {0}",
        "distinct": "SELECT DISTINCT {0}",
        "filter": "WHERE {0}",
        "where": "WHERE {0}",
        "groupBy": "GROUP BY {0}",
        "having": "HAVING {0}",
        "sort": "ORDER BY {0}",
        "order": "ORDER BY {0}",
        "page": "{sentence} LIMIT {offset},{records}",
        "insert": "INSERT INTO {name}({fields}) VALUES({values})",
        "update": "UPDATE {name} {alias} SET {assigns}",
        "remove": "DELETE FROM {name} {alias}",
        "from": "FROM {name} {alias} ",
        "join": "INNER JOIN {name} {alias} ON {relation}"
      },
      "others": {
        "delimiter": "`{name}`",
        "variable": "?",
        "string": "'{name}'",
        "separatorSql": ";",
        "notNullable": "NOT NULL",
        "field": "{entityAlias}.{name}",
        "column": "{name}",
        "false": "FALSE",
        "true": "TRUE",
        "null": "NULL",
        "sequenceNextVal": "{name}.nextval",
        "solveComposite": false
      },
      "functions": {
        "numeric": {
          "atan2": "ATAN({0},{1})",
          "cosh": "((EXP({0}) + EXP(-{0})) / 2)",
          "remainder": "({0} - {1}*ROUND({0}/{1}))",
          "sinh": "((EXP({0}) - EXP(-{0})) / 2)",
          "tanh": "(EXP(2*{0}) - 1)/(EXP(2*{0}) + 1)",
          "trunc": "TRUNCATE({0},{1})",
          "toNumber": "CONVERT({0}, DECIMAL)",
          "abs": "ABS({0})",
          "acos": "ACOS({0})",
          "asin": "ASIN({0})",
          "atan": "ATAN({0})",
          "ceil": "CEIL({0})",
          "cos": "COS({0})",
          "exp": "EXP({0})",
          "floor": "FLOOR({0})",
          "ln": "LN({0})",
          "log10": "LOG10({0})",
          "log": "LOG({0},{1})",
          "round": "ROUND({0},{1})",
          "sign": "SIGN({0})",
          "sin": "SIN({0})",
          "tan": "TAN({0})"
        },
        "string": {
          "chr": "CHAR({0} USING ASCII)",
          "initcap": "INITCAP({0})",
          "length": "CHAR_LENGTH({0})",
          "toString": "CONVERT({0}, CHAR)",
          "parse": "CONVERT({0}, JSON)",
          "lower": "LOWER({0})",
          "lpad": "LPAD({0},{1},{2})",
          "ltrim": "LTRIM({0})",
          "regExpReplace": "REGEXP_REPLACE({0},{1})",
          "regExpSubstr": "REGEXP_SUBSTR({0},{1})",
          "replace": "REPLACE({0},{1},{2})",
          "rpad": "RPAD({0},{1},{2})",
          "rtrim": "RTRIM({0})",
          "substr": "SUBSTR({0},{1},{2})",
          "substring": "SUBSTR({0},{1},{2})",
          "strCount": "(LENGTH({0})-LENGTH(REPLACE({0},{1},'')))",
          "trim": "TRIM({0})",
          "upper": "UPPER({0})",
          "mask": "Concat(LEFT({0},3),'***',RIGHT({0},3))",
          "like": "{0} LIKE {1}",
          "startsWith": "{0} LIKE '{1}%'",
          "startWith": "{0} LIKE '{1}%'",
          "includes": "{0} LIKE '%{1}%'"
        },
        "dateTime": {
          "curTime": "CURTIME()",
          "today": "CURDATE()",
          "now": "NOW()",
          "date": "CONVERT({0}, DATE)",
          "dateTime": "CONVERT({0}, DATETIME)",
          "time": "CONVERT({0}, TIME)",
          "year": "EXTRACT(YEAR FROM {0})",
          "month": "EXTRACT(MONTH FROM {0})",
          "day": "DAYOFMONTH({0})",
          "weekday": "DAYOFWEEK({0})",
          "hours": "EXTRACT(HOUR FROM {0})",
          "minutes": "EXTRACT(MINUTE FROM {0})",
          "seconds": "EXTRACT(SECOND FROM {0})",
          "millisecond": "ROUND(EXTRACT(MICROSECOND FROM {0})/1000,0)",
          "addYear": "DATE_ADD({0}, INTERVAL {1} YEAR)",
          "addMonth": "DATE_ADD({0}, INTERVAL {1} MONTH)",
          "addDay": "DATE_ADD({0}, INTERVAL {1} DAY)",
          "addHours": "DATE_ADD({0}, INTERVAL {1} HOUR)",
          "addMinutes": "DATE_ADD({0}, INTERVAL {1} MINUTE)",
          "addSeconds": "DATE_ADD({0}, INTERVAL {1} SECOND)",
          "addMillisecond": "DATE_ADD({0}, INTERVAL ({1} * 1000) MICROSECOND)",
          "addTime": "ADDTIME({0},{1})",
          "subtractTime": "SUBTIME({0},{1})",
          "dayDiff": "DATEDIFF({0},{1})",
          "hourDiff": "TIMESTAMPDIFF(HOUR, {1},{0})",
          "secondDiff": "TIMESTAMPDIFF(SECOND, {1},{0})",
          "millisecondDiff": "ROUND(TIMESTAMPDIFF(MICROSECOND, {1},{0})/1000,0)",
          "dateDiff": "DATEDIFF({0},{1})",
          "timeDiff": "TIMEDIFF({0},{1})",
          "dayToDate": "DATE_FORMAT(FROM_UNIXTIME({0}*24*3600), '%Y-%m-%dT%TZ')",
          "hourToDate": "DATE_FORMAT(FROM_UNIXTIME({0}*3600), '%Y-%m-%dT%TZ')",
          "secondToDate": "DATE_FORMAT(FROM_UNIXTIME({0}), '%Y-%m-%dT%TZ')",
          "millisecondToDate": "DATE_FORMAT(FROM_UNIXTIME({0}/1000), '%Y-%m-%dT%TZ')",
          "dateToString": "DATE_FORMAT({0}, '%Y-%m-%dT%TZ')",
          "hour": "EXTRACT(HOUR FROM {0})",
          "minute": "EXTRACT(MINUTE FROM {0})",
          "second": "EXTRACT(SECOND FROM {0})",
          "addHour": "{0} + interval '{1}' HOUR",
          "addMinute": "{0} + interval '{1}' MINUTE",
          "addSecond": "{0} + interval '{1}' SECOND"
        },
        "metadata": {
          "user": "CURRENT_USER()",
          "database": "DATABASE()",
          "source": "SYS_CONTEXT('USERENV','DB_NAME')"
        },
        "null": {
          "nvl": "IFNULL({0},{1})",
          "nvl2": "(CASE WHEN {0} IS NOT NULL THEN {1} ELSE {2} END)",
          "isNull": "({0} IS NULL)",
          "isNotNull": "({0} IS NOT NULL)"
        },
        "multiple": {
          "concat": "CONCAT({accumulated},{value})"
        },
        "general": {
          "as": "{value} AS {alias}",
          "desc": "{0} desc",
          "asc": "{0} asc",
          "between": "{0} BETWEEN {1} AND {2}",
          "includes": " {1} IN ({0})",
          "contains": " {1} IN ({0})",
          "in": " {0} IN ({1})",
          "distinct": "DISTINCT {0} "
        },
        "group": {
          "avg": "AVG({0})",
          "count": "COUNT({0})",
          "first": "FIRST({0})",
          "last": "LAST({0})",
          "max": "MAX({0})",
          "min": "MIN({0})",
          "sum": "SUM({0})"
        }
      },
      "format": {
        "dateTime": "yyyy-LL-dd HH:mm:ss",
        "date": "yyyy-LL-dd",
        "time": "HH:mm:ss"
      },
      "operators": {
        "unary": {
          "-": "- {0}",
          "~": "~ {0}",
          "!": "NOT {0}"
        },
        "binary": {
          "+": "({0} + {1})",
          "-": "({0} - {1})",
          "*": "({0} * {1})",
          "/": "({0} / {1})",
          "**": "POWER({0},{1})",
          "//": "POWER({0},(1/{1}))",
          "%": "MOD({0},{1})",
          "&": "{0} & {1}",
          "|": "{0} | {1}",
          "^": "{0} ^ {1}",
          "<<": "{0} << {1}",
          ">>": "{0} >> {1}",
          "==": "{0} = {1}",
          "===": "{0} = {1}",
          "!=": "{0} <> {1}",
          "!==": "{0} <> {1}",
          ">": "{0} > {1}",
          "<": "{0} < {1}",
          ">=": "{0} >= {1}",
          "<=": "{0} <= {1}",
          "&&": "({0} AND {1})",
          "||": "({0} OR {1})",
          "[]": "N/A",
          "=": "{0} = {1}",
          "+=": "{0} = ({0} + {1})",
          "-=": "{0} = ({0} - {1})",
          "*=": "{0} = ({0} * {1})",
          "/=": "{0} = ({0} / {1})",
          "**=": "{0} = POWER({0},{1})",
          "//=": "{0} = POWER({0},(1/{1}))",
          "%=": "{0} = MOD({0},{1})",
          "&=": "{0} = {0} & {1} ",
          "|=": "{0} = {0} | {1}",
          "^=": "{0} = {0} ^ {1}",
          "<<=": "{0} = {0} << {1}",
          ">>=": "{0} = {0} >> {1}"
        },
        "ternary": {
          "?": "IF {0} THEN {1} ELSE {2} END"
        }
      }
    },
    "MySQL": {
      "dbTypes": {
        "text": "LONGTEXT",
        "boolean": "BOOLEAN",
        "integer": "INTEGER",
        "decimal": "DECIMAL(10,4)",
        "string": "VARCHAR({0})",
        "dateTime": "DATETIME",
        "date": "DATE",
        "time": "TIME"
      },
      "ddl": {
        "dropIndex": "DROP INDEX {name} ON {table}",
        "createDatabase": "CREATE DATABASE IF NOT EXISTS {name}",
        "createEntity": "CREATE TABLE {name} ({define})",
        "createSequence": "CREATE SEQUENCE {name} START WITH 1 INCREMENT BY 1 MAXVALUE 999999999999 MINVALUE 1",
        "incrementalColumDefine": "{name} {type} {required} AUTO_INCREMENT",
        "columnDefine": "{name} {type} {required} ",
        "createPk": "CONSTRAINT {name} PRIMARY KEY ({columns})",
        "createUk": "CONSTRAINT {name} UNIQUE ({columns})",
        "createFk": "CONSTRAINT {name} FOREIGN KEY ({column}) REFERENCES {fTable} ({fColumn})",
        "createIndex": "CREATE INDEX {name} ON {table} ({columns})",
        "alterTable": "ALTER TABLE {name}",
        "addProperty": "ADD {columnDefine}",
        "addPk": "ADD CONSTRAINT {name} PRIMARY KEY ({columns})",
        "addUk": "ADD CONSTRAINT {name} UNIQUE ({columns})",
        "addFk": "ADD CONSTRAINT {name} FOREIGN KEY ({column}) REFERENCES {fTable} ({fColumn})",
        "alterProperty": "MODIFY {columnDefine}",
        "alterPropertyType": "({name} {type})",
        "alterPropertyNullable": "({name} NULL)",
        "alterPropertyNotNullable": "({name} NOT NULL)",
        "dropDatabase": "DROP DATABASE IF EXISTS {name}",
        "dropEntity": "DROP TABLE IF EXISTS {name}",
        "dropSequence": "DROP SEQUENCE {name}",
        "dropProperty": "DROP COLUMN {name}",
        "dropPk": "DROP PRIMARY KEY {name}",
        "dropUk": "DROP UNIQUE {name}",
        "dropFk": "DROP FOREIGN KEY {name}",
        "truncateEntity": "TRUNCATE TABLE {name}"
      },
      "dml": {
        "delete": "DELETE {alias} FROM {name} AS {alias}",
        "bulkInsert": "INSERT INTO {name}({fields}) VALUES ?",
        "map": "SELECT {0}",
        "select": "SELECT {0}",
        "distinct": "SELECT DISTINCT {0}",
        "filter": "WHERE {0}",
        "where": "WHERE {0}",
        "groupBy": "GROUP BY {0}",
        "having": "HAVING {0}",
        "sort": "ORDER BY {0}",
        "order": "ORDER BY {0}",
        "page": "{sentence} LIMIT {offset},{records}",
        "insert": "INSERT INTO {name}({fields}) VALUES({values})",
        "update": "UPDATE {name} {alias} SET {assigns}",
        "remove": "DELETE FROM {name} {alias}",
        "from": "FROM {name} {alias} ",
        "join": "INNER JOIN {name} {alias} ON {relation}"
      },
      "others": {
        "delimiter": "`{name}`",
        "variable": "?",
        "string": "'{name}'",
        "separatorSql": ";",
        "notNullable": "NOT NULL",
        "field": "{entityAlias}.{name}",
        "column": "{name}",
        "false": "FALSE",
        "true": "TRUE",
        "null": "NULL",
        "sequenceNextVal": "{name}.nextval",
        "solveComposite": false
      },
      "functions": {
        "numeric": {
          "atan2": "ATAN({0},{1})",
          "cosh": "((EXP({0}) + EXP(-{0})) / 2)",
          "remainder": "({0} - {1}*ROUND({0}/{1}))",
          "sinh": "((EXP({0}) - EXP(-{0})) / 2)",
          "tanh": "(EXP(2*{0}) - 1)/(EXP(2*{0}) + 1)",
          "trunc": "TRUNCATE({0},{1})",
          "toNumber": "CONVERT({0}, DECIMAL)",
          "abs": "ABS({0})",
          "acos": "ACOS({0})",
          "asin": "ASIN({0})",
          "atan": "ATAN({0})",
          "ceil": "CEIL({0})",
          "cos": "COS({0})",
          "exp": "EXP({0})",
          "floor": "FLOOR({0})",
          "ln": "LN({0})",
          "log10": "LOG10({0})",
          "log": "LOG({0},{1})",
          "round": "ROUND({0},{1})",
          "sign": "SIGN({0})",
          "sin": "SIN({0})",
          "tan": "TAN({0})"
        },
        "string": {
          "chr": "CHAR({0} USING ASCII)",
          "initcap": "INITCAP({0})",
          "length": "CHAR_LENGTH({0})",
          "toString": "CONVERT({0}, CHAR)",
          "parse": "CONVERT({0}, JSON)",
          "lower": "LOWER({0})",
          "lpad": "LPAD({0},{1},{2})",
          "ltrim": "LTRIM({0})",
          "regExpReplace": "REGEXP_REPLACE({0},{1})",
          "regExpSubstr": "REGEXP_SUBSTR({0},{1})",
          "replace": "REPLACE({0},{1},{2})",
          "rpad": "RPAD({0},{1},{2})",
          "rtrim": "RTRIM({0})",
          "substr": "SUBSTR({0},{1},{2})",
          "substring": "SUBSTR({0},{1},{2})",
          "strCount": "(LENGTH({0})-LENGTH(REPLACE({0},{1},'')))",
          "trim": "TRIM({0})",
          "upper": "UPPER({0})",
          "mask": "Concat(LEFT({0},3),'***',RIGHT({0},3))",
          "like": "{0} LIKE {1}",
          "startsWith": "{0} LIKE '{1}%'",
          "startWith": "{0} LIKE '{1}%'",
          "includes": "{0} LIKE '%{1}%'"
        },
        "dateTime": {
          "curTime": "CURTIME()",
          "today": "CURDATE()",
          "now": "NOW()",
          "date": "CONVERT({0}, DATE)",
          "dateTime": "CONVERT({0}, DATETIME)",
          "time": "CONVERT({0}, TIME)",
          "year": "EXTRACT(YEAR FROM {0})",
          "month": "EXTRACT(MONTH FROM {0})",
          "day": "DAYOFMONTH({0})",
          "weekday": "DAYOFWEEK({0})",
          "hours": "EXTRACT(HOUR FROM {0})",
          "minutes": "EXTRACT(MINUTE FROM {0})",
          "seconds": "EXTRACT(SECOND FROM {0})",
          "millisecond": "ROUND(EXTRACT(MICROSECOND FROM {0})/1000,0)",
          "addYear": "DATE_ADD({0}, INTERVAL {1} YEAR)",
          "addMonth": "DATE_ADD({0}, INTERVAL {1} MONTH)",
          "addDay": "DATE_ADD({0}, INTERVAL {1} DAY)",
          "addHours": "DATE_ADD({0}, INTERVAL {1} HOUR)",
          "addMinutes": "DATE_ADD({0}, INTERVAL {1} MINUTE)",
          "addSeconds": "DATE_ADD({0}, INTERVAL {1} SECOND)",
          "addMillisecond": "DATE_ADD({0}, INTERVAL ({1} * 1000) MICROSECOND)",
          "addTime": "ADDTIME({0},{1})",
          "subtractTime": "SUBTIME({0},{1})",
          "dayDiff": "DATEDIFF({0},{1})",
          "hourDiff": "TIMESTAMPDIFF(HOUR, {1},{0})",
          "secondDiff": "TIMESTAMPDIFF(SECOND, {1},{0})",
          "millisecondDiff": "ROUND(TIMESTAMPDIFF(MICROSECOND, {1},{0})/1000,0)",
          "dateDiff": "DATEDIFF({0},{1})",
          "timeDiff": "TIMEDIFF({0},{1})",
          "dayToDate": "DATE_FORMAT(FROM_UNIXTIME({0}*24*3600), '%Y-%m-%dT%TZ')",
          "hourToDate": "DATE_FORMAT(FROM_UNIXTIME({0}*3600), '%Y-%m-%dT%TZ')",
          "secondToDate": "DATE_FORMAT(FROM_UNIXTIME({0}), '%Y-%m-%dT%TZ')",
          "millisecondToDate": "DATE_FORMAT(FROM_UNIXTIME({0}/1000), '%Y-%m-%dT%TZ')",
          "dateToString": "DATE_FORMAT({0}, '%Y-%m-%dT%TZ')",
          "hour": "EXTRACT(HOUR FROM {0})",
          "minute": "EXTRACT(MINUTE FROM {0})",
          "second": "EXTRACT(SECOND FROM {0})",
          "addHour": "{0} + interval '{1}' HOUR",
          "addMinute": "{0} + interval '{1}' MINUTE",
          "addSecond": "{0} + interval '{1}' SECOND"
        },
        "metadata": {
          "user": "CURRENT_USER()",
          "database": "DATABASE()",
          "source": "SYS_CONTEXT('USERENV','DB_NAME')"
        },
        "null": {
          "nvl": "IFNULL({0},{1})",
          "nvl2": "(CASE WHEN {0} IS NOT NULL THEN {1} ELSE {2} END)",
          "isNull": "({0} IS NULL)",
          "isNotNull": "({0} IS NOT NULL)"
        },
        "multiple": {
          "concat": "CONCAT({accumulated},{value})"
        },
        "general": {
          "as": "{value} AS {alias}",
          "desc": "{0} desc",
          "asc": "{0} asc",
          "between": "{0} BETWEEN {1} AND {2}",
          "includes": " {1} IN ({0})",
          "contains": " {1} IN ({0})",
          "in": " {0} IN ({1})",
          "distinct": "DISTINCT {0} "
        },
        "group": {
          "avg": "AVG({0})",
          "count": "COUNT({0})",
          "first": "FIRST({0})",
          "last": "LAST({0})",
          "max": "MAX({0})",
          "min": "MIN({0})",
          "sum": "SUM({0})"
        }
      },
      "format": {
        "dateTime": "yyyy-LL-dd HH:mm:ss",
        "date": "yyyy-LL-dd",
        "time": "HH:mm:ss"
      },
      "operators": {
        "unary": {
          "-": "- {0}",
          "~": "~ {0}",
          "!": "NOT {0}"
        },
        "binary": {
          "+": "({0} + {1})",
          "-": "({0} - {1})",
          "*": "({0} * {1})",
          "/": "({0} / {1})",
          "**": "POWER({0},{1})",
          "//": "POWER({0},(1/{1}))",
          "%": "MOD({0},{1})",
          "&": "{0} & {1}",
          "|": "{0} | {1}",
          "^": "{0} ^ {1}",
          "<<": "{0} << {1}",
          ">>": "{0} >> {1}",
          "==": "{0} = {1}",
          "===": "{0} = {1}",
          "!=": "{0} <> {1}",
          "!==": "{0} <> {1}",
          ">": "{0} > {1}",
          "<": "{0} < {1}",
          ">=": "{0} >= {1}",
          "<=": "{0} <= {1}",
          "&&": "({0} AND {1})",
          "||": "({0} OR {1})",
          "[]": "N/A",
          "=": "{0} = {1}",
          "+=": "{0} = ({0} + {1})",
          "-=": "{0} = ({0} - {1})",
          "*=": "{0} = ({0} * {1})",
          "/=": "{0} = ({0} / {1})",
          "**=": "{0} = POWER({0},{1})",
          "//=": "{0} = POWER({0},(1/{1}))",
          "%=": "{0} = MOD({0},{1})",
          "&=": "{0} = {0} & {1} ",
          "|=": "{0} = {0} | {1}",
          "^=": "{0} = {0} ^ {1}",
          "<<=": "{0} = {0} << {1}",
          ">>=": "{0} = {0} >> {1}"
        },
        "ternary": {
          "?": "IF {0} THEN {1} ELSE {2} END"
        }
      }
    },
    "Oracle": {
      "dbTypes": {
        "boolean": "CHAR(1)",
        "integer": "NUMBER(10)",
        "decimal": "NUMBER(19,4)",
        "string": "VARCHAR2({0})",
        "dateTime": "DATE",
        "date": "DATE",
        "time": "DATE",
        "text": "TEXT"
      },
      "others": {
        "false": "'N'",
        "true": "'Y'",
        "variable": ":{name}",
        "delimiter": "\"{name}\"",
        "string": "'{name}'",
        "separatorSql": ";",
        "notNullable": "NOT NULL",
        "field": "{entityAlias}.{name}",
        "column": "{name}",
        "null": "NULL",
        "sequenceNextVal": "{name}.nextval",
        "solveComposite": false
      },
      "ddl": {
        "createEntity": "CREATE TABLE {name} ({define})",
        "incrementalColumDefine": "{name} {type} {required}",
        "dropEntity": "DROP TABLE {name}",
        "dropPk": "DROP CONSTRAINT {name}",
        "dropUk": "DROP CONSTRAINT {name}",
        "dropFk": "DROP CONSTRAINT {name}",
        "dropIndex": "DROP INDEX {name} ON {table}",
        "createDatabase": "CREATE DATABASE IF NOT EXISTS {name}",
        "createSequence": "CREATE SEQUENCE {name} START WITH 1 INCREMENT BY 1 MAXVALUE 999999999999 MINVALUE 1",
        "columnDefine": "{name} {type} {required} ",
        "createPk": "CONSTRAINT {name} PRIMARY KEY ({columns})",
        "createUk": "CONSTRAINT {name} UNIQUE ({columns})",
        "createFk": "CONSTRAINT {name} FOREIGN KEY ({column}) REFERENCES {fTable} ({fColumn})",
        "createIndex": "CREATE INDEX {name} ON {table} ({columns})",
        "alterTable": "ALTER TABLE {name}",
        "addProperty": "ADD {columnDefine}",
        "addPk": "ADD CONSTRAINT {name} PRIMARY KEY ({columns})",
        "addUk": "ADD CONSTRAINT {name} UNIQUE ({columns})",
        "addFk": "ADD CONSTRAINT {name} FOREIGN KEY ({column}) REFERENCES {fTable} ({fColumn})",
        "alterProperty": "MODIFY {columnDefine}",
        "alterPropertyType": "({name} {type})",
        "alterPropertyNullable": "({name} NULL)",
        "alterPropertyNotNullable": "({name} NOT NULL)",
        "dropDatabase": "DROP DATABASE IF EXISTS {name}",
        "dropSequence": "DROP SEQUENCE {name}",
        "dropProperty": "DROP COLUMN {name}",
        "truncateEntity": "TRUNCATE TABLE {name}"
      },
      "dml": {
        "page": "{sentence} OFFSET {offset} ROWS FETCH NEXT {records} ROWS ONLY",
        "bulkInsert": "INSERT INTO {name}({fields}) VALUES({values})",
        "map": "SELECT {0}",
        "select": "SELECT {0}",
        "distinct": "SELECT DISTINCT {0}",
        "filter": "WHERE {0}",
        "where": "WHERE {0}",
        "groupBy": "GROUP BY {0}",
        "having": "HAVING {0}",
        "sort": "ORDER BY {0}",
        "order": "ORDER BY {0}",
        "insert": "INSERT INTO {name}({fields}) VALUES({values})",
        "update": "UPDATE {name} {alias} SET {assigns}",
        "remove": "DELETE FROM {name} {alias}",
        "delete": "DELETE FROM {name} {alias}",
        "from": "FROM {name} {alias} ",
        "join": "INNER JOIN {name} {alias} ON {relation}"
      },
      "operators": {
        "binary": {
          "&": "BITAND({0},{1})",
          "|": "BITOR({0},{1})",
          "^": "BITXOR({0},{1})",
          "&=": "{0} = BITAND({0},{1})",
          "|=": "{0} = BITOR({0},{1})",
          "^=": "{0} = BITXOR({0},{1})",
          "+": "({0} + {1})",
          "-": "({0} - {1})",
          "*": "({0} * {1})",
          "/": "({0} / {1})",
          "**": "POWER({0},{1})",
          "//": "POWER({0},(1/{1}))",
          "%": "MOD({0},{1})",
          "<<": "{0} << {1}",
          ">>": "{0} >> {1}",
          "==": "{0} = {1}",
          "===": "{0} = {1}",
          "!=": "{0} <> {1}",
          "!==": "{0} <> {1}",
          ">": "{0} > {1}",
          "<": "{0} < {1}",
          ">=": "{0} >= {1}",
          "<=": "{0} <= {1}",
          "&&": "({0} AND {1})",
          "||": "({0} OR {1})",
          "[]": "N/A",
          "=": "{0} = {1}",
          "+=": "{0} = ({0} + {1})",
          "-=": "{0} = ({0} - {1})",
          "*=": "{0} = ({0} * {1})",
          "/=": "{0} = ({0} / {1})",
          "**=": "{0} = POWER({0},{1})",
          "//=": "{0} = POWER({0},(1/{1}))",
          "%=": "{0} = MOD({0},{1})",
          "<<=": "{0} = {0} << {1}",
          ">>=": "{0} = {0} >> {1}"
        },
        "unary": {
          "-": "- {0}",
          "~": "~ {0}",
          "!": "NOT {0}"
        },
        "ternary": {
          "?": "IF {0} THEN {1} ELSE {2} END"
        }
      },
      "functions": {
        "numeric": {
          "toNumber": "TO_NUMBER(TO_CHAR({0}))",
          "abs": "ABS({0})",
          "acos": "ACOS({0})",
          "asin": "ASIN({0})",
          "atan": "ATAN({0})",
          "atan2": "ATAN2({0},{1})",
          "ceil": "CEIL({0})",
          "cos": "COS({0})",
          "cosh": "COSH({0})",
          "exp": "EXP({0})",
          "floor": "FLOOR({0})",
          "ln": "LN({0})",
          "log10": "LOG10({0})",
          "log": "LOG({0},{1})",
          "remainder": "REMAINDER({0},{1})",
          "round": "ROUND({0},{1})",
          "sign": "SIGN({0})",
          "sin": "SIN({0})",
          "sinh": "SINH({0})",
          "tan": "TAN({0})",
          "tanh": "TANH({0})",
          "trunc": "TRUNC({0},{1})"
        },
        "string": {
          "toString": "TO_CHAR({0})",
          "chr": "CHR({0})",
          "initcap": "INITCAP({0})",
          "lower": "LOWER({0})",
          "lpad": "LPAD({0},{1},{2})",
          "ltrim": "LTRIM({0})",
          "regExpReplace": "REGEXP_REPLACE({0},{1})",
          "regExpSubstr": "REGEXP_SUBSTR({0},{1})",
          "replace": "REPLACE({0},{1},{2})",
          "rpad": "RPAD({0},{1},{2})",
          "rtrim": "RTRIM({0})",
          "substr": "SUBSTR({0},{1},{2})",
          "substring": "SUBSTR({0},{1},{2})",
          "strCount": "(LENGTH({0})-LENGTH(REPLACE({0},{1},'')))",
          "trim": "TRIM({0})",
          "upper": "UPPER({0})",
          "length": "LENGTH({0})",
          "mask": "Concat(LEFT({0},3),'***',RIGHT({0},3))",
          "parse": "json_value({0})",
          "like": "{0} LIKE {1}",
          "startsWith": "{0} LIKE '{1}%'",
          "startWith": "{0} LIKE '{1}%'",
          "includes": "{0} LIKE '%{1}%'"
        },
        "dateTime": {
          "dateTime": "TO_CHAR({0},'YYYY-MM-DD\"T\"hh24:mi:ss')",
          "now": "SYSTIMESTAMP",
          "curTime": "CAST(SYSTIMESTAMP AS TIME)",
          "today": "TRUNC(SYSDATE)",
          "date": "CAST({0} AS DATE)",
          "time": "CAST({0} AS TIME)",
          "year": "EXTRACT(YEAR FROM {0})",
          "month": "EXTRACT(MONTH FROM {0})",
          "day": "DAY(DAY FROM {0})",
          "weekday": "TO_NUMBER(TO_CHAR({0}, 'D'))",
          "hour": "EXTRACT(HOUR FROM {0})",
          "minute": "EXTRACT(MINUTE FROM {0})",
          "second": "EXTRACT(SECOND FROM {0})",
          "millisecond": "EXTRACT(MILLISECOND FROM {0})",
          "addYear": "{0} + interval '{1}' YEAR",
          "addMonth": "ADD_MONTHS({0},{1})",
          "addDay": "{0} + {1}",
          "addHour": "{0} + interval '{1}' HOUR",
          "addMinute": "{0} + interval '{1}' MINUTE",
          "addSecond": "{0} + interval '{1}' SECOND",
          "addMillisecond": "{0} + interval '{1}' MILLISECOND",
          "addTime": "ADDTIME({0},{1})",
          "subtractTime": "SUBTIME({0},{1})",
          "dayDiff": "DATEDIFF({0},{1})",
          "hourDiff": "TIMESTAMPDIFF(HOUR,({0},{1})",
          "secondDiff": "TIMESTAMPDIFF(SECOND,({0},{1})",
          "millisecondDiff": "TIMESTAMPDIFF(MICROSECOND,({0},{1})",
          "dayToDate": "DATE_FORMAT(FROM_UNIXTIME({0}*24*3600*1000), '%Y-%m-%dT%TZ')",
          "hourToDate": "DATE_FORMAT(FROM_UNIXTIME({0}*3600*1000), '%Y-%m-%dT%TZ')",
          "secondToDate": "DATE_FORMAT(FROM_UNIXTIME({0}*1000), '%Y-%m-%dT%TZ')",
          "millisecondToDate": "DATE_FORMAT(FROM_UNIXTIME({0}), '%Y-%m-%dT%TZ')",
          "dateToString": "TO_CHAR({0},'YYYY-MM-DD\"T\"HH24:MI:SSTZH:TZM')"
        },
        "general": {
          "as": "{value} AS {alias}",
          "desc": "{0} desc",
          "asc": "{0} asc",
          "between": "{0} BETWEEN {1} AND {2}",
          "includes": " {1} IN ({0})",
          "contains": " {1} IN ({0})",
          "in": " {0} IN ({1})",
          "distinct": "DISTINCT {0} "
        },
        "metadata": {
          "user": "USER",
          "source": "SYS_CONTEXT('USERENV','DB_NAME')"
        },
        "null": {
          "nvl": "NVL({0},{1})",
          "nvl2": "NVL2({0},{1},{2})",
          "isNull": "({0} IS NULL)",
          "isNotNull": "({0} IS NOT NULL)"
        },
        "multiple": {
          "concat": "{accumulated} || {value}"
        },
        "group": {
          "avg": "AVG({0})",
          "count": "COUNT({0})",
          "first": "FIRST({0})",
          "last": "LAST({0})",
          "max": "MAX({0})",
          "min": "MIN({0})",
          "sum": "SUM({0})"
        }
      },
      "format": {
        "dateTime": "yyyy-LL-dd HH:mm:ss",
        "date": "yyyy-LL-dd",
        "time": "HH:mm:ss"
      }
    },
    "PostgreSQL": {
      "dbTypes": {
        "dateTime": "TIMESTAMP",
        "boolean": "BOOLEAN",
        "integer": "INTEGER",
        "decimal": "DECIMAL(10,4)",
        "string": "VARCHAR({0})",
        "date": "DATE",
        "time": "TIME",
        "text": "TEXT"
      },
      "types": {
        "integer": "integer",
        "bigint": "integer",
        "smallint": "integer",
        "decimal": "decimal",
        "numeric": "decimal",
        "real": "decimal",
        "double": "decimal",
        "double precision": "decimal",
        "character varying": "string",
        "uuid": "string",
        "text": "string",
        "timestamp without time zone": "dateTime",
        "timestamp with time zone": "dateTime",
        "date": "date",
        "time": "time",
        "time without time zone": "time",
        "time with time zone": "time",
        "boolean": "boolean"
      },
      "ddl": {
        "incrementalColumDefine": "{name} serial",
        "dropPk": "DROP CONSTRAINT IF EXISTS {name}",
        "dropUk": "DROP CONSTRAINT IF EXISTS {name}",
        "dropFk": "DROP CONSTRAINT IF EXISTS {name}",
        "dropIndex": "DROP INDEX IF EXISTS {name}",
        "alterProperty": "ALTER COLUMN {columnDefine}",
        "alterPropertyType": "{name} SET DATA TYPE {type}",
        "alterPropertyNullable": "{name} DROP NOT NULL",
        "alterPropertyNotNullable": "{name} SET NOT NULL",
        "objects": "SELECT\n  CASE\n    WHEN t.table_type = 'BASE TABLE' THEN 'table'\n    WHEN t.table_type = 'VIEW' THEN 'view'\n    ELSE 'unknown'\n  END AS \"type\",\n  t.table_name AS \"name\",\n  ts.tablespace_name AS \"tablespace\",\n  pg_catalog.obj_description(t.table_name::regclass, 'pg_class') AS \"comment\"\nFROM information_schema.tables t\nJOIN (SELECT tablename AS table_name,\n  COALESCE(tablespace,'pg_default') AS tablespace_name\n  FROM pg_tables \n  WHERE schemaname = current_schema\n  ) as ts ON ts.table_name = t.table_name\nWHERE t.table_catalog = current_catalog\n  AND t.table_schema = current_schema\n  AND t.table_type IN ('BASE TABLE', 'VIEW')  \n",
        "tables": "SELECT\n  t.table_name AS \"tableName\",\n  ts.tablespace_name AS \"tablespace\",\n  c.column_name AS \"columnName\",\n  c.data_type AS \"dbType\",\n  c.is_nullable = 'YES' AS \"required\",\n  c.is_identity AS \"isIdentity\",\n  (pg_get_serial_sequence(t.table_name,lower(c.column_name)) IS NOT NULL) AS \"autoIncrement\",\n  c.character_maximum_length AS \"length\",\n  c.numeric_precision AS \"precision\",\n  c.numeric_scale AS \"scale\",\n  c.datetime_precision AS \"time\"    \nFROM information_schema.tables t\nJOIN information_schema.columns c ON t.table_name = c.table_name\nJOIN (SELECT tablename AS table_name,\n  COALESCE(tablespace,'pg_default') AS tablespace_name\n  FROM pg_tables \n  WHERE schemaname = current_schema\n  ) as ts ON ts.table_name = t.table_name\nWHERE t.table_catalog = current_catalog\n  AND t.table_schema = current_schema\n  AND c.table_catalog = current_catalog\n  AND c.table_schema = current_schema\n  AND t.table_type = 'BASE TABLE'\n  AND t.table_name IN ({names})\n",
        "views": "SELECT\n  t.table_name AS \"tableName\",\n  ts.tablespace_name AS \"tablespace\",\n  c.column_name AS \"columnName\",\n  c.data_type AS \"dbType\",\n  c.is_nullable = 'YES' AS \"required\",\n  c.is_identity AS \"isIdentity\",\n  (pg_get_serial_sequence(t.table_name,lower(c.column_name)) IS NOT NULL) AS \"autoIncrement\",\n  c.character_maximum_length AS \"length\",\n  c.numeric_precision AS \"precision\",\n  c.numeric_scale AS \"scale\",\n  c.datetime_precision AS \"time\"    \nFROM information_schema.tables t\nJOIN information_schema.columns c ON t.table_name = c.table_name\nJOIN (SELECT tablename AS table_name,\n  COALESCE(tablespace,'pg_default') AS tablespace_name\n  FROM pg_tables \n  WHERE schemaname = current_schema\n  ) as ts ON ts.table_name = t.table_name\nWHERE t.table_catalog = current_catalog\n  AND t.table_schema = current_schema\n  AND c.table_catalog = current_catalog\n  AND c.table_schema = current_schema\n  AND t.table_type = 'VIEW'\n  AND t.table_name IN ({names})\n",
        "primaryKeys": "SELECT\n  tc.table_name AS \"tableName\",\n  kcu.column_name AS \"columnName\",\n  tc.constraint_name AS \"constraintName\"\nFROM information_schema.table_constraints tc\nJOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name\nWHERE tc.constraint_type = 'PRIMARY KEY'\n  AND tc.table_catalog = current_catalog\n  AND tc.table_schema = current_schema\n  AND tc.table_name IN ({tableNames})\n",
        "uniqueKeys": "SELECT\n  tc.table_name AS \"tableName\",\n  kcu.column_name AS \"columnName\",\n  tc.constraint_name AS \"constraintName\"\nFROM information_schema.table_constraints tc\nJOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name\nWHERE tc.constraint_type = 'UNIQUE'\n  AND tc.table_catalog = current_catalog\n  AND tc.table_schema = current_schema\n  AND tc.table_name IN ({tableNames})\n",
        "foreignKeys": "SELECT\n  tc.table_name AS \"tableName\",\n  kcu.column_name AS \"columnName\",\n  ccu.table_name AS \"refTableName\",\n  ccu.column_name AS \"refColumnName\",\n  tc.constraint_name AS \"constraintName\"\nFROM information_schema.table_constraints tc\nJOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name\nJOIN information_schema.constraint_column_usage ccu ON tc.constraint_name = ccu.constraint_name\nWHERE tc.constraint_type = 'FOREIGN KEY'\n  AND tc.table_catalog = current_catalog\n  AND tc.table_schema = current_schema\n  AND tc.table_name IN ({tableNames})\n",
        "indexes": "SELECT\n  t.relname AS \"tableName\",\n  i.relname AS \"indexName\",\n  a.attname AS \"columnName\",\n  ix.indisunique AS \"isUnique\",\n  ix.indisprimary AS \"isPrimary\"\nFROM pg_class t\nJOIN pg_index ix ON t.oid = ix.indrelid\nJOIN pg_class i ON i.oid = ix.indexrelid\nJOIN pg_attribute a ON a.attrelid = t.oid\nWHERE t.relkind = 'r'\n  AND t.relname IN ({tableNames})\n  AND a.attnum = ANY(ix.indkey)\n  AND ix.indisunique = false\n\tAND ix.indisprimary = false\n",
        "sequences": "SELECT\n  sequence_name AS \"sequenceName\",\n  start_value AS \"startValue\",\n  increment AS \"increment\"\nFROM information_schema.sequences\nWHERE sequence_catalog = current_catalog\n  AND sequence_schema = current_schema\n  AND sequence_name IN ({sequenceNames})\n",
        "createDatabase": "CREATE DATABASE IF NOT EXISTS {name}",
        "createEntity": "CREATE TABLE {name} ({define})",
        "createSequence": "CREATE SEQUENCE {name} START WITH 1 INCREMENT BY 1 MAXVALUE 999999999999 MINVALUE 1",
        "columnDefine": "{name} {type} {required} ",
        "createPk": "CONSTRAINT {name} PRIMARY KEY ({columns})",
        "createUk": "CONSTRAINT {name} UNIQUE ({columns})",
        "createFk": "CONSTRAINT {name} FOREIGN KEY ({column}) REFERENCES {fTable} ({fColumn})",
        "createIndex": "CREATE INDEX {name} ON {table} ({columns})",
        "alterTable": "ALTER TABLE {name}",
        "addProperty": "ADD {columnDefine}",
        "addPk": "ADD CONSTRAINT {name} PRIMARY KEY ({columns})",
        "addUk": "ADD CONSTRAINT {name} UNIQUE ({columns})",
        "addFk": "ADD CONSTRAINT {name} FOREIGN KEY ({column}) REFERENCES {fTable} ({fColumn})",
        "dropDatabase": "DROP DATABASE IF EXISTS {name}",
        "dropEntity": "DROP TABLE IF EXISTS {name}",
        "dropSequence": "DROP SEQUENCE {name}",
        "dropProperty": "DROP COLUMN {name}",
        "truncateEntity": "TRUNCATE TABLE {name}"
      },
      "dml": {
        "page": "{sentence} OFFSET {offset} LIMIT {records}",
        "insert": "INSERT INTO {name}({fields}) VALUES({values}) RETURNING {autoIncrementField} AS id",
        "bulkInsert": "INSERT INTO {name}({fields}) VALUES",
        "map": "SELECT {0}",
        "select": "SELECT {0}",
        "distinct": "SELECT DISTINCT {0}",
        "filter": "WHERE {0}",
        "where": "WHERE {0}",
        "groupBy": "GROUP BY {0}",
        "having": "HAVING {0}",
        "sort": "ORDER BY {0}",
        "order": "ORDER BY {0}",
        "update": "UPDATE {name} {alias} SET {assigns}",
        "remove": "DELETE FROM {name} {alias}",
        "delete": "DELETE FROM {name} {alias}",
        "from": "FROM {name} {alias} ",
        "join": "INNER JOIN {name} {alias} ON {relation}"
      },
      "others": {
        "variable": "${number}",
        "delimiter": "\"{name}\"",
        "string": "'{name}'",
        "separatorSql": ";",
        "notNullable": "NOT NULL",
        "field": "{entityAlias}.{name}",
        "column": "{name}",
        "false": "FALSE",
        "true": "TRUE",
        "null": "NULL",
        "sequenceNextVal": "{name}.nextval",
        "solveComposite": false
      },
      "operators": {
        "binary": {
          "^": "{0} # {1}",
          "^=": "{0} = {0} # {1}",
          "+": "({0} + {1})",
          "-": "({0} - {1})",
          "*": "({0} * {1})",
          "/": "({0} / {1})",
          "**": "POWER({0},{1})",
          "//": "POWER({0},(1/{1}))",
          "%": "MOD({0},{1})",
          "&": "{0} & {1}",
          "|": "{0} | {1}",
          "<<": "{0} << {1}",
          ">>": "{0} >> {1}",
          "==": "{0} = {1}",
          "===": "{0} = {1}",
          "!=": "{0} <> {1}",
          "!==": "{0} <> {1}",
          ">": "{0} > {1}",
          "<": "{0} < {1}",
          ">=": "{0} >= {1}",
          "<=": "{0} <= {1}",
          "&&": "({0} AND {1})",
          "||": "({0} OR {1})",
          "[]": "N/A",
          "=": "{0} = {1}",
          "+=": "{0} = ({0} + {1})",
          "-=": "{0} = ({0} - {1})",
          "*=": "{0} = ({0} * {1})",
          "/=": "{0} = ({0} / {1})",
          "**=": "{0} = POWER({0},{1})",
          "//=": "{0} = POWER({0},(1/{1}))",
          "%=": "{0} = MOD({0},{1})",
          "&=": "{0} = {0} & {1} ",
          "|=": "{0} = {0} | {1}",
          "<<=": "{0} = {0} << {1}",
          ">>=": "{0} = {0} >> {1}"
        },
        "unary": {
          "-": "- {0}",
          "~": "~ {0}",
          "!": "NOT {0}"
        },
        "ternary": {
          "?": "IF {0} THEN {1} ELSE {2} END"
        }
      },
      "functions": {
        "numeric": {
          "round": "ROUND(CAST({0} AS DECIMAL),{1})",
          "remainder": "MOD({0},{1})",
          "toNumber": "CAST({0} AS INTEGER)",
          "log10": "LOG({0})",
          "abs": "ABS({0})",
          "acos": "ACOS({0})",
          "asin": "ASIN({0})",
          "atan": "ATAN({0})",
          "atan2": "ATAN2({0},{1})",
          "ceil": "CEIL({0})",
          "cos": "COS({0})",
          "cosh": "COSH({0})",
          "exp": "EXP({0})",
          "floor": "FLOOR({0})",
          "ln": "LN({0})",
          "log": "LOG({0},{1})",
          "sign": "SIGN({0})",
          "sin": "SIN({0})",
          "sinh": "SINH({0})",
          "tan": "TAN({0})",
          "tanh": "TANH({0})",
          "trunc": "TRUNC({0},{1})"
        },
        "dateTime": {
          "now": "to_char(now()::timestamp at time zone 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS\".\"MS\"Z\"')",
          "today": "to_char(now()::timestamp at time zone 'UTC', 'YYYY-MM-DD')",
          "curTime": "to_char(now()::timestamp at time zone 'UTC', 'HH24:MI:SS')",
          "dateTime": "to_char({0}::timestamp at time zone 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS\".\"MS\"Z\"')",
          "date": "to_char({0}::timestamp at time zone 'UTC', 'YYYY-MM-DD')",
          "time": "to_char({0}::timestamp at time zone 'UTC', 'HH24:MI:SS')",
          "year": "date_part('year', timestamp {0})",
          "month": "date_part('month', timestamp {0})",
          "day": "date_part('day', timestamp {0})",
          "weekday": "extract(dow from timestamp {0})",
          "hour": "date_part('hour', timestamp {0})",
          "minute": "date_part('minute', timestamp {0})",
          "second": "date_part('second', timestamp {0})",
          "millisecond": "mod(extract('millisecond' from timestamp {0})::decimal/1000,1)*1000",
          "addYear": "(timestamp {0} + ({1} * INTERVAL '1 year'))",
          "addMonth": "(timestamp {0} + ({1}  * INTERVAL '1 month'))",
          "addDay": "(timestamp {0} + ({1}  * INTERVAL '1 day'))",
          "addHour": "(timestamp {0} + ({1}  * INTERVAL '1 hour'))",
          "addMinute": "(timestamp {0} + ({1}  * INTERVAL '1 minute'))",
          "addSecond": "(timestamp {0} + ({1}  * INTERVAL '1 second'))",
          "addMillisecond": "(timestamp {0} + ({1}  * INTERVAL '1 millisecond'))",
          "addTime": "(timestamp {0} + time {1})",
          "subtractTime": "(timestamp {0} - time {1})",
          "dayDiff": "(extract('epoch' from (timestamp {0} - timestamp {1} ))/ (24 * 3600))",
          "hourDiff": "(extract('epoch' from (timestamp {0} - timestamp {1} ))/3600)",
          "secondDiff": "extract('epoch' from (timestamp {0} - timestamp {1} ))",
          "millisecondDiff": "(extract('epoch' from (timestamp {0} - timestamp {1} ))*1000)",
          "dayToDate": "to_char(TO_TIMESTAMP({0}*24*3600*1000)::timestamp, 'YYYY-MM-DD\"T\"HH24:MI:SS\".\"MS\"Z\"')",
          "hourToDate": "to_char(TO_TIMESTAMP({0}*3600*1000)::timestamp, 'YYYY-MM-DD\"T\"HH24:MI:SS\".\"MS\"Z\"')",
          "secondToDate": "to_char(TO_TIMESTAMP({0}*1000)::timestamp, 'YYYY-MM-DD\"T\"HH24:MI:SS\".\"MS\"Z\"')",
          "millisecondToDate": "to_char(TO_TIMESTAMP({0})::timestamp, 'YYYY-MM-DD\"T\"HH24:MI:SS\".\"MS\"Z\"')",
          "dateToString": "to_char ({0}::timestamp at time zone 'UTC', 'YYYY-MM-DD\"T\"HH24:MI:SS\"Z\"')"
        },
        "null": {
          "nvl": "(CASE WHEN {0} IS NOT NULL THEN {0} ELSE {1} END)",
          "nvl2": "(CASE WHEN {0} IS NOT NULL THEN {1} ELSE {2} END)",
          "isNull": "({0} IS NULL)",
          "isNotNull": "({0} IS NOT NULL)"
        },
        "general": {
          "as": "{value} AS {alias}",
          "desc": "{0} desc",
          "asc": "{0} asc",
          "between": "{0} BETWEEN {1} AND {2}",
          "includes": " {1} IN ({0})",
          "contains": " {1} IN ({0})",
          "in": " {0} IN ({1})",
          "distinct": "DISTINCT {0} "
        },
        "string": {
          "chr": "CHR({0})",
          "initcap": "INITCAP({0})",
          "lower": "LOWER({0})",
          "lpad": "LPAD({0},{1},{2})",
          "ltrim": "LTRIM({0})",
          "regExpReplace": "REGEXP_REPLACE({0},{1})",
          "regExpSubstr": "REGEXP_SUBSTR({0},{1})",
          "replace": "REPLACE({0},{1},{2})",
          "rpad": "RPAD({0},{1},{2})",
          "rtrim": "RTRIM({0})",
          "substr": "SUBSTR({0},{1},{2})",
          "substring": "SUBSTR({0},{1},{2})",
          "strCount": "(LENGTH({0})-LENGTH(REPLACE({0},{1},'')))",
          "trim": "TRIM({0})",
          "upper": "UPPER({0})",
          "length": "LENGTH({0})",
          "mask": "Concat(LEFT({0},3),'***',RIGHT({0},3))",
          "parse": "json_value({0})",
          "toString": "CAST({0} AS VARCHAR2)",
          "like": "{0} LIKE {1}",
          "startsWith": "{0} LIKE '{1}%'",
          "startWith": "{0} LIKE '{1}%'",
          "includes": "{0} LIKE '%{1}%'"
        },
        "metadata": {
          "user": "USER",
          "source": "SYS_CONTEXT('USERENV','DB_NAME')"
        },
        "multiple": {
          "concat": "{accumulated} || {value}"
        },
        "group": {
          "avg": "AVG({0})",
          "count": "COUNT({0})",
          "first": "FIRST({0})",
          "last": "LAST({0})",
          "max": "MAX({0})",
          "min": "MIN({0})",
          "sum": "SUM({0})"
        }
      },
      "format": {
        "dateTime": "yyyy-LL-dd HH:mm:ss",
        "date": "yyyy-LL-dd",
        "time": "HH:mm:ss"
      }
    },
    "SQLjs": {
      "dbTypes": {
        "boolean": "BOOLEAN",
        "integer": "INTEGER",
        "decimal": "DECIMAL(10,4)",
        "string": "VARCHAR({0})",
        "dateTime": "DATETIME",
        "date": "DATE",
        "time": "TIME",
        "text": "TEXT"
      },
      "format": {
        "dateTime": "yyyy-LL-dd HH:mm:ss",
        "date": "yyyy-LL-dd",
        "time": "HH:mm:ss"
      },
      "ddl": {
        "createDatabase": "CREATE DATABASE IF NOT EXISTS {name}",
        "createEntity": "CREATE TABLE {name} ({define})",
        "createSequence": "CREATE SEQUENCE {name} START WITH 1 INCREMENT BY 1 MAXVALUE 999999999999 MINVALUE 1",
        "incrementalColumDefine": "{name} {type} {required} AUTO_INCREMENT",
        "columnDefine": "{name} {type} {required} ",
        "createPk": "CONSTRAINT {name} PRIMARY KEY ({columns})",
        "createUk": "CONSTRAINT {name} UNIQUE ({columns})",
        "createFk": "CONSTRAINT {name} FOREIGN KEY ({column}) REFERENCES {fTable} ({fColumn})",
        "createIndex": "CREATE INDEX {name} ON {table} ({columns})",
        "alterTable": "ALTER TABLE {name}",
        "addProperty": "ADD {columnDefine}",
        "addPk": "ADD CONSTRAINT {name} PRIMARY KEY ({columns})",
        "addUk": "ADD CONSTRAINT {name} UNIQUE ({columns})",
        "addFk": "ADD CONSTRAINT {name} FOREIGN KEY ({column}) REFERENCES {fTable} ({fColumn})",
        "alterProperty": "MODIFY {columnDefine}",
        "alterPropertyType": "({name} {type})",
        "alterPropertyNullable": "({name} NULL)",
        "alterPropertyNotNullable": "({name} NOT NULL)",
        "dropDatabase": "DROP DATABASE IF EXISTS {name}",
        "dropEntity": "DROP TABLE IF EXISTS {name}",
        "dropSequence": "DROP SEQUENCE {name}",
        "dropProperty": "DROP COLUMN {name}",
        "dropPk": "DROP PRIMARY KEY {name}",
        "dropUk": "DROP UNIQUE {name}",
        "dropFk": "DROP FOREIGN KEY {name}",
        "dropIndex": "DROP INDEX {name} ON {table}",
        "truncateEntity": "TRUNCATE TABLE {name}"
      },
      "dml": {
        "map": "SELECT {0}",
        "select": "SELECT {0}",
        "distinct": "SELECT DISTINCT {0}",
        "filter": "WHERE {0}",
        "where": "WHERE {0}",
        "groupBy": "GROUP BY {0}",
        "having": "HAVING {0}",
        "sort": "ORDER BY {0}",
        "order": "ORDER BY {0}",
        "page": "{sentence} LIMIT {offset},{records}",
        "insert": "INSERT INTO {name}({fields}) VALUES({values})",
        "update": "UPDATE {name} {alias} SET {assigns}",
        "remove": "DELETE FROM {name} {alias}",
        "delete": "DELETE FROM {name} {alias}",
        "bulkInsert": "INSERT INTO {name}({fields}) VALUES {values}",
        "from": "FROM {name} {alias} ",
        "join": "INNER JOIN {name} {alias} ON {relation}"
      },
      "others": {
        "delimiter": "\"{name}\"",
        "string": "'{name}'",
        "separatorSql": ";",
        "notNullable": "NOT NULL",
        "variable": ":{name}",
        "field": "{entityAlias}.{name}",
        "column": "{name}",
        "false": "FALSE",
        "true": "TRUE",
        "null": "NULL",
        "sequenceNextVal": "{name}.nextval",
        "solveComposite": false
      },
      "operators": {
        "unary": {
          "-": "- {0}",
          "~": "~ {0}",
          "!": "NOT {0}"
        },
        "binary": {
          "+": "({0} + {1})",
          "-": "({0} - {1})",
          "*": "({0} * {1})",
          "/": "({0} / {1})",
          "**": "POWER({0},{1})",
          "//": "POWER({0},(1/{1}))",
          "%": "MOD({0},{1})",
          "&": "{0} & {1}",
          "|": "{0} | {1}",
          "^": "{0} ^ {1}",
          "<<": "{0} << {1}",
          ">>": "{0} >> {1}",
          "==": "{0} = {1}",
          "===": "{0} = {1}",
          "!=": "{0} <> {1}",
          "!==": "{0} <> {1}",
          ">": "{0} > {1}",
          "<": "{0} < {1}",
          ">=": "{0} >= {1}",
          "<=": "{0} <= {1}",
          "&&": "({0} AND {1})",
          "||": "({0} OR {1})",
          "[]": "N/A",
          "=": "{0} = {1}",
          "+=": "{0} = ({0} + {1})",
          "-=": "{0} = ({0} - {1})",
          "*=": "{0} = ({0} * {1})",
          "/=": "{0} = ({0} / {1})",
          "**=": "{0} = POWER({0},{1})",
          "//=": "{0} = POWER({0},(1/{1}))",
          "%=": "{0} = MOD({0},{1})",
          "&=": "{0} = {0} & {1} ",
          "|=": "{0} = {0} | {1}",
          "^=": "{0} = {0} ^ {1}",
          "<<=": "{0} = {0} << {1}",
          ">>=": "{0} = {0} >> {1}"
        },
        "ternary": {
          "?": "IF {0} THEN {1} ELSE {2} END"
        }
      },
      "functions": {
        "general": {
          "as": "{value} AS {alias}",
          "desc": "{0} desc",
          "asc": "{0} asc",
          "between": "{0} BETWEEN {1} AND {2}",
          "includes": " {1} IN ({0})",
          "contains": " {1} IN ({0})",
          "in": " {0} IN ({1})",
          "distinct": "DISTINCT {0} "
        },
        "numeric": {
          "abs": "ABS({0})",
          "acos": "ACOS({0})",
          "asin": "ASIN({0})",
          "atan": "ATAN({0})",
          "atan2": "ATAN2({0},{1})",
          "ceil": "CEIL({0})",
          "cos": "COS({0})",
          "cosh": "COSH({0})",
          "exp": "EXP({0})",
          "floor": "FLOOR({0})",
          "ln": "LN({0})",
          "log10": "LOG10({0})",
          "log": "LOG({0},{1})",
          "remainder": "REMAINDER({0},{1})",
          "round": "ROUND({0},{1})",
          "sign": "SIGN({0})",
          "sin": "SIN({0})",
          "sinh": "SINH({0})",
          "tan": "TAN({0})",
          "tanh": "TANH({0})",
          "trunc": "TRUNC({0},{1})",
          "toNumber": "CAST({0} AS NUMBER)"
        },
        "string": {
          "chr": "CHR({0})",
          "initcap": "INITCAP({0})",
          "lower": "LOWER({0})",
          "lpad": "LPAD({0},{1},{2})",
          "ltrim": "LTRIM({0})",
          "regExpReplace": "REGEXP_REPLACE({0},{1})",
          "regExpSubstr": "REGEXP_SUBSTR({0},{1})",
          "replace": "REPLACE({0},{1},{2})",
          "rpad": "RPAD({0},{1},{2})",
          "rtrim": "RTRIM({0})",
          "substr": "SUBSTR({0},{1},{2})",
          "substring": "SUBSTR({0},{1},{2})",
          "strCount": "(LENGTH({0})-LENGTH(REPLACE({0},{1},'')))",
          "trim": "TRIM({0})",
          "upper": "UPPER({0})",
          "length": "LENGTH({0})",
          "mask": "Concat(LEFT({0},3),'***',RIGHT({0},3))",
          "parse": "json_value({0})",
          "toString": "CAST({0} AS VARCHAR2)",
          "like": "{0} LIKE {1}",
          "startsWith": "{0} LIKE '{1}%'",
          "startWith": "{0} LIKE '{1}%'",
          "includes": "{0} LIKE '%{1}%'"
        },
        "dateTime": {
          "now": "SYSTIMESTAMP",
          "curTime": "CAST(SYSTIMESTAMP AS TIME)",
          "today": "TRUNC(SYSDATE)",
          "dateTime": "CAST({0} AS TIMESTAMP)",
          "date": "CAST({0} AS DATE)",
          "time": "CAST({0} AS TIME)",
          "year": "EXTRACT(YEAR FROM {0})",
          "month": "EXTRACT(MONTH FROM {0})",
          "day": "DAY(DAY FROM {0})",
          "weekday": "TO_NUMBER(TO_CHAR({0}, 'D'))",
          "hour": "EXTRACT(HOUR FROM {0})",
          "minute": "EXTRACT(MINUTE FROM {0})",
          "second": "EXTRACT(SECOND FROM {0})",
          "millisecond": "EXTRACT(MILLISECOND FROM {0})",
          "addYear": "{0} + interval '{1}' YEAR",
          "addMonth": "ADD_MONTHS({0},{1})",
          "addDay": "{0} + {1}",
          "addHour": "{0} + interval '{1}' HOUR",
          "addMinute": "{0} + interval '{1}' MINUTE",
          "addSecond": "{0} + interval '{1}' SECOND",
          "addMillisecond": "{0} + interval '{1}' MILLISECOND",
          "addTime": "ADDTIME({0},{1})",
          "subtractTime": "SUBTIME({0},{1})",
          "dayDiff": "DATEDIFF({0},{1})",
          "hourDiff": "TIMESTAMPDIFF(HOUR,({0},{1})",
          "secondDiff": "TIMESTAMPDIFF(SECOND,({0},{1})",
          "millisecondDiff": "TIMESTAMPDIFF(MICROSECOND,({0},{1})",
          "dayToDate": "DATE_FORMAT(FROM_UNIXTIME({0}*24*3600*1000), '%Y-%m-%dT%TZ')",
          "hourToDate": "DATE_FORMAT(FROM_UNIXTIME({0}*3600*1000), '%Y-%m-%dT%TZ')",
          "secondToDate": "DATE_FORMAT(FROM_UNIXTIME({0}*1000), '%Y-%m-%dT%TZ')",
          "millisecondToDate": "DATE_FORMAT(FROM_UNIXTIME({0}), '%Y-%m-%dT%TZ')",
          "dateToString": "TO_CHAR({0},'YYYY-MM-DD\"T\"HH24:MI:SSTZH:TZM')"
        },
        "metadata": {
          "user": "USER",
          "source": "SYS_CONTEXT('USERENV','DB_NAME')"
        },
        "null": {
          "nvl": "NVL({0},{1})",
          "nvl2": "NVL2({0},{1},{2})",
          "isNull": "({0} IS NULL)",
          "isNotNull": "({0} IS NOT NULL)"
        },
        "multiple": {
          "concat": "{accumulated} || {value}"
        },
        "group": {
          "avg": "AVG({0})",
          "count": "COUNT({0})",
          "first": "FIRST({0})",
          "last": "LAST({0})",
          "max": "MAX({0})",
          "min": "MIN({0})",
          "sum": "SUM({0})"
        }
      }
    },
    "SqlServer": {
      "dbTypes": {
        "boolean": "BIT",
        "integer": "INTEGER",
        "decimal": "DECIMAL(10,4)",
        "string": "VARCHAR({0})",
        "dateTime": "DATETIME",
        "date": "DATE",
        "time": "TIME",
        "text": "TEXT"
      },
      "ddl": {
        "createPk": "PRIMARY KEY ({columns})",
        "incrementalColumDefine": "{name} {type} {required} IDENTITY (1, 1)",
        "dropPk": "DROP CONSTRAINT {name}",
        "dropUk": "DROP CONSTRAINT {name}",
        "dropFk": "DROP CONSTRAINT {name}",
        "dropIndex": "DROP INDEX {name} ON {table}",
        "alterProperty": "ALTER COLUMN {columnDefine}",
        "alterPropertyType": "{name} {type}",
        "alterPropertyNullable": "{name} NULL",
        "alterPropertyNotNullable": "{name} NOT NULL",
        "createDatabase": "CREATE DATABASE IF NOT EXISTS {name}",
        "createEntity": "CREATE TABLE {name} ({define})",
        "createSequence": "CREATE SEQUENCE {name} START WITH 1 INCREMENT BY 1 MAXVALUE 999999999999 MINVALUE 1",
        "columnDefine": "{name} {type} {required} ",
        "createUk": "CONSTRAINT {name} UNIQUE ({columns})",
        "createFk": "CONSTRAINT {name} FOREIGN KEY ({column}) REFERENCES {fTable} ({fColumn})",
        "createIndex": "CREATE INDEX {name} ON {table} ({columns})",
        "alterTable": "ALTER TABLE {name}",
        "addProperty": "ADD {columnDefine}",
        "addPk": "ADD CONSTRAINT {name} PRIMARY KEY ({columns})",
        "addUk": "ADD CONSTRAINT {name} UNIQUE ({columns})",
        "addFk": "ADD CONSTRAINT {name} FOREIGN KEY ({column}) REFERENCES {fTable} ({fColumn})",
        "dropDatabase": "DROP DATABASE IF EXISTS {name}",
        "dropEntity": "DROP TABLE IF EXISTS {name}",
        "dropSequence": "DROP SEQUENCE {name}",
        "dropProperty": "DROP COLUMN {name}",
        "truncateEntity": "TRUNCATE TABLE {name}"
      },
      "dml": {
        "insert": "INSERT INTO {name}({fields}) OUTPUT INSERTED.{autoIncrementField} VALUES({values})",
        "update": "UPDATE {alias} SET {assigns} FROM {name} {alias}",
        "delete": "DELETE FROM {name} {alias}",
        "bulkInsert": "INSERT INTO {name}({fields})",
        "page": "{sentence} OFFSET {offset} ROWS FETCH NEXT {records} ROWS ONLY",
        "map": "SELECT {0}",
        "select": "SELECT {0}",
        "distinct": "SELECT DISTINCT {0}",
        "filter": "WHERE {0}",
        "where": "WHERE {0}",
        "groupBy": "GROUP BY {0}",
        "having": "HAVING {0}",
        "sort": "ORDER BY {0}",
        "order": "ORDER BY {0}",
        "remove": "DELETE FROM {name} {alias}",
        "from": "FROM {name} {alias} ",
        "join": "INNER JOIN {name} {alias} ON {relation}"
      },
      "others": {
        "delimiter": "[{name}]",
        "separatorSql": " \\nGO",
        "variable": "@{name}",
        "false": 0,
        "true": 1,
        "string": "'{name}'",
        "notNullable": "NOT NULL",
        "field": "{entityAlias}.{name}",
        "column": "{name}",
        "null": "NULL",
        "sequenceNextVal": "{name}.nextval",
        "solveComposite": false
      },
      "functions": {
        "numeric": {
          "atan2": "ATN2({0},{1})",
          "ceil": "CEILING({0})",
          "trunc": "ROUND({0},{1},1)",
          "ln": "LOG({0})",
          "log": "LOG({1},{0})",
          "abs": "ABS({0})",
          "acos": "ACOS({0})",
          "asin": "ASIN({0})",
          "atan": "ATAN({0})",
          "cos": "COS({0})",
          "cosh": "COSH({0})",
          "exp": "EXP({0})",
          "floor": "FLOOR({0})",
          "log10": "LOG10({0})",
          "remainder": "REMAINDER({0},{1})",
          "round": "ROUND({0},{1})",
          "sign": "SIGN({0})",
          "sin": "SIN({0})",
          "sinh": "SINH({0})",
          "tan": "TAN({0})",
          "tanh": "TANH({0})",
          "toNumber": "CAST({0} AS NUMBER)"
        },
        "general": {
          "as": "{value} AS {alias}",
          "desc": "{0} desc",
          "asc": "{0} asc",
          "between": "{0} BETWEEN {1} AND {2}",
          "includes": " {1} IN ({0})",
          "contains": " {1} IN ({0})",
          "in": " {0} IN ({1})",
          "distinct": "DISTINCT {0} "
        },
        "string": {
          "chr": "CHR({0})",
          "initcap": "INITCAP({0})",
          "lower": "LOWER({0})",
          "lpad": "LPAD({0},{1},{2})",
          "ltrim": "LTRIM({0})",
          "regExpReplace": "REGEXP_REPLACE({0},{1})",
          "regExpSubstr": "REGEXP_SUBSTR({0},{1})",
          "replace": "REPLACE({0},{1},{2})",
          "rpad": "RPAD({0},{1},{2})",
          "rtrim": "RTRIM({0})",
          "substr": "SUBSTR({0},{1},{2})",
          "substring": "SUBSTR({0},{1},{2})",
          "strCount": "(LENGTH({0})-LENGTH(REPLACE({0},{1},'')))",
          "trim": "TRIM({0})",
          "upper": "UPPER({0})",
          "length": "LENGTH({0})",
          "mask": "Concat(LEFT({0},3),'***',RIGHT({0},3))",
          "parse": "json_value({0})",
          "toString": "CAST({0} AS VARCHAR2)",
          "like": "{0} LIKE {1}",
          "startsWith": "{0} LIKE '{1}%'",
          "startWith": "{0} LIKE '{1}%'",
          "includes": "{0} LIKE '%{1}%'"
        },
        "dateTime": {
          "now": "SYSTIMESTAMP",
          "curTime": "CAST(SYSTIMESTAMP AS TIME)",
          "today": "TRUNC(SYSDATE)",
          "dateTime": "CAST({0} AS TIMESTAMP)",
          "date": "CAST({0} AS DATE)",
          "time": "CAST({0} AS TIME)",
          "year": "EXTRACT(YEAR FROM {0})",
          "month": "EXTRACT(MONTH FROM {0})",
          "day": "DAY(DAY FROM {0})",
          "weekday": "TO_NUMBER(TO_CHAR({0}, 'D'))",
          "hour": "EXTRACT(HOUR FROM {0})",
          "minute": "EXTRACT(MINUTE FROM {0})",
          "second": "EXTRACT(SECOND FROM {0})",
          "millisecond": "EXTRACT(MILLISECOND FROM {0})",
          "addYear": "{0} + interval '{1}' YEAR",
          "addMonth": "ADD_MONTHS({0},{1})",
          "addDay": "{0} + {1}",
          "addHour": "{0} + interval '{1}' HOUR",
          "addMinute": "{0} + interval '{1}' MINUTE",
          "addSecond": "{0} + interval '{1}' SECOND",
          "addMillisecond": "{0} + interval '{1}' MILLISECOND",
          "addTime": "ADDTIME({0},{1})",
          "subtractTime": "SUBTIME({0},{1})",
          "dayDiff": "DATEDIFF({0},{1})",
          "hourDiff": "TIMESTAMPDIFF(HOUR,({0},{1})",
          "secondDiff": "TIMESTAMPDIFF(SECOND,({0},{1})",
          "millisecondDiff": "TIMESTAMPDIFF(MICROSECOND,({0},{1})",
          "dayToDate": "DATE_FORMAT(FROM_UNIXTIME({0}*24*3600*1000), '%Y-%m-%dT%TZ')",
          "hourToDate": "DATE_FORMAT(FROM_UNIXTIME({0}*3600*1000), '%Y-%m-%dT%TZ')",
          "secondToDate": "DATE_FORMAT(FROM_UNIXTIME({0}*1000), '%Y-%m-%dT%TZ')",
          "millisecondToDate": "DATE_FORMAT(FROM_UNIXTIME({0}), '%Y-%m-%dT%TZ')",
          "dateToString": "TO_CHAR({0},'YYYY-MM-DD\"T\"HH24:MI:SSTZH:TZM')"
        },
        "metadata": {
          "user": "USER",
          "source": "SYS_CONTEXT('USERENV','DB_NAME')"
        },
        "null": {
          "nvl": "NVL({0},{1})",
          "nvl2": "NVL2({0},{1},{2})",
          "isNull": "({0} IS NULL)",
          "isNotNull": "({0} IS NOT NULL)"
        },
        "multiple": {
          "concat": "{accumulated} || {value}"
        },
        "group": {
          "avg": "AVG({0})",
          "count": "COUNT({0})",
          "first": "FIRST({0})",
          "last": "LAST({0})",
          "max": "MAX({0})",
          "min": "MIN({0})",
          "sum": "SUM({0})"
        }
      },
      "format": {
        "dateTime": "yyyy-LL-dd HH:mm:ss",
        "date": "yyyy-LL-dd",
        "time": "HH:mm:ss"
      },
      "operators": {
        "unary": {
          "-": "- {0}",
          "~": "~ {0}",
          "!": "NOT {0}"
        },
        "binary": {
          "+": "({0} + {1})",
          "-": "({0} - {1})",
          "*": "({0} * {1})",
          "/": "({0} / {1})",
          "**": "POWER({0},{1})",
          "//": "POWER({0},(1/{1}))",
          "%": "MOD({0},{1})",
          "&": "{0} & {1}",
          "|": "{0} | {1}",
          "^": "{0} ^ {1}",
          "<<": "{0} << {1}",
          ">>": "{0} >> {1}",
          "==": "{0} = {1}",
          "===": "{0} = {1}",
          "!=": "{0} <> {1}",
          "!==": "{0} <> {1}",
          ">": "{0} > {1}",
          "<": "{0} < {1}",
          ">=": "{0} >= {1}",
          "<=": "{0} <= {1}",
          "&&": "({0} AND {1})",
          "||": "({0} OR {1})",
          "[]": "N/A",
          "=": "{0} = {1}",
          "+=": "{0} = ({0} + {1})",
          "-=": "{0} = ({0} - {1})",
          "*=": "{0} = ({0} * {1})",
          "/=": "{0} = ({0} / {1})",
          "**=": "{0} = POWER({0},{1})",
          "//=": "{0} = POWER({0},(1/{1}))",
          "%=": "{0} = MOD({0},{1})",
          "&=": "{0} = {0} & {1} ",
          "|=": "{0} = {0} | {1}",
          "^=": "{0} = {0} ^ {1}",
          "<<=": "{0} = {0} << {1}",
          ">>=": "{0} = {0} >> {1}"
        },
        "ternary": {
          "?": "IF {0} THEN {1} ELSE {2} END"
        }
      }
    }
  }
}