name: query
schema: 'northwind:0.0.2'
context:
  a:
    id: 1
  b:
    minValue: 10
    from: '1997-01-01'
    to: '1997-12-31'
test:
  - name: query 7
    lambda: >-
      () => Products.filter(p => p.discontinued != false).map(p => ({ category:
      p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock
      })).sort(p => [p.category, desc(p.name)])
    sentences:
      - dialect: mariadb
        sentence: >-
          SELECT c.CategoryName AS `category`, p.ProductName AS `name`,
          p.QuantityPerUnit AS `quantity`, p.UnitsInStock AS `inStock` FROM
          Products p INNER JOIN Categories c ON c.CategoryID = p.CategoryID
          WHERE p.Discontinued <> FALSE ORDER BY `category`, `name` desc ;
      - dialect: mssql
        sentence: >-
          SELECT c.CategoryName AS [category], p.ProductName AS [name],
          p.QuantityPerUnit AS [quantity], p.UnitsInStock AS [inStock] FROM
          Products p INNER JOIN Categories c ON c.CategoryID = p.CategoryID
          WHERE p.Discontinued <> FALSE ORDER BY [category], [name] desc ;
      - dialect: mysql
        sentence: >-
          SELECT c.CategoryName AS `category`, p.ProductName AS `name`,
          p.QuantityPerUnit AS `quantity`, p.UnitsInStock AS `inStock` FROM
          Products p INNER JOIN Categories c ON c.CategoryID = p.CategoryID
          WHERE p.Discontinued <> FALSE ORDER BY `category`, `name` desc ;
      - dialect: oracle
        sentence: >-
          SELECT c.CategoryName AS "category", p.ProductName AS "name",
          p.QuantityPerUnit AS "quantity", p.UnitsInStock AS "inStock" FROM
          Products p INNER JOIN Categories c ON c.CategoryID = p.CategoryID
          WHERE p.Discontinued <> FALSE ORDER BY "category", "name" desc ;
      - dialect: postgres
        sentence: >-
          SELECT c.CategoryName AS "category", p.ProductName AS "name",
          p.QuantityPerUnit AS "quantity", p.UnitsInStock AS "inStock" FROM
          Products p INNER JOIN Categories c ON c.CategoryID = p.CategoryID
          WHERE p.Discontinued <> FALSE ORDER BY "category", "name" desc ;
    errors: 0
    expression: ' Products.filter(p => p.discontinued != false).map(p => ({ category: p.category.name, name: p.name, quantity: p.quantity, inStock: p.inStock })).sort(p => [p.category, desc(p.name)])'
    completeExpression: >-
      Products.filter(p=>(p.discontinued!=false)).map(p=>{category:p.category.name,name:p.name,quantity:p.quantity,inStock:p.inStock}).sort(p=>[p.category,desc(p.name)])
    model:
      category: string
      name: string
      quantity: string
      inStock: decimal
    parameters: []
    fields:
      - name: category
        type: string
      - name: name
        type: string
      - name: quantity
        type: string
      - name: inStock
        type: decimal
    executions: []
errors: 0
