name: groupBy
data:
  a:
    id: 1
test:
  - name: groupBy 1
    sentences:
      - stage: mysql
        sentence:
          entity: Products
          dialect: mysql
          dataSource: mysql
          sentence: 'SELECT MAX(p.UnitPrice) AS `maxPrice` FROM Products p  '
          childs: []
      - stage: postgres
        sentence:
          entity: Products
          dialect: postgres
          dataSource: postgres
          sentence: 'SELECT MAX(p.UnitPrice) AS "maxPrice" FROM Products p  '
          childs: []
      - stage: mariadb
        sentence:
          entity: Products
          dialect: mariadb
          dataSource: mariadb
          sentence: 'SELECT MAX(p.UnitPrice) AS `maxPrice` FROM Products p  '
          childs: []
    errors: 0
    expression: Products.map(p=>{maxPrice:max(p.price)})
    normalizeExpression: Products.map(p=>{maxPrice:max(p.price)})
    model:
      - name: maxPrice
        type: decimal
    parameters: []
    constraints:
      entity: Products
      constraints: []
    metadata:
      name: select
      classtype: Sentence
      children:
        - name: Products.p
          classtype: From
          children: []
          type: any
        - name: map
          classtype: Map
          children:
            - name: obj
              classtype: Obj
              children:
                - name: maxPrice
                  classtype: KeyValue
                  children:
                    - name: max
                      classtype: FunctionRef
                      children:
                        - name: price
                          classtype: Field
                          children: []
                          type: decimal
                          entity: Products
                          alias: p
                      type: any
                  type: any
              type: object
          type: any
      type: any
      columns:
        - name: maxPrice
          type: decimal
      parameters: []
      entity: Products
      constraints: []
    executions:
      - stage: mysql
      - stage: postgres
      - stage: mariadb
    result:
      - maxPrice: 263.5
  - name: groupBy 2
    sentences:
      - stage: mysql
        sentence:
          entity: Products
          dialect: mysql
          dataSource: mysql
          sentence: 'SELECT MIN(p.UnitPrice) AS `minPrice` FROM Products p  '
          childs: []
      - stage: postgres
        sentence:
          entity: Products
          dialect: postgres
          dataSource: postgres
          sentence: 'SELECT MIN(p.UnitPrice) AS "minPrice" FROM Products p  '
          childs: []
      - stage: mariadb
        sentence:
          entity: Products
          dialect: mariadb
          dataSource: mariadb
          sentence: 'SELECT MIN(p.UnitPrice) AS `minPrice` FROM Products p  '
          childs: []
    errors: 0
    expression: Products.map(p=>{minPrice:min(p.price)})
    normalizeExpression: Products.map(p=>{minPrice:min(p.price)})
    model:
      - name: minPrice
        type: decimal
    parameters: []
    constraints:
      entity: Products
      constraints: []
    metadata:
      name: select
      classtype: Sentence
      children:
        - name: Products.p
          classtype: From
          children: []
          type: any
        - name: map
          classtype: Map
          children:
            - name: obj
              classtype: Obj
              children:
                - name: minPrice
                  classtype: KeyValue
                  children:
                    - name: min
                      classtype: FunctionRef
                      children:
                        - name: price
                          classtype: Field
                          children: []
                          type: decimal
                          entity: Products
                          alias: p
                      type: any
                  type: any
              type: object
          type: any
      type: any
      columns:
        - name: minPrice
          type: decimal
      parameters: []
      entity: Products
      constraints: []
    executions:
      - stage: mysql
      - stage: postgres
      - stage: mariadb
    result:
      - minPrice: 2.5
  - name: groupBy 3
    sentences:
      - stage: mysql
        sentence:
          entity: Products
          dialect: mysql
          dataSource: mysql
          sentence: 'SELECT SUM(p.UnitPrice) AS `total` FROM Products p  '
          childs: []
      - stage: postgres
        sentence:
          entity: Products
          dialect: postgres
          dataSource: postgres
          sentence: 'SELECT SUM(p.UnitPrice) AS "total" FROM Products p  '
          childs: []
      - stage: mariadb
        sentence:
          entity: Products
          dialect: mariadb
          dataSource: mariadb
          sentence: 'SELECT SUM(p.UnitPrice) AS `total` FROM Products p  '
          childs: []
    errors: 0
    expression: Products.map(p=>{total:sum(p.price)})
    normalizeExpression: Products.map(p=>{total:sum(p.price)})
    model:
      - name: total
        type: any
    parameters: []
    constraints:
      entity: Products
      constraints: []
    metadata:
      name: select
      classtype: Sentence
      children:
        - name: Products.p
          classtype: From
          children: []
          type: any
        - name: map
          classtype: Map
          children:
            - name: obj
              classtype: Obj
              children:
                - name: total
                  classtype: KeyValue
                  children:
                    - name: sum
                      classtype: FunctionRef
                      children:
                        - name: price
                          classtype: Field
                          children: []
                          type: decimal
                          entity: Products
                          alias: p
                      type: any
                  type: any
              type: object
          type: any
      type: any
      columns:
        - name: total
          type: any
      parameters: []
      entity: Products
      constraints: []
    executions:
      - stage: mysql
      - stage: postgres
      - stage: mariadb
    result:
      - total: 2222.71
  - name: groupBy 4
    sentences:
      - stage: mysql
        sentence:
          entity: Products
          dialect: mysql
          dataSource: mysql
          sentence: 'SELECT AVG(p.UnitPrice) AS `average` FROM Products p  '
          childs: []
      - stage: postgres
        sentence:
          entity: Products
          dialect: postgres
          dataSource: postgres
          sentence: 'SELECT AVG(p.UnitPrice) AS "average" FROM Products p  '
          childs: []
      - stage: mariadb
        sentence:
          entity: Products
          dialect: mariadb
          dataSource: mariadb
          sentence: 'SELECT AVG(p.UnitPrice) AS `average` FROM Products p  '
          childs: []
    errors: 1
    expression: Products.map(p=>{average:avg(p.price)})
    normalizeExpression: Products.map(p=>{average:avg(p.price)})
    model:
      - name: average
        type: any
    parameters: []
    constraints:
      entity: Products
      constraints: []
    metadata:
      name: select
      classtype: Sentence
      children:
        - name: Products.p
          classtype: From
          children: []
          type: any
        - name: map
          classtype: Map
          children:
            - name: obj
              classtype: Obj
              children:
                - name: average
                  classtype: KeyValue
                  children:
                    - name: avg
                      classtype: FunctionRef
                      children:
                        - name: price
                          classtype: Field
                          children: []
                          type: decimal
                          entity: Products
                          alias: p
                      type: any
                  type: any
              type: object
          type: any
      type: any
      columns:
        - name: average
          type: any
      parameters: []
      entity: Products
      constraints: []
    executions:
      - stage: mysql
      - stage: postgres
        error: not equal mysql
        result:
          - average: 28.866363636363637
      - stage: mariadb
    result:
      - average: 28.86636364
  - name: groupBy 5
    sentences:
      - stage: mysql
        sentence:
          entity: Products
          dialect: mysql
          dataSource: mysql
          sentence: 'SELECT COUNT(1) AS `count` FROM Products p  '
          childs: []
      - stage: postgres
        sentence:
          entity: Products
          dialect: postgres
          dataSource: postgres
          sentence: 'SELECT COUNT(1) AS "count" FROM Products p  '
          childs: []
      - stage: mariadb
        sentence:
          entity: Products
          dialect: mariadb
          dataSource: mariadb
          sentence: 'SELECT COUNT(1) AS `count` FROM Products p  '
          childs: []
    errors: 0
    expression: Products.map(p=>{count:count(1)})
    normalizeExpression: Products.map(p=>{count:count(1)})
    model:
      - name: count
        type: any
    parameters: []
    constraints:
      entity: Products
      constraints: []
    metadata:
      name: select
      classtype: Sentence
      children:
        - name: Products.p
          classtype: From
          children: []
          type: any
        - name: map
          classtype: Map
          children:
            - name: obj
              classtype: Obj
              children:
                - name: count
                  classtype: KeyValue
                  children:
                    - name: count
                      classtype: FunctionRef
                      children:
                        - name: 1
                          classtype: Constant2
                          children: []
                          type: number
                      type: any
                  type: any
              type: object
          type: any
      type: any
      columns:
        - name: count
          type: any
      parameters: []
      entity: Products
      constraints: []
    executions:
      - stage: mysql
      - stage: postgres
      - stage: mariadb
    result:
      - count: 77
  - name: groupBy 6
    sentences:
      - stage: mysql
        sentence:
          entity: Products
          dialect: mysql
          dataSource: mysql
          sentence: >-
            SELECT p.CategoryID AS `category`, MAX(p.UnitPrice) AS
            `largestPrice` FROM Products p  GROUP BY p.CategoryID 
          childs: []
      - stage: postgres
        sentence:
          entity: Products
          dialect: postgres
          dataSource: postgres
          sentence: >-
            SELECT p.CategoryID AS "category", MAX(p.UnitPrice) AS
            "largestPrice" FROM Products p  GROUP BY p.CategoryID 
          childs: []
      - stage: mariadb
        sentence:
          entity: Products
          dialect: mariadb
          dataSource: mariadb
          sentence: >-
            SELECT p.CategoryID AS `category`, MAX(p.UnitPrice) AS
            `largestPrice` FROM Products p  GROUP BY p.CategoryID 
          childs: []
    errors: 1
    expression: Products.map(p=>{category:p.categoryId,largestPrice:max(p.price)})
    normalizeExpression: Products.map(p=>{category:p.categoryId,largestPrice:max(p.price)})
    model:
      - name: category
        type: integer
      - name: largestPrice
        type: decimal
    parameters: []
    constraints:
      entity: Products
      constraints: []
    metadata:
      name: select
      classtype: Sentence
      children:
        - name: Products.p
          classtype: From
          children: []
          type: any
        - name: map
          classtype: Map
          children:
            - name: obj
              classtype: Obj
              children:
                - name: category
                  classtype: KeyValue
                  children:
                    - name: categoryId
                      classtype: Field
                      children: []
                      type: integer
                      entity: Products
                      alias: p
                  type: any
                - name: largestPrice
                  classtype: KeyValue
                  children:
                    - name: max
                      classtype: FunctionRef
                      children:
                        - name: price
                          classtype: Field
                          children: []
                          type: decimal
                          entity: Products
                          alias: p
                      type: any
                  type: any
              type: object
          type: any
        - name: groupBy
          classtype: GroupBy
          children:
            - name: categoryId
              classtype: Field
              children: []
              type: integer
              entity: Products
              alias: p
          type: any
      type: any
      columns:
        - name: category
          type: integer
        - name: largestPrice
          type: decimal
      parameters: []
      entity: Products
      constraints: []
    executions:
      - stage: mysql
      - stage: postgres
        error: not equal mysql
        result:
          - category: 8
            largestPrice: 62.5
          - category: 7
            largestPrice: 53
          - category: 1
            largestPrice: 263.5
          - category: 5
            largestPrice: 38
          - category: 4
            largestPrice: 55
          - category: 2
            largestPrice: 43.9
          - category: 6
            largestPrice: 123.79
          - category: 3
            largestPrice: 81
      - stage: mariadb
    result:
      - category: 1
        largestPrice: 263.5
      - category: 2
        largestPrice: 43.9
      - category: 3
        largestPrice: 81
      - category: 4
        largestPrice: 55
      - category: 5
        largestPrice: 38
      - category: 6
        largestPrice: 123.79
      - category: 7
        largestPrice: 53
      - category: 8
        largestPrice: 62.5
  - name: groupBy 7
    sentences:
      - stage: mysql
        sentence:
          entity: Products
          dialect: mysql
          dataSource: mysql
          sentence: >-
            SELECT c.CategoryName AS `category`, MAX(p.UnitPrice) AS
            `largestPrice` FROM Products p INNER JOIN Categories c ON
            c.CategoryID = p.CategoryID GROUP BY c.CategoryName 
          childs: []
      - stage: postgres
        sentence:
          entity: Products
          dialect: postgres
          dataSource: postgres
          sentence: >-
            SELECT c.CategoryName AS "category", MAX(p.UnitPrice) AS
            "largestPrice" FROM Products p INNER JOIN Categories c ON
            c.CategoryID = p.CategoryID GROUP BY c.CategoryName 
          childs: []
      - stage: mariadb
        sentence:
          entity: Products
          dialect: mariadb
          dataSource: mariadb
          sentence: >-
            SELECT c.CategoryName AS `category`, MAX(p.UnitPrice) AS
            `largestPrice` FROM Products p INNER JOIN Categories c ON
            c.CategoryID = p.CategoryID GROUP BY c.CategoryName 
          childs: []
    errors: 1
    expression: Products.map(p=>{category:p.category.name,largestPrice:max(p.price)})
    normalizeExpression: Products.map(p=>{category:p.category.name,largestPrice:max(p.price)})
    model:
      - name: category
        type: string
      - name: largestPrice
        type: decimal
    parameters: []
    constraints:
      entity: Products
      constraints: []
    metadata:
      name: select
      classtype: Sentence
      children:
        - name: Products.p
          classtype: From
          children: []
          type: any
        - name: map
          classtype: Map
          children:
            - name: obj
              classtype: Obj
              children:
                - name: category
                  classtype: KeyValue
                  children:
                    - name: name
                      classtype: Field
                      children: []
                      type: string
                      entity: Categories
                      alias: c
                  type: any
                - name: largestPrice
                  classtype: KeyValue
                  children:
                    - name: max
                      classtype: FunctionRef
                      children:
                        - name: price
                          classtype: Field
                          children: []
                          type: decimal
                          entity: Products
                          alias: p
                      type: any
                  type: any
              type: object
          type: any
        - name: groupBy
          classtype: GroupBy
          children:
            - name: name
              classtype: Field
              children: []
              type: string
              entity: Categories
              alias: c
          type: any
        - name: Categories.c
          classtype: Join
          children:
            - name: '=='
              classtype: Operator
              children:
                - name: id
                  classtype: Field
                  children: []
                  type: integer
                  entity: Categories
                  alias: c
                - name: categoryId
                  classtype: Field
                  children: []
                  type: integer
                  entity: Products
                  alias: p
              type: any
          type: any
      type: any
      columns:
        - name: category
          type: string
        - name: largestPrice
          type: decimal
      parameters: []
      entity: Products
      constraints: []
    executions:
      - stage: mysql
      - stage: postgres
        error: not equal mysql
        result:
          - category: Grains/Cereals
            largestPrice: 38
          - category: Beverages
            largestPrice: 263.5
          - category: Dairy Products
            largestPrice: 55
          - category: Seafood
            largestPrice: 62.5
          - category: Produce
            largestPrice: 53
          - category: Condiments
            largestPrice: 43.9
          - category: Meat/Poultry
            largestPrice: 123.79
          - category: Confections
            largestPrice: 81
      - stage: mariadb
    result:
      - category: Beverages
        largestPrice: 263.5
      - category: Condiments
        largestPrice: 43.9
      - category: Confections
        largestPrice: 81
      - category: Dairy Products
        largestPrice: 55
      - category: Grains/Cereals
        largestPrice: 38
      - category: Meat/Poultry
        largestPrice: 123.79
      - category: Produce
        largestPrice: 53
      - category: Seafood
        largestPrice: 62.5
  - name: groupBy 8
    data: a
    sentences:
      - stage: mysql
        sentence:
          entity: Products
          dialect: mysql
          dataSource: mysql
          sentence: >-
            SELECT p.ProductName AS `name`, p.UnitPrice AS `source`,
            ABS(p.UnitPrice) AS `result` FROM Products p  WHERE p.ProductID = ? 
          childs: []
      - stage: postgres
        sentence:
          entity: Products
          dialect: postgres
          dataSource: postgres
          sentence: >-
            SELECT p.ProductName AS "name", p.UnitPrice AS "source",
            ABS(p.UnitPrice) AS "result" FROM Products p  WHERE p.ProductID =
            $1 
          childs: []
      - stage: mariadb
        sentence:
          entity: Products
          dialect: mariadb
          dataSource: mariadb
          sentence: >-
            SELECT p.ProductName AS `name`, p.UnitPrice AS `source`,
            ABS(p.UnitPrice) AS `result` FROM Products p  WHERE p.ProductID = ? 
          childs: []
    errors: 0
    expression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:p.price,result:abs(p.price)})
    normalizeExpression: >-
      Products.filter(p=>(p.id===id)).map(p=>{name:p.name,source:p.price,result:abs(p.price)})
    model:
      - name: name
        type: string
      - name: source
        type: decimal
      - name: result
        type: any
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      name: select
      classtype: Sentence
      children:
        - name: filter
          classtype: Filter
          children:
            - name: '==='
              classtype: Operator
              children:
                - name: id
                  classtype: Field
                  children: []
                  type: integer
                  entity: Products
                  alias: p
                - name: id
                  classtype: Variable
                  children: []
                  type: integer
                  number: 1
              type: any
          type: any
        - name: Products.p
          classtype: From
          children: []
          type: any
        - name: map
          classtype: Map
          children:
            - name: obj
              classtype: Obj
              children:
                - name: name
                  classtype: KeyValue
                  children:
                    - name: name
                      classtype: Field
                      children: []
                      type: string
                      entity: Products
                      alias: p
                  type: any
                - name: source
                  classtype: KeyValue
                  children:
                    - name: price
                      classtype: Field
                      children: []
                      type: decimal
                      entity: Products
                      alias: p
                  type: any
                - name: result
                  classtype: KeyValue
                  children:
                    - name: abs
                      classtype: FunctionRef
                      children:
                        - name: price
                          classtype: Field
                          children: []
                          type: decimal
                          entity: Products
                          alias: p
                      type: any
                  type: any
              type: object
          type: any
      type: any
      columns:
        - name: name
          type: string
        - name: source
          type: decimal
        - name: result
          type: any
      parameters:
        - name: id
          type: integer
      entity: Products
      constraints: []
    executions:
      - stage: mysql
      - stage: postgres
      - stage: mariadb
    result:
      - name: Chai
        source: 18
        result: 18
  - name: groupBy 9
    sentences:
      - stage: mysql
        sentence:
          entity: Products
          dialect: mysql
          dataSource: mysql
          sentence: >-
            SELECT c.CategoryName AS `category`, MAX(p.UnitPrice) AS
            `largestPrice` FROM Products p INNER JOIN Categories c ON
            c.CategoryID = p.CategoryID GROUP BY c.CategoryName HAVING
            MAX(p.UnitPrice) > 100 
          childs: []
      - stage: postgres
        sentence:
          entity: Products
          dialect: postgres
          dataSource: postgres
          sentence: >-
            SELECT c.CategoryName AS "category", MAX(p.UnitPrice) AS
            "largestPrice" FROM Products p INNER JOIN Categories c ON
            c.CategoryID = p.CategoryID GROUP BY c.CategoryName HAVING
            MAX(p.UnitPrice) > 100 
          childs: []
      - stage: mariadb
        sentence:
          entity: Products
          dialect: mariadb
          dataSource: mariadb
          sentence: >-
            SELECT c.CategoryName AS `category`, MAX(p.UnitPrice) AS
            `largestPrice` FROM Products p INNER JOIN Categories c ON
            c.CategoryID = p.CategoryID GROUP BY c.CategoryName HAVING
            MAX(p.UnitPrice) > 100 
          childs: []
    errors: 0
    expression: >-
      Products.having(p=>(max(p.price)>100)).map(p=>{category:p.category.name,largestPrice:max(p.price)})
    normalizeExpression: >-
      Products.having(p=>(max(p.price)>100)).map(p=>{category:p.category.name,largestPrice:max(p.price)})
    model:
      - name: category
        type: string
      - name: largestPrice
        type: decimal
    parameters: []
    constraints:
      entity: Products
      constraints: []
    metadata:
      name: select
      classtype: Sentence
      children:
        - name: Products.p
          classtype: From
          children: []
          type: any
        - name: map
          classtype: Map
          children:
            - name: obj
              classtype: Obj
              children:
                - name: category
                  classtype: KeyValue
                  children:
                    - name: name
                      classtype: Field
                      children: []
                      type: string
                      entity: Categories
                      alias: c
                  type: any
                - name: largestPrice
                  classtype: KeyValue
                  children:
                    - name: max
                      classtype: FunctionRef
                      children:
                        - name: price
                          classtype: Field
                          children: []
                          type: decimal
                          entity: Products
                          alias: p
                      type: any
                  type: any
              type: object
          type: any
        - name: groupBy
          classtype: GroupBy
          children:
            - name: name
              classtype: Field
              children: []
              type: string
              entity: Categories
              alias: c
          type: any
        - name: having
          classtype: Having
          children:
            - name: '>'
              classtype: Operator
              children:
                - name: max
                  classtype: FunctionRef
                  children:
                    - name: price
                      classtype: Field
                      children: []
                      type: decimal
                      entity: Products
                      alias: p
                  type: any
                - name: 100
                  classtype: Constant2
                  children: []
                  type: number
              type: any
          type: any
        - name: Categories.c
          classtype: Join
          children:
            - name: '=='
              classtype: Operator
              children:
                - name: id
                  classtype: Field
                  children: []
                  type: integer
                  entity: Categories
                  alias: c
                - name: categoryId
                  classtype: Field
                  children: []
                  type: integer
                  entity: Products
                  alias: p
              type: any
          type: any
      type: any
      columns:
        - name: category
          type: string
        - name: largestPrice
          type: decimal
      parameters: []
      entity: Products
      constraints: []
    executions:
      - stage: mysql
      - stage: postgres
      - stage: mariadb
    result:
      - category: Beverages
        largestPrice: 263.5
      - category: Meat/Poultry
        largestPrice: 123.79
errors: 3
