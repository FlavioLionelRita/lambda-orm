import { orm,Helper } from '../../orm'
beforeAll(async () => {
	require('dotenv').config({ path: './test.env' })
	await orm.init()
})
describe('Complete Expression', () => {
	test('include 1', () => {
		const source = 'northwind_1.Orders.filter(p=>(p.id===id)).include(p=>p.customer)'
		const expected = 'northwind_1.Orders.filter(p=>(p.id===id)).map(p=>{id:p.id,customerId:p.customerId,employeeId:p.employeeId,orderDate:p.orderDate,requiredDate:p.requiredDate,shippedDate:p.shippedDate,shipViaId:p.shipViaId,freight:p.freight,name:p.name,address:p.address,city:p.city,region:p.region,postalCode:p.postalCode,country:p.country,__customerId:p.customerId}).include(p=>p.customer.filter(p=>includes(p.id,__parentId)).map(p=>{id:p.id,name:p.name,contact:p.contact,phone:p.phone,address:p.address,city:p.city,region:p.region,postalCode:p.postalCode,country:p.country,__parentId:p.id}))'
		const target = orm.expression(source).complete('northwind')
		expect(expected).toBe(target)
	})
	test('include 2', () => {
		const source = 'northwind_1.Orders.filter(p=>(p.id===id)).include(p=>p.details)'
		const expected = 'northwind_1.Orders.filter(p=>(p.id===id)).map(p=>{id:p.id,customerId:p.customerId,employeeId:p.employeeId,orderDate:p.orderDate,requiredDate:p.requiredDate,shippedDate:p.shippedDate,shipViaId:p.shipViaId,freight:p.freight,name:p.name,address:p.address,city:p.city,region:p.region,postalCode:p.postalCode,country:p.country,__id:p.id}).include(p=>p.details.filter(p=>includes(p.orderId,__parentId)).map(p=>{orderId:p.orderId,productId:p.productId,unitPrice:p.unitPrice,quantity:p.quantity,discount:p.discount,__parentId:p.orderId}))'
		const target = orm.expression(source).complete('northwind')
		expect(expected).toBe(target)
	})
	test('include 3', () => {
		const source = 'northwind_1.Orders.filter(p=>(p.id===id)).include(p=>[p.details,p.customer])'
		const expected = 'northwind_1.Orders.filter(p=>(p.id===id)).map(p=>{id:p.id,customerId:p.customerId,employeeId:p.employeeId,orderDate:p.orderDate,requiredDate:p.requiredDate,shippedDate:p.shippedDate,shipViaId:p.shipViaId,freight:p.freight,name:p.name,address:p.address,city:p.city,region:p.region,postalCode:p.postalCode,country:p.country,__id:p.id,__customerId:p.customerId}).include(p=>[p.details.filter(p=>includes(p.orderId,__parentId)).map(p=>{orderId:p.orderId,productId:p.productId,unitPrice:p.unitPrice,quantity:p.quantity,discount:p.discount,__parentId:p.orderId}),p.customer.filter(p=>includes(p.id,__parentId)).map(p=>{id:p.id,name:p.name,contact:p.contact,phone:p.phone,address:p.address,city:p.city,region:p.region,postalCode:p.postalCode,country:p.country,__parentId:p.id})])'
		const target = orm.expression(source).complete('northwind')
		expect(expected).toBe(target)
	})
	test('include 4', () => {
		const source = 'northwind_1.Orders.filter(p=>(p.id===id)).include(p=>[p.details.include(q=>q.product),p.customer])'
		const expected = 'northwind_1.Orders.filter(p=>(p.id===id)).map(p=>{id:p.id,customerId:p.customerId,employeeId:p.employeeId,orderDate:p.orderDate,requiredDate:p.requiredDate,shippedDate:p.shippedDate,shipViaId:p.shipViaId,freight:p.freight,name:p.name,address:p.address,city:p.city,region:p.region,postalCode:p.postalCode,country:p.country,__id:p.id,__customerId:p.customerId}).include(p=>[p.details.map(p=>{orderId:p.orderId,productId:p.productId,unitPrice:p.unitPrice,quantity:p.quantity,discount:p.discount,__productId:p.productId,__parentId:p.orderId}).filter(p=>includes(p.orderId,__parentId)).include(q=>q.product.filter(p=>includes(p.id,__parentId)).map(p=>{id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued,__parentId:p.id})),p.customer.filter(p=>includes(p.id,__parentId)).map(p=>{id:p.id,name:p.name,contact:p.contact,phone:p.phone,address:p.address,city:p.city,region:p.region,postalCode:p.postalCode,country:p.country,__parentId:p.id})])'
		const target = orm.expression(source).complete('northwind')
		expect(expected).toBe(target)
	})
	test('include 5', () => {
		const source = 'northwind_1.Orders.filter(p=>(p.id===id)).include(p=>[p.details.include(q=>q.product.include(p=>p.category)),p.customer])'
		const expected = 'northwind_1.Orders.filter(p=>(p.id===id)).map(p=>{id:p.id,customerId:p.customerId,employeeId:p.employeeId,orderDate:p.orderDate,requiredDate:p.requiredDate,shippedDate:p.shippedDate,shipViaId:p.shipViaId,freight:p.freight,name:p.name,address:p.address,city:p.city,region:p.region,postalCode:p.postalCode,country:p.country,__id:p.id,__customerId:p.customerId}).include(p=>[p.details.map(p=>{orderId:p.orderId,productId:p.productId,unitPrice:p.unitPrice,quantity:p.quantity,discount:p.discount,__productId:p.productId,__parentId:p.orderId}).filter(p=>includes(p.orderId,__parentId)).include(q=>q.product.map(p=>{id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued,__categoryId:p.categoryId,__parentId:p.id}).filter(p=>includes(p.id,__parentId)).include(p=>p.category.filter(p=>includes(p.id,__parentId)).map(p=>{id:p.id,name:p.name,description:p.description,__parentId:p.id}))),p.customer.filter(p=>includes(p.id,__parentId)).map(p=>{id:p.id,name:p.name,contact:p.contact,phone:p.phone,address:p.address,city:p.city,region:p.region,postalCode:p.postalCode,country:p.country,__parentId:p.id})])'
		const target = orm.expression(source).complete('northwind')
		expect(expected).toBe(target)
	})
	test('include 6', () => {
		const source = 'northwind_1.Orders.filter(p=>(p.id===id)).include(p=>[p.details.map(p=>{quantity:p.quantity,unitPrice:p.unitPrice,productId:p.productId}),p.customer])'
		const expected = 'northwind_1.Orders.filter(p=>(p.id===id)).map(p=>{id:p.id,customerId:p.customerId,employeeId:p.employeeId,orderDate:p.orderDate,requiredDate:p.requiredDate,shippedDate:p.shippedDate,shipViaId:p.shipViaId,freight:p.freight,name:p.name,address:p.address,city:p.city,region:p.region,postalCode:p.postalCode,country:p.country,__id:p.id,__customerId:p.customerId}).include(p=>[p.details.filter(p=>includes(p.orderId,__parentId)).map(p=>{quantity:p.quantity,unitPrice:p.unitPrice,productId:p.productId,__parentId:p.orderId}),p.customer.filter(p=>includes(p.id,__parentId)).map(p=>{id:p.id,name:p.name,contact:p.contact,phone:p.phone,address:p.address,city:p.city,region:p.region,postalCode:p.postalCode,country:p.country,__parentId:p.id})])'
		const target = orm.expression(source).complete('northwind')
		expect(expected).toBe(target)
	})
	test('include 7', () => {
		const source = 'northwind_1.Orders.filter(p=>(p.id===id)).include(p=>[p.details.include(q=>q.product).map(p=>{quantity:p.quantity,unitPrice:p.unitPrice,productId:p.productId}),p.customer])'
		const expected = 'northwind_1.Orders.filter(p=>(p.id===id)).map(p=>{id:p.id,customerId:p.customerId,employeeId:p.employeeId,orderDate:p.orderDate,requiredDate:p.requiredDate,shippedDate:p.shippedDate,shipViaId:p.shipViaId,freight:p.freight,name:p.name,address:p.address,city:p.city,region:p.region,postalCode:p.postalCode,country:p.country,__id:p.id,__customerId:p.customerId}).include(p=>[p.details.include(q=>q.product.filter(p=>includes(p.id,__parentId)).map(p=>{id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued,__parentId:p.id})).filter(p=>includes(p.orderId,__parentId)).map(p=>{quantity:p.quantity,unitPrice:p.unitPrice,productId:p.productId,__productId:p.productId,__parentId:p.orderId}),p.customer.filter(p=>includes(p.id,__parentId)).map(p=>{id:p.id,name:p.name,contact:p.contact,phone:p.phone,address:p.address,city:p.city,region:p.region,postalCode:p.postalCode,country:p.country,__parentId:p.id})])'
		const target = orm.expression(source).complete('northwind')
		expect(expected).toBe(target)
	})
	test('include 8', () => {
		const source = 'northwind_1.Orders.filter(p=>(p.id===id)).include(p=>[p.customer.map(p=>p.name),p.details.include(p=>p.product.include(p=>p.category.map(p=>p.name)).map(p=>p.name)).map(p=>[p.quantity,p.unitPrice])])'
		const expected = 'northwind_1.Orders.filter(p=>(p.id===id)).map(p=>{id:p.id,customerId:p.customerId,employeeId:p.employeeId,orderDate:p.orderDate,requiredDate:p.requiredDate,shippedDate:p.shippedDate,shipViaId:p.shipViaId,freight:p.freight,name:p.name,address:p.address,city:p.city,region:p.region,postalCode:p.postalCode,country:p.country,__customerId:p.customerId,__id:p.id}).include(p=>[p.customer.filter(p=>includes(p.id,__parentId)).map(p=>{name:p.name,__parentId:p.id}),p.details.include(p=>p.product.include(p=>p.category.filter(p=>includes(p.id,__parentId)).map(p=>{name:p.name,__parentId:p.id})).filter(p=>includes(p.id,__parentId)).map(p=>{name:p.name,__categoryId:p.categoryId,__parentId:p.id})).filter(p=>includes(p.orderId,__parentId)).map(p=>{quantity:p.quantity,unitPrice:p.unitPrice,__productId:p.productId,__parentId:p.orderId})])'
		const target = orm.expression(source).complete('northwind')
		expect(expected).toBe(target)
	})
})
describe('Metadata', () => {
	test('include 1', async () => {
		const expression = 'northwind_1.Orders.filter(p=>(p.id===id)).include(p=>p.customer)'
		const modelExpected :any= {"id":"integer","customerId":"string","employeeId":"integer","orderDate":"datetime","requiredDate":"datetime","shippedDate":"datetime","shipViaId":"integer","freight":"decimal","name":"string","address":"string","city":"string","region":"string","postalCode":"string","country":"string","customer":{"id":"string","name":"string","contact":"string","phone":"string","address":"string","city":"string","region":"string","postalCode":"string","country":"string"}}
		const parametersExpected:any = [{"name":"id","type":"integer","value":1}]
		const fieldsExpected :any= [{"name":"id","type":"integer"},{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"datetime"},{"name":"shippedDate","type":"datetime"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"},{"name":"__customerId","type":"string"}]
		const model = await orm.expression(expression).model('northwind')
		const metadata = await orm.expression(expression).metadata('northwind')
		expect(modelExpected).toStrictEqual(model)
		expect(fieldsExpected).toStrictEqual(metadata.f)
	})
	test('include 2', async () => {
		const expression = 'northwind_1.Orders.filter(p=>(p.id===id)).include(p=>p.details)'
		const modelExpected :any= {"id":"integer","customerId":"string","employeeId":"integer","orderDate":"datetime","requiredDate":"datetime","shippedDate":"datetime","shipViaId":"integer","freight":"decimal","name":"string","address":"string","city":"string","region":"string","postalCode":"string","country":"string","details":[{"orderId":"integer","productId":"integer","unitPrice":"decimal","quantity":"decimal","discount":"decimal"}]}
		const parametersExpected:any = [{"name":"id","type":"integer","value":1}]
		const fieldsExpected :any= [{"name":"id","type":"integer"},{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"datetime"},{"name":"shippedDate","type":"datetime"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"},{"name":"__id","type":"integer"}]
		const model = await orm.expression(expression).model('northwind')
		const metadata = await orm.expression(expression).metadata('northwind')
		expect(modelExpected).toStrictEqual(model)
		expect(fieldsExpected).toStrictEqual(metadata.f)
	})
	test('include 3', async () => {
		const expression = 'northwind_1.Orders.filter(p=>(p.id===id)).include(p=>[p.details,p.customer])'
		const modelExpected :any= {"id":"integer","customerId":"string","employeeId":"integer","orderDate":"datetime","requiredDate":"datetime","shippedDate":"datetime","shipViaId":"integer","freight":"decimal","name":"string","address":"string","city":"string","region":"string","postalCode":"string","country":"string","details":[{"orderId":"integer","productId":"integer","unitPrice":"decimal","quantity":"decimal","discount":"decimal"}],"customer":{"id":"string","name":"string","contact":"string","phone":"string","address":"string","city":"string","region":"string","postalCode":"string","country":"string"}}
		const parametersExpected:any = [{"name":"id","type":"integer","value":1}]
		const fieldsExpected :any= [{"name":"id","type":"integer"},{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"datetime"},{"name":"shippedDate","type":"datetime"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"},{"name":"__id","type":"integer"},{"name":"__customerId","type":"string"}]
		const model = await orm.expression(expression).model('northwind')
		const metadata = await orm.expression(expression).metadata('northwind')
		expect(modelExpected).toStrictEqual(model)
		expect(fieldsExpected).toStrictEqual(metadata.f)
	})
	test('include 4', async () => {
		const expression = 'northwind_1.Orders.filter(p=>(p.id===id)).include(p=>[p.details.include(q=>q.product),p.customer])'
		const modelExpected :any= {"id":"integer","customerId":"string","employeeId":"integer","orderDate":"datetime","requiredDate":"datetime","shippedDate":"datetime","shipViaId":"integer","freight":"decimal","name":"string","address":"string","city":"string","region":"string","postalCode":"string","country":"string","details":[{"orderId":"integer","productId":"integer","unitPrice":"decimal","quantity":"decimal","discount":"decimal","product":{"id":"integer","name":"string","supplierId":"integer","categoryId":"integer","quantity":"string","price":"decimal","inStock":"decimal","onOrder":"decimal","reorderLevel":"decimal","discontinued":"boolean"}}],"customer":{"id":"string","name":"string","contact":"string","phone":"string","address":"string","city":"string","region":"string","postalCode":"string","country":"string"}}
		const parametersExpected:any = [{"name":"id","type":"integer","value":1}]
		const fieldsExpected :any= [{"name":"id","type":"integer"},{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"datetime"},{"name":"shippedDate","type":"datetime"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"},{"name":"__id","type":"integer"},{"name":"__customerId","type":"string"}]
		const model = await orm.expression(expression).model('northwind')
		const metadata = await orm.expression(expression).metadata('northwind')
		expect(modelExpected).toStrictEqual(model)
		expect(fieldsExpected).toStrictEqual(metadata.f)
	})
	test('include 5', async () => {
		const expression = 'northwind_1.Orders.filter(p=>(p.id===id)).include(p=>[p.details.include(q=>q.product.include(p=>p.category)),p.customer])'
		const modelExpected :any= {"id":"integer","customerId":"string","employeeId":"integer","orderDate":"datetime","requiredDate":"datetime","shippedDate":"datetime","shipViaId":"integer","freight":"decimal","name":"string","address":"string","city":"string","region":"string","postalCode":"string","country":"string","details":[{"orderId":"integer","productId":"integer","unitPrice":"decimal","quantity":"decimal","discount":"decimal","product":{"id":"integer","name":"string","supplierId":"integer","categoryId":"integer","quantity":"string","price":"decimal","inStock":"decimal","onOrder":"decimal","reorderLevel":"decimal","discontinued":"boolean","category":{"id":"integer","name":"string","description":"string"}}}],"customer":{"id":"string","name":"string","contact":"string","phone":"string","address":"string","city":"string","region":"string","postalCode":"string","country":"string"}}
		const parametersExpected:any = [{"name":"id","type":"integer","value":1}]
		const fieldsExpected :any= [{"name":"id","type":"integer"},{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"datetime"},{"name":"shippedDate","type":"datetime"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"},{"name":"__id","type":"integer"},{"name":"__customerId","type":"string"}]
		const model = await orm.expression(expression).model('northwind')
		const metadata = await orm.expression(expression).metadata('northwind')
		expect(modelExpected).toStrictEqual(model)
		expect(fieldsExpected).toStrictEqual(metadata.f)
	})
	test('include 6', async () => {
		const expression = 'northwind_1.Orders.filter(p=>(p.id===id)).include(p=>[p.details.map(p=>{quantity:p.quantity,unitPrice:p.unitPrice,productId:p.productId}),p.customer])'
		const modelExpected :any= {"id":"integer","customerId":"string","employeeId":"integer","orderDate":"datetime","requiredDate":"datetime","shippedDate":"datetime","shipViaId":"integer","freight":"decimal","name":"string","address":"string","city":"string","region":"string","postalCode":"string","country":"string","details":[{"quantity":"decimal","unitPrice":"decimal","productId":"integer"}],"customer":{"id":"string","name":"string","contact":"string","phone":"string","address":"string","city":"string","region":"string","postalCode":"string","country":"string"}}
		const parametersExpected:any = [{"name":"id","type":"integer","value":1}]
		const fieldsExpected :any= [{"name":"id","type":"integer"},{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"datetime"},{"name":"shippedDate","type":"datetime"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"},{"name":"__id","type":"integer"},{"name":"__customerId","type":"string"}]
		const model = await orm.expression(expression).model('northwind')
		const metadata = await orm.expression(expression).metadata('northwind')
		expect(modelExpected).toStrictEqual(model)
		expect(fieldsExpected).toStrictEqual(metadata.f)
	})
	test('include 7', async () => {
		const expression = 'northwind_1.Orders.filter(p=>(p.id===id)).include(p=>[p.details.include(q=>q.product).map(p=>{quantity:p.quantity,unitPrice:p.unitPrice,productId:p.productId}),p.customer])'
		const modelExpected :any= {"id":"integer","customerId":"string","employeeId":"integer","orderDate":"datetime","requiredDate":"datetime","shippedDate":"datetime","shipViaId":"integer","freight":"decimal","name":"string","address":"string","city":"string","region":"string","postalCode":"string","country":"string","details":[{"quantity":"decimal","unitPrice":"decimal","productId":"integer","product":{"id":"integer","name":"string","supplierId":"integer","categoryId":"integer","quantity":"string","price":"decimal","inStock":"decimal","onOrder":"decimal","reorderLevel":"decimal","discontinued":"boolean"}}],"customer":{"id":"string","name":"string","contact":"string","phone":"string","address":"string","city":"string","region":"string","postalCode":"string","country":"string"}}
		const parametersExpected:any = [{"name":"id","type":"integer","value":1}]
		const fieldsExpected :any= [{"name":"id","type":"integer"},{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"datetime"},{"name":"shippedDate","type":"datetime"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"},{"name":"__id","type":"integer"},{"name":"__customerId","type":"string"}]
		const model = await orm.expression(expression).model('northwind')
		const metadata = await orm.expression(expression).metadata('northwind')
		expect(modelExpected).toStrictEqual(model)
		expect(fieldsExpected).toStrictEqual(metadata.f)
	})
	test('include 8', async () => {
		const expression = 'northwind_1.Orders.filter(p=>(p.id===id)).include(p=>[p.customer.map(p=>p.name),p.details.include(p=>p.product.include(p=>p.category.map(p=>p.name)).map(p=>p.name)).map(p=>[p.quantity,p.unitPrice])])'
		const modelExpected :any= {"id":"integer","customerId":"string","employeeId":"integer","orderDate":"datetime","requiredDate":"datetime","shippedDate":"datetime","shipViaId":"integer","freight":"decimal","name":"string","address":"string","city":"string","region":"string","postalCode":"string","country":"string","customer":{"name":"string"},"details":[{"quantity":"decimal","unitPrice":"decimal","product":{"name":"string","category":{"name":"string"}}}]}
		const parametersExpected:any = [{"name":"id","type":"integer","value":1}]
		const fieldsExpected :any= [{"name":"id","type":"integer"},{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"datetime"},{"name":"shippedDate","type":"datetime"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"},{"name":"__customerId","type":"string"},{"name":"__id","type":"integer"}]
		const model = await orm.expression(expression).model('northwind')
		const metadata = await orm.expression(expression).metadata('northwind')
		expect(modelExpected).toStrictEqual(model)
		expect(fieldsExpected).toStrictEqual(metadata.f)
	})
})
describe('Sentences', () => {
	test('include 1', async () => {
		const expression = 'northwind_1.Orders.filter(p=>(p.id===id)).include(p=>p.customer)'
		const mariadbExpected = 'SELECT n.OrderID AS `id`, n.CustomerID AS `customerId`, n.EmployeeID AS `employeeId`, n.OrderDate AS `orderDate`, n.RequiredDate AS `requiredDate`, n.ShippedDate AS `shippedDate`, n.ShipVia AS `shipViaId`, n.Freight AS `freight`, n.ShipName AS `name`, n.ShipAddress AS `address`, n.ShipCity AS `city`, n.ShipRegion AS `region`, n.ShipPostalCode AS `postalCode`, n.ShipCountry AS `country`, n.CustomerID AS `__customerId` FROM Orders n  WHERE n.OrderID = ? ; SELECT c.CustomerID AS `id`, c.CompanyName AS `name`, c.ContactName AS `contact`, c.ContactTitle AS `phone`, c.Address AS `address`, c.City AS `city`, c.Region AS `region`, c.PostalCode AS `postalCode`, c.Country AS `country`, c.CustomerID AS `__parentId` FROM Customers c  WHERE  c.CustomerID IN (?) '
		let mariadb =  await orm.expression(expression).sentence('mariadb', 'northwind')
		mariadb=Helper.replace(mariadb,'\n','; ')
		expect(mariadbExpected).toBe(mariadb)
		const mssqlExpected = 'SELECT n.OrderID AS [id], n.CustomerID AS [customerId], n.EmployeeID AS [employeeId], n.OrderDate AS [orderDate], n.RequiredDate AS [requiredDate], n.ShippedDate AS [shippedDate], n.ShipVia AS [shipViaId], n.Freight AS [freight], n.ShipName AS [name], n.ShipAddress AS [address], n.ShipCity AS [city], n.ShipRegion AS [region], n.ShipPostalCode AS [postalCode], n.ShipCountry AS [country], n.CustomerID AS [__customerId] FROM Orders n  WHERE n.OrderID = :id ; SELECT c.CustomerID AS [id], c.CompanyName AS [name], c.ContactName AS [contact], c.ContactTitle AS [phone], c.Address AS [address], c.City AS [city], c.Region AS [region], c.PostalCode AS [postalCode], c.Country AS [country], c.CustomerID AS [__parentId] FROM Customers c  WHERE  c.CustomerID IN (:__parentId) '
		let mssql =  await orm.expression(expression).sentence('mssql', 'northwind')
		mssql=Helper.replace(mssql,'\n','; ')
		expect(mssqlExpected).toBe(mssql)
		const mysqlExpected = 'SELECT n.OrderID AS `id`, n.CustomerID AS `customerId`, n.EmployeeID AS `employeeId`, n.OrderDate AS `orderDate`, n.RequiredDate AS `requiredDate`, n.ShippedDate AS `shippedDate`, n.ShipVia AS `shipViaId`, n.Freight AS `freight`, n.ShipName AS `name`, n.ShipAddress AS `address`, n.ShipCity AS `city`, n.ShipRegion AS `region`, n.ShipPostalCode AS `postalCode`, n.ShipCountry AS `country`, n.CustomerID AS `__customerId` FROM Orders n  WHERE n.OrderID = ? ; SELECT c.CustomerID AS `id`, c.CompanyName AS `name`, c.ContactName AS `contact`, c.ContactTitle AS `phone`, c.Address AS `address`, c.City AS `city`, c.Region AS `region`, c.PostalCode AS `postalCode`, c.Country AS `country`, c.CustomerID AS `__parentId` FROM Customers c  WHERE  c.CustomerID IN (?) '
		let mysql =  await orm.expression(expression).sentence('mysql', 'northwind')
		mysql=Helper.replace(mysql,'\n','; ')
		expect(mysqlExpected).toBe(mysql)
		const oracleExpected = 'SELECT n.OrderID AS "id", n.CustomerID AS "customerId", n.EmployeeID AS "employeeId", n.OrderDate AS "orderDate", n.RequiredDate AS "requiredDate", n.ShippedDate AS "shippedDate", n.ShipVia AS "shipViaId", n.Freight AS "freight", n.ShipName AS "name", n.ShipAddress AS "address", n.ShipCity AS "city", n.ShipRegion AS "region", n.ShipPostalCode AS "postalCode", n.ShipCountry AS "country", n.CustomerID AS "__customerId" FROM Orders n  WHERE n.OrderID = :id ; SELECT c.CustomerID AS "id", c.CompanyName AS "name", c.ContactName AS "contact", c.ContactTitle AS "phone", c.Address AS "address", c.City AS "city", c.Region AS "region", c.PostalCode AS "postalCode", c.Country AS "country", c.CustomerID AS "__parentId" FROM Customers c  WHERE  c.CustomerID IN (:__parentId) '
		let oracle =  await orm.expression(expression).sentence('oracle', 'northwind')
		oracle=Helper.replace(oracle,'\n','; ')
		expect(oracleExpected).toBe(oracle)
		const postgresExpected = 'SELECT n.OrderID AS "id", n.CustomerID AS "customerId", n.EmployeeID AS "employeeId", n.OrderDate AS "orderDate", n.RequiredDate AS "requiredDate", n.ShippedDate AS "shippedDate", n.ShipVia AS "shipViaId", n.Freight AS "freight", n.ShipName AS "name", n.ShipAddress AS "address", n.ShipCity AS "city", n.ShipRegion AS "region", n.ShipPostalCode AS "postalCode", n.ShipCountry AS "country", n.CustomerID AS "__customerId" FROM Orders n  WHERE n.OrderID = $1 ; SELECT c.CustomerID AS "id", c.CompanyName AS "name", c.ContactName AS "contact", c.ContactTitle AS "phone", c.Address AS "address", c.City AS "city", c.Region AS "region", c.PostalCode AS "postalCode", c.Country AS "country", c.CustomerID AS "__parentId" FROM Customers c  WHERE  c.CustomerID IN ($1) '
		let postgres =  await orm.expression(expression).sentence('postgres', 'northwind')
		postgres=Helper.replace(postgres,'\n','; ')
		expect(postgresExpected).toBe(postgres)
	})
	test('include 2', async () => {
		const expression = 'northwind_1.Orders.filter(p=>(p.id===id)).include(p=>p.details)'
		const mariadbExpected = 'SELECT n.OrderID AS `id`, n.CustomerID AS `customerId`, n.EmployeeID AS `employeeId`, n.OrderDate AS `orderDate`, n.RequiredDate AS `requiredDate`, n.ShippedDate AS `shippedDate`, n.ShipVia AS `shipViaId`, n.Freight AS `freight`, n.ShipName AS `name`, n.ShipAddress AS `address`, n.ShipCity AS `city`, n.ShipRegion AS `region`, n.ShipPostalCode AS `postalCode`, n.ShipCountry AS `country`, n.OrderID AS `__id` FROM Orders n  WHERE n.OrderID = ? ; SELECT o.OrderID AS `orderId`, o.ProductID AS `productId`, o.UnitPrice AS `unitPrice`, o.Quantity AS `quantity`, o.Discount AS `discount`, o.OrderID AS `__parentId` FROM `Order Details` o  WHERE  o.OrderID IN (?) '
		let mariadb =  await orm.expression(expression).sentence('mariadb', 'northwind')
		mariadb=Helper.replace(mariadb,'\n','; ')
		expect(mariadbExpected).toBe(mariadb)
		const mssqlExpected = 'SELECT n.OrderID AS [id], n.CustomerID AS [customerId], n.EmployeeID AS [employeeId], n.OrderDate AS [orderDate], n.RequiredDate AS [requiredDate], n.ShippedDate AS [shippedDate], n.ShipVia AS [shipViaId], n.Freight AS [freight], n.ShipName AS [name], n.ShipAddress AS [address], n.ShipCity AS [city], n.ShipRegion AS [region], n.ShipPostalCode AS [postalCode], n.ShipCountry AS [country], n.OrderID AS [__id] FROM Orders n  WHERE n.OrderID = :id ; SELECT o.OrderID AS [orderId], o.ProductID AS [productId], o.UnitPrice AS [unitPrice], o.Quantity AS [quantity], o.Discount AS [discount], o.OrderID AS [__parentId] FROM [Order Details] o  WHERE  o.OrderID IN (:__parentId) '
		let mssql =  await orm.expression(expression).sentence('mssql', 'northwind')
		mssql=Helper.replace(mssql,'\n','; ')
		expect(mssqlExpected).toBe(mssql)
		const mysqlExpected = 'SELECT n.OrderID AS `id`, n.CustomerID AS `customerId`, n.EmployeeID AS `employeeId`, n.OrderDate AS `orderDate`, n.RequiredDate AS `requiredDate`, n.ShippedDate AS `shippedDate`, n.ShipVia AS `shipViaId`, n.Freight AS `freight`, n.ShipName AS `name`, n.ShipAddress AS `address`, n.ShipCity AS `city`, n.ShipRegion AS `region`, n.ShipPostalCode AS `postalCode`, n.ShipCountry AS `country`, n.OrderID AS `__id` FROM Orders n  WHERE n.OrderID = ? ; SELECT o.OrderID AS `orderId`, o.ProductID AS `productId`, o.UnitPrice AS `unitPrice`, o.Quantity AS `quantity`, o.Discount AS `discount`, o.OrderID AS `__parentId` FROM `Order Details` o  WHERE  o.OrderID IN (?) '
		let mysql =  await orm.expression(expression).sentence('mysql', 'northwind')
		mysql=Helper.replace(mysql,'\n','; ')
		expect(mysqlExpected).toBe(mysql)
		const oracleExpected = 'SELECT n.OrderID AS "id", n.CustomerID AS "customerId", n.EmployeeID AS "employeeId", n.OrderDate AS "orderDate", n.RequiredDate AS "requiredDate", n.ShippedDate AS "shippedDate", n.ShipVia AS "shipViaId", n.Freight AS "freight", n.ShipName AS "name", n.ShipAddress AS "address", n.ShipCity AS "city", n.ShipRegion AS "region", n.ShipPostalCode AS "postalCode", n.ShipCountry AS "country", n.OrderID AS "__id" FROM Orders n  WHERE n.OrderID = :id ; SELECT o.OrderID AS "orderId", o.ProductID AS "productId", o.UnitPrice AS "unitPrice", o.Quantity AS "quantity", o.Discount AS "discount", o.OrderID AS "__parentId" FROM "Order Details" o  WHERE  o.OrderID IN (:__parentId) '
		let oracle =  await orm.expression(expression).sentence('oracle', 'northwind')
		oracle=Helper.replace(oracle,'\n','; ')
		expect(oracleExpected).toBe(oracle)
		const postgresExpected = 'SELECT n.OrderID AS "id", n.CustomerID AS "customerId", n.EmployeeID AS "employeeId", n.OrderDate AS "orderDate", n.RequiredDate AS "requiredDate", n.ShippedDate AS "shippedDate", n.ShipVia AS "shipViaId", n.Freight AS "freight", n.ShipName AS "name", n.ShipAddress AS "address", n.ShipCity AS "city", n.ShipRegion AS "region", n.ShipPostalCode AS "postalCode", n.ShipCountry AS "country", n.OrderID AS "__id" FROM Orders n  WHERE n.OrderID = $1 ; SELECT o.OrderID AS "orderId", o.ProductID AS "productId", o.UnitPrice AS "unitPrice", o.Quantity AS "quantity", o.Discount AS "discount", o.OrderID AS "__parentId" FROM "Order Details" o  WHERE  o.OrderID IN ($1) '
		let postgres =  await orm.expression(expression).sentence('postgres', 'northwind')
		postgres=Helper.replace(postgres,'\n','; ')
		expect(postgresExpected).toBe(postgres)
	})
	test('include 3', async () => {
		const expression = 'northwind_1.Orders.filter(p=>(p.id===id)).include(p=>[p.details,p.customer])'
		const mariadbExpected = 'SELECT n.OrderID AS `id`, n.CustomerID AS `customerId`, n.EmployeeID AS `employeeId`, n.OrderDate AS `orderDate`, n.RequiredDate AS `requiredDate`, n.ShippedDate AS `shippedDate`, n.ShipVia AS `shipViaId`, n.Freight AS `freight`, n.ShipName AS `name`, n.ShipAddress AS `address`, n.ShipCity AS `city`, n.ShipRegion AS `region`, n.ShipPostalCode AS `postalCode`, n.ShipCountry AS `country`, n.OrderID AS `__id`, n.CustomerID AS `__customerId` FROM Orders n  WHERE n.OrderID = ? ; SELECT o.OrderID AS `orderId`, o.ProductID AS `productId`, o.UnitPrice AS `unitPrice`, o.Quantity AS `quantity`, o.Discount AS `discount`, o.OrderID AS `__parentId` FROM `Order Details` o  WHERE  o.OrderID IN (?) ; SELECT c.CustomerID AS `id`, c.CompanyName AS `name`, c.ContactName AS `contact`, c.ContactTitle AS `phone`, c.Address AS `address`, c.City AS `city`, c.Region AS `region`, c.PostalCode AS `postalCode`, c.Country AS `country`, c.CustomerID AS `__parentId` FROM Customers c  WHERE  c.CustomerID IN (?) '
		let mariadb =  await orm.expression(expression).sentence('mariadb', 'northwind')
		mariadb=Helper.replace(mariadb,'\n','; ')
		expect(mariadbExpected).toBe(mariadb)
		const mssqlExpected = 'SELECT n.OrderID AS [id], n.CustomerID AS [customerId], n.EmployeeID AS [employeeId], n.OrderDate AS [orderDate], n.RequiredDate AS [requiredDate], n.ShippedDate AS [shippedDate], n.ShipVia AS [shipViaId], n.Freight AS [freight], n.ShipName AS [name], n.ShipAddress AS [address], n.ShipCity AS [city], n.ShipRegion AS [region], n.ShipPostalCode AS [postalCode], n.ShipCountry AS [country], n.OrderID AS [__id], n.CustomerID AS [__customerId] FROM Orders n  WHERE n.OrderID = :id ; SELECT o.OrderID AS [orderId], o.ProductID AS [productId], o.UnitPrice AS [unitPrice], o.Quantity AS [quantity], o.Discount AS [discount], o.OrderID AS [__parentId] FROM [Order Details] o  WHERE  o.OrderID IN (:__parentId) ; SELECT c.CustomerID AS [id], c.CompanyName AS [name], c.ContactName AS [contact], c.ContactTitle AS [phone], c.Address AS [address], c.City AS [city], c.Region AS [region], c.PostalCode AS [postalCode], c.Country AS [country], c.CustomerID AS [__parentId] FROM Customers c  WHERE  c.CustomerID IN (:__parentId) '
		let mssql =  await orm.expression(expression).sentence('mssql', 'northwind')
		mssql=Helper.replace(mssql,'\n','; ')
		expect(mssqlExpected).toBe(mssql)
		const mysqlExpected = 'SELECT n.OrderID AS `id`, n.CustomerID AS `customerId`, n.EmployeeID AS `employeeId`, n.OrderDate AS `orderDate`, n.RequiredDate AS `requiredDate`, n.ShippedDate AS `shippedDate`, n.ShipVia AS `shipViaId`, n.Freight AS `freight`, n.ShipName AS `name`, n.ShipAddress AS `address`, n.ShipCity AS `city`, n.ShipRegion AS `region`, n.ShipPostalCode AS `postalCode`, n.ShipCountry AS `country`, n.OrderID AS `__id`, n.CustomerID AS `__customerId` FROM Orders n  WHERE n.OrderID = ? ; SELECT o.OrderID AS `orderId`, o.ProductID AS `productId`, o.UnitPrice AS `unitPrice`, o.Quantity AS `quantity`, o.Discount AS `discount`, o.OrderID AS `__parentId` FROM `Order Details` o  WHERE  o.OrderID IN (?) ; SELECT c.CustomerID AS `id`, c.CompanyName AS `name`, c.ContactName AS `contact`, c.ContactTitle AS `phone`, c.Address AS `address`, c.City AS `city`, c.Region AS `region`, c.PostalCode AS `postalCode`, c.Country AS `country`, c.CustomerID AS `__parentId` FROM Customers c  WHERE  c.CustomerID IN (?) '
		let mysql =  await orm.expression(expression).sentence('mysql', 'northwind')
		mysql=Helper.replace(mysql,'\n','; ')
		expect(mysqlExpected).toBe(mysql)
		const oracleExpected = 'SELECT n.OrderID AS "id", n.CustomerID AS "customerId", n.EmployeeID AS "employeeId", n.OrderDate AS "orderDate", n.RequiredDate AS "requiredDate", n.ShippedDate AS "shippedDate", n.ShipVia AS "shipViaId", n.Freight AS "freight", n.ShipName AS "name", n.ShipAddress AS "address", n.ShipCity AS "city", n.ShipRegion AS "region", n.ShipPostalCode AS "postalCode", n.ShipCountry AS "country", n.OrderID AS "__id", n.CustomerID AS "__customerId" FROM Orders n  WHERE n.OrderID = :id ; SELECT o.OrderID AS "orderId", o.ProductID AS "productId", o.UnitPrice AS "unitPrice", o.Quantity AS "quantity", o.Discount AS "discount", o.OrderID AS "__parentId" FROM "Order Details" o  WHERE  o.OrderID IN (:__parentId) ; SELECT c.CustomerID AS "id", c.CompanyName AS "name", c.ContactName AS "contact", c.ContactTitle AS "phone", c.Address AS "address", c.City AS "city", c.Region AS "region", c.PostalCode AS "postalCode", c.Country AS "country", c.CustomerID AS "__parentId" FROM Customers c  WHERE  c.CustomerID IN (:__parentId) '
		let oracle =  await orm.expression(expression).sentence('oracle', 'northwind')
		oracle=Helper.replace(oracle,'\n','; ')
		expect(oracleExpected).toBe(oracle)
		const postgresExpected = 'SELECT n.OrderID AS "id", n.CustomerID AS "customerId", n.EmployeeID AS "employeeId", n.OrderDate AS "orderDate", n.RequiredDate AS "requiredDate", n.ShippedDate AS "shippedDate", n.ShipVia AS "shipViaId", n.Freight AS "freight", n.ShipName AS "name", n.ShipAddress AS "address", n.ShipCity AS "city", n.ShipRegion AS "region", n.ShipPostalCode AS "postalCode", n.ShipCountry AS "country", n.OrderID AS "__id", n.CustomerID AS "__customerId" FROM Orders n  WHERE n.OrderID = $1 ; SELECT o.OrderID AS "orderId", o.ProductID AS "productId", o.UnitPrice AS "unitPrice", o.Quantity AS "quantity", o.Discount AS "discount", o.OrderID AS "__parentId" FROM "Order Details" o  WHERE  o.OrderID IN ($1) ; SELECT c.CustomerID AS "id", c.CompanyName AS "name", c.ContactName AS "contact", c.ContactTitle AS "phone", c.Address AS "address", c.City AS "city", c.Region AS "region", c.PostalCode AS "postalCode", c.Country AS "country", c.CustomerID AS "__parentId" FROM Customers c  WHERE  c.CustomerID IN ($1) '
		let postgres =  await orm.expression(expression).sentence('postgres', 'northwind')
		postgres=Helper.replace(postgres,'\n','; ')
		expect(postgresExpected).toBe(postgres)
	})
	test('include 4', async () => {
		const expression = 'northwind_1.Orders.filter(p=>(p.id===id)).include(p=>[p.details.include(q=>q.product),p.customer])'
		const mariadbExpected = 'SELECT n.OrderID AS `id`, n.CustomerID AS `customerId`, n.EmployeeID AS `employeeId`, n.OrderDate AS `orderDate`, n.RequiredDate AS `requiredDate`, n.ShippedDate AS `shippedDate`, n.ShipVia AS `shipViaId`, n.Freight AS `freight`, n.ShipName AS `name`, n.ShipAddress AS `address`, n.ShipCity AS `city`, n.ShipRegion AS `region`, n.ShipPostalCode AS `postalCode`, n.ShipCountry AS `country`, n.OrderID AS `__id`, n.CustomerID AS `__customerId` FROM Orders n  WHERE n.OrderID = ? ; SELECT o.OrderID AS `orderId`, o.ProductID AS `productId`, o.UnitPrice AS `unitPrice`, o.Quantity AS `quantity`, o.Discount AS `discount`, o.ProductID AS `__productId`, o.OrderID AS `__parentId` FROM `Order Details` o  WHERE  o.OrderID IN (?) ; SELECT p.ProductID AS `id`, p.ProductName AS `name`, p.SupplierID AS `supplierId`, p.CategoryID AS `categoryId`, p.QuantityPerUnit AS `quantity`, p.UnitPrice AS `price`, p.UnitsInStock AS `inStock`, p.UnitsOnOrder AS `onOrder`, p.ReorderLevel AS `reorderLevel`, p.Discontinued AS `discontinued`, p.ProductID AS `__parentId` FROM Products p  WHERE  p.ProductID IN (?) ; SELECT c.CustomerID AS `id`, c.CompanyName AS `name`, c.ContactName AS `contact`, c.ContactTitle AS `phone`, c.Address AS `address`, c.City AS `city`, c.Region AS `region`, c.PostalCode AS `postalCode`, c.Country AS `country`, c.CustomerID AS `__parentId` FROM Customers c  WHERE  c.CustomerID IN (?) '
		let mariadb =  await orm.expression(expression).sentence('mariadb', 'northwind')
		mariadb=Helper.replace(mariadb,'\n','; ')
		expect(mariadbExpected).toBe(mariadb)
		const mssqlExpected = 'SELECT n.OrderID AS [id], n.CustomerID AS [customerId], n.EmployeeID AS [employeeId], n.OrderDate AS [orderDate], n.RequiredDate AS [requiredDate], n.ShippedDate AS [shippedDate], n.ShipVia AS [shipViaId], n.Freight AS [freight], n.ShipName AS [name], n.ShipAddress AS [address], n.ShipCity AS [city], n.ShipRegion AS [region], n.ShipPostalCode AS [postalCode], n.ShipCountry AS [country], n.OrderID AS [__id], n.CustomerID AS [__customerId] FROM Orders n  WHERE n.OrderID = :id ; SELECT o.OrderID AS [orderId], o.ProductID AS [productId], o.UnitPrice AS [unitPrice], o.Quantity AS [quantity], o.Discount AS [discount], o.ProductID AS [__productId], o.OrderID AS [__parentId] FROM [Order Details] o  WHERE  o.OrderID IN (:__parentId) ; SELECT p.ProductID AS [id], p.ProductName AS [name], p.SupplierID AS [supplierId], p.CategoryID AS [categoryId], p.QuantityPerUnit AS [quantity], p.UnitPrice AS [price], p.UnitsInStock AS [inStock], p.UnitsOnOrder AS [onOrder], p.ReorderLevel AS [reorderLevel], p.Discontinued AS [discontinued], p.ProductID AS [__parentId] FROM Products p  WHERE  p.ProductID IN (:__parentId) ; SELECT c.CustomerID AS [id], c.CompanyName AS [name], c.ContactName AS [contact], c.ContactTitle AS [phone], c.Address AS [address], c.City AS [city], c.Region AS [region], c.PostalCode AS [postalCode], c.Country AS [country], c.CustomerID AS [__parentId] FROM Customers c  WHERE  c.CustomerID IN (:__parentId) '
		let mssql =  await orm.expression(expression).sentence('mssql', 'northwind')
		mssql=Helper.replace(mssql,'\n','; ')
		expect(mssqlExpected).toBe(mssql)
		const mysqlExpected = 'SELECT n.OrderID AS `id`, n.CustomerID AS `customerId`, n.EmployeeID AS `employeeId`, n.OrderDate AS `orderDate`, n.RequiredDate AS `requiredDate`, n.ShippedDate AS `shippedDate`, n.ShipVia AS `shipViaId`, n.Freight AS `freight`, n.ShipName AS `name`, n.ShipAddress AS `address`, n.ShipCity AS `city`, n.ShipRegion AS `region`, n.ShipPostalCode AS `postalCode`, n.ShipCountry AS `country`, n.OrderID AS `__id`, n.CustomerID AS `__customerId` FROM Orders n  WHERE n.OrderID = ? ; SELECT o.OrderID AS `orderId`, o.ProductID AS `productId`, o.UnitPrice AS `unitPrice`, o.Quantity AS `quantity`, o.Discount AS `discount`, o.ProductID AS `__productId`, o.OrderID AS `__parentId` FROM `Order Details` o  WHERE  o.OrderID IN (?) ; SELECT p.ProductID AS `id`, p.ProductName AS `name`, p.SupplierID AS `supplierId`, p.CategoryID AS `categoryId`, p.QuantityPerUnit AS `quantity`, p.UnitPrice AS `price`, p.UnitsInStock AS `inStock`, p.UnitsOnOrder AS `onOrder`, p.ReorderLevel AS `reorderLevel`, p.Discontinued AS `discontinued`, p.ProductID AS `__parentId` FROM Products p  WHERE  p.ProductID IN (?) ; SELECT c.CustomerID AS `id`, c.CompanyName AS `name`, c.ContactName AS `contact`, c.ContactTitle AS `phone`, c.Address AS `address`, c.City AS `city`, c.Region AS `region`, c.PostalCode AS `postalCode`, c.Country AS `country`, c.CustomerID AS `__parentId` FROM Customers c  WHERE  c.CustomerID IN (?) '
		let mysql =  await orm.expression(expression).sentence('mysql', 'northwind')
		mysql=Helper.replace(mysql,'\n','; ')
		expect(mysqlExpected).toBe(mysql)
		const oracleExpected = 'SELECT n.OrderID AS "id", n.CustomerID AS "customerId", n.EmployeeID AS "employeeId", n.OrderDate AS "orderDate", n.RequiredDate AS "requiredDate", n.ShippedDate AS "shippedDate", n.ShipVia AS "shipViaId", n.Freight AS "freight", n.ShipName AS "name", n.ShipAddress AS "address", n.ShipCity AS "city", n.ShipRegion AS "region", n.ShipPostalCode AS "postalCode", n.ShipCountry AS "country", n.OrderID AS "__id", n.CustomerID AS "__customerId" FROM Orders n  WHERE n.OrderID = :id ; SELECT o.OrderID AS "orderId", o.ProductID AS "productId", o.UnitPrice AS "unitPrice", o.Quantity AS "quantity", o.Discount AS "discount", o.ProductID AS "__productId", o.OrderID AS "__parentId" FROM "Order Details" o  WHERE  o.OrderID IN (:__parentId) ; SELECT p.ProductID AS "id", p.ProductName AS "name", p.SupplierID AS "supplierId", p.CategoryID AS "categoryId", p.QuantityPerUnit AS "quantity", p.UnitPrice AS "price", p.UnitsInStock AS "inStock", p.UnitsOnOrder AS "onOrder", p.ReorderLevel AS "reorderLevel", p.Discontinued AS "discontinued", p.ProductID AS "__parentId" FROM Products p  WHERE  p.ProductID IN (:__parentId) ; SELECT c.CustomerID AS "id", c.CompanyName AS "name", c.ContactName AS "contact", c.ContactTitle AS "phone", c.Address AS "address", c.City AS "city", c.Region AS "region", c.PostalCode AS "postalCode", c.Country AS "country", c.CustomerID AS "__parentId" FROM Customers c  WHERE  c.CustomerID IN (:__parentId) '
		let oracle =  await orm.expression(expression).sentence('oracle', 'northwind')
		oracle=Helper.replace(oracle,'\n','; ')
		expect(oracleExpected).toBe(oracle)
		const postgresExpected = 'SELECT n.OrderID AS "id", n.CustomerID AS "customerId", n.EmployeeID AS "employeeId", n.OrderDate AS "orderDate", n.RequiredDate AS "requiredDate", n.ShippedDate AS "shippedDate", n.ShipVia AS "shipViaId", n.Freight AS "freight", n.ShipName AS "name", n.ShipAddress AS "address", n.ShipCity AS "city", n.ShipRegion AS "region", n.ShipPostalCode AS "postalCode", n.ShipCountry AS "country", n.OrderID AS "__id", n.CustomerID AS "__customerId" FROM Orders n  WHERE n.OrderID = $1 ; SELECT o.OrderID AS "orderId", o.ProductID AS "productId", o.UnitPrice AS "unitPrice", o.Quantity AS "quantity", o.Discount AS "discount", o.ProductID AS "__productId", o.OrderID AS "__parentId" FROM "Order Details" o  WHERE  o.OrderID IN ($1) ; SELECT p.ProductID AS "id", p.ProductName AS "name", p.SupplierID AS "supplierId", p.CategoryID AS "categoryId", p.QuantityPerUnit AS "quantity", p.UnitPrice AS "price", p.UnitsInStock AS "inStock", p.UnitsOnOrder AS "onOrder", p.ReorderLevel AS "reorderLevel", p.Discontinued AS "discontinued", p.ProductID AS "__parentId" FROM Products p  WHERE  p.ProductID IN ($1) ; SELECT c.CustomerID AS "id", c.CompanyName AS "name", c.ContactName AS "contact", c.ContactTitle AS "phone", c.Address AS "address", c.City AS "city", c.Region AS "region", c.PostalCode AS "postalCode", c.Country AS "country", c.CustomerID AS "__parentId" FROM Customers c  WHERE  c.CustomerID IN ($1) '
		let postgres =  await orm.expression(expression).sentence('postgres', 'northwind')
		postgres=Helper.replace(postgres,'\n','; ')
		expect(postgresExpected).toBe(postgres)
	})
	test('include 5', async () => {
		const expression = 'northwind_1.Orders.filter(p=>(p.id===id)).include(p=>[p.details.include(q=>q.product.include(p=>p.category)),p.customer])'
		const mariadbExpected = 'SELECT n.OrderID AS `id`, n.CustomerID AS `customerId`, n.EmployeeID AS `employeeId`, n.OrderDate AS `orderDate`, n.RequiredDate AS `requiredDate`, n.ShippedDate AS `shippedDate`, n.ShipVia AS `shipViaId`, n.Freight AS `freight`, n.ShipName AS `name`, n.ShipAddress AS `address`, n.ShipCity AS `city`, n.ShipRegion AS `region`, n.ShipPostalCode AS `postalCode`, n.ShipCountry AS `country`, n.OrderID AS `__id`, n.CustomerID AS `__customerId` FROM Orders n  WHERE n.OrderID = ? ; SELECT o.OrderID AS `orderId`, o.ProductID AS `productId`, o.UnitPrice AS `unitPrice`, o.Quantity AS `quantity`, o.Discount AS `discount`, o.ProductID AS `__productId`, o.OrderID AS `__parentId` FROM `Order Details` o  WHERE  o.OrderID IN (?) ; SELECT p.ProductID AS `id`, p.ProductName AS `name`, p.SupplierID AS `supplierId`, p.CategoryID AS `categoryId`, p.QuantityPerUnit AS `quantity`, p.UnitPrice AS `price`, p.UnitsInStock AS `inStock`, p.UnitsOnOrder AS `onOrder`, p.ReorderLevel AS `reorderLevel`, p.Discontinued AS `discontinued`, p.CategoryID AS `__categoryId`, p.ProductID AS `__parentId` FROM Products p  WHERE  p.ProductID IN (?) ; SELECT c.CategoryID AS `id`, c.CategoryName AS `name`, c.Description AS `description`, c.CategoryID AS `__parentId` FROM Categories c  WHERE  c.CategoryID IN (?) ; SELECT c1.CustomerID AS `id`, c1.CompanyName AS `name`, c1.ContactName AS `contact`, c1.ContactTitle AS `phone`, c1.Address AS `address`, c1.City AS `city`, c1.Region AS `region`, c1.PostalCode AS `postalCode`, c1.Country AS `country`, c1.CustomerID AS `__parentId` FROM Customers c1  WHERE  c1.CustomerID IN (?) '
		let mariadb =  await orm.expression(expression).sentence('mariadb', 'northwind')
		mariadb=Helper.replace(mariadb,'\n','; ')
		expect(mariadbExpected).toBe(mariadb)
		const mssqlExpected = 'SELECT n.OrderID AS [id], n.CustomerID AS [customerId], n.EmployeeID AS [employeeId], n.OrderDate AS [orderDate], n.RequiredDate AS [requiredDate], n.ShippedDate AS [shippedDate], n.ShipVia AS [shipViaId], n.Freight AS [freight], n.ShipName AS [name], n.ShipAddress AS [address], n.ShipCity AS [city], n.ShipRegion AS [region], n.ShipPostalCode AS [postalCode], n.ShipCountry AS [country], n.OrderID AS [__id], n.CustomerID AS [__customerId] FROM Orders n  WHERE n.OrderID = :id ; SELECT o.OrderID AS [orderId], o.ProductID AS [productId], o.UnitPrice AS [unitPrice], o.Quantity AS [quantity], o.Discount AS [discount], o.ProductID AS [__productId], o.OrderID AS [__parentId] FROM [Order Details] o  WHERE  o.OrderID IN (:__parentId) ; SELECT p.ProductID AS [id], p.ProductName AS [name], p.SupplierID AS [supplierId], p.CategoryID AS [categoryId], p.QuantityPerUnit AS [quantity], p.UnitPrice AS [price], p.UnitsInStock AS [inStock], p.UnitsOnOrder AS [onOrder], p.ReorderLevel AS [reorderLevel], p.Discontinued AS [discontinued], p.CategoryID AS [__categoryId], p.ProductID AS [__parentId] FROM Products p  WHERE  p.ProductID IN (:__parentId) ; SELECT c.CategoryID AS [id], c.CategoryName AS [name], c.Description AS [description], c.CategoryID AS [__parentId] FROM Categories c  WHERE  c.CategoryID IN (:__parentId) ; SELECT c1.CustomerID AS [id], c1.CompanyName AS [name], c1.ContactName AS [contact], c1.ContactTitle AS [phone], c1.Address AS [address], c1.City AS [city], c1.Region AS [region], c1.PostalCode AS [postalCode], c1.Country AS [country], c1.CustomerID AS [__parentId] FROM Customers c1  WHERE  c1.CustomerID IN (:__parentId) '
		let mssql =  await orm.expression(expression).sentence('mssql', 'northwind')
		mssql=Helper.replace(mssql,'\n','; ')
		expect(mssqlExpected).toBe(mssql)
		const mysqlExpected = 'SELECT n.OrderID AS `id`, n.CustomerID AS `customerId`, n.EmployeeID AS `employeeId`, n.OrderDate AS `orderDate`, n.RequiredDate AS `requiredDate`, n.ShippedDate AS `shippedDate`, n.ShipVia AS `shipViaId`, n.Freight AS `freight`, n.ShipName AS `name`, n.ShipAddress AS `address`, n.ShipCity AS `city`, n.ShipRegion AS `region`, n.ShipPostalCode AS `postalCode`, n.ShipCountry AS `country`, n.OrderID AS `__id`, n.CustomerID AS `__customerId` FROM Orders n  WHERE n.OrderID = ? ; SELECT o.OrderID AS `orderId`, o.ProductID AS `productId`, o.UnitPrice AS `unitPrice`, o.Quantity AS `quantity`, o.Discount AS `discount`, o.ProductID AS `__productId`, o.OrderID AS `__parentId` FROM `Order Details` o  WHERE  o.OrderID IN (?) ; SELECT p.ProductID AS `id`, p.ProductName AS `name`, p.SupplierID AS `supplierId`, p.CategoryID AS `categoryId`, p.QuantityPerUnit AS `quantity`, p.UnitPrice AS `price`, p.UnitsInStock AS `inStock`, p.UnitsOnOrder AS `onOrder`, p.ReorderLevel AS `reorderLevel`, p.Discontinued AS `discontinued`, p.CategoryID AS `__categoryId`, p.ProductID AS `__parentId` FROM Products p  WHERE  p.ProductID IN (?) ; SELECT c.CategoryID AS `id`, c.CategoryName AS `name`, c.Description AS `description`, c.CategoryID AS `__parentId` FROM Categories c  WHERE  c.CategoryID IN (?) ; SELECT c1.CustomerID AS `id`, c1.CompanyName AS `name`, c1.ContactName AS `contact`, c1.ContactTitle AS `phone`, c1.Address AS `address`, c1.City AS `city`, c1.Region AS `region`, c1.PostalCode AS `postalCode`, c1.Country AS `country`, c1.CustomerID AS `__parentId` FROM Customers c1  WHERE  c1.CustomerID IN (?) '
		let mysql =  await orm.expression(expression).sentence('mysql', 'northwind')
		mysql=Helper.replace(mysql,'\n','; ')
		expect(mysqlExpected).toBe(mysql)
		const oracleExpected = 'SELECT n.OrderID AS "id", n.CustomerID AS "customerId", n.EmployeeID AS "employeeId", n.OrderDate AS "orderDate", n.RequiredDate AS "requiredDate", n.ShippedDate AS "shippedDate", n.ShipVia AS "shipViaId", n.Freight AS "freight", n.ShipName AS "name", n.ShipAddress AS "address", n.ShipCity AS "city", n.ShipRegion AS "region", n.ShipPostalCode AS "postalCode", n.ShipCountry AS "country", n.OrderID AS "__id", n.CustomerID AS "__customerId" FROM Orders n  WHERE n.OrderID = :id ; SELECT o.OrderID AS "orderId", o.ProductID AS "productId", o.UnitPrice AS "unitPrice", o.Quantity AS "quantity", o.Discount AS "discount", o.ProductID AS "__productId", o.OrderID AS "__parentId" FROM "Order Details" o  WHERE  o.OrderID IN (:__parentId) ; SELECT p.ProductID AS "id", p.ProductName AS "name", p.SupplierID AS "supplierId", p.CategoryID AS "categoryId", p.QuantityPerUnit AS "quantity", p.UnitPrice AS "price", p.UnitsInStock AS "inStock", p.UnitsOnOrder AS "onOrder", p.ReorderLevel AS "reorderLevel", p.Discontinued AS "discontinued", p.CategoryID AS "__categoryId", p.ProductID AS "__parentId" FROM Products p  WHERE  p.ProductID IN (:__parentId) ; SELECT c.CategoryID AS "id", c.CategoryName AS "name", c.Description AS "description", c.CategoryID AS "__parentId" FROM Categories c  WHERE  c.CategoryID IN (:__parentId) ; SELECT c1.CustomerID AS "id", c1.CompanyName AS "name", c1.ContactName AS "contact", c1.ContactTitle AS "phone", c1.Address AS "address", c1.City AS "city", c1.Region AS "region", c1.PostalCode AS "postalCode", c1.Country AS "country", c1.CustomerID AS "__parentId" FROM Customers c1  WHERE  c1.CustomerID IN (:__parentId) '
		let oracle =  await orm.expression(expression).sentence('oracle', 'northwind')
		oracle=Helper.replace(oracle,'\n','; ')
		expect(oracleExpected).toBe(oracle)
		const postgresExpected = 'SELECT n.OrderID AS "id", n.CustomerID AS "customerId", n.EmployeeID AS "employeeId", n.OrderDate AS "orderDate", n.RequiredDate AS "requiredDate", n.ShippedDate AS "shippedDate", n.ShipVia AS "shipViaId", n.Freight AS "freight", n.ShipName AS "name", n.ShipAddress AS "address", n.ShipCity AS "city", n.ShipRegion AS "region", n.ShipPostalCode AS "postalCode", n.ShipCountry AS "country", n.OrderID AS "__id", n.CustomerID AS "__customerId" FROM Orders n  WHERE n.OrderID = $1 ; SELECT o.OrderID AS "orderId", o.ProductID AS "productId", o.UnitPrice AS "unitPrice", o.Quantity AS "quantity", o.Discount AS "discount", o.ProductID AS "__productId", o.OrderID AS "__parentId" FROM "Order Details" o  WHERE  o.OrderID IN ($1) ; SELECT p.ProductID AS "id", p.ProductName AS "name", p.SupplierID AS "supplierId", p.CategoryID AS "categoryId", p.QuantityPerUnit AS "quantity", p.UnitPrice AS "price", p.UnitsInStock AS "inStock", p.UnitsOnOrder AS "onOrder", p.ReorderLevel AS "reorderLevel", p.Discontinued AS "discontinued", p.CategoryID AS "__categoryId", p.ProductID AS "__parentId" FROM Products p  WHERE  p.ProductID IN ($1) ; SELECT c.CategoryID AS "id", c.CategoryName AS "name", c.Description AS "description", c.CategoryID AS "__parentId" FROM Categories c  WHERE  c.CategoryID IN ($1) ; SELECT c1.CustomerID AS "id", c1.CompanyName AS "name", c1.ContactName AS "contact", c1.ContactTitle AS "phone", c1.Address AS "address", c1.City AS "city", c1.Region AS "region", c1.PostalCode AS "postalCode", c1.Country AS "country", c1.CustomerID AS "__parentId" FROM Customers c1  WHERE  c1.CustomerID IN ($1) '
		let postgres =  await orm.expression(expression).sentence('postgres', 'northwind')
		postgres=Helper.replace(postgres,'\n','; ')
		expect(postgresExpected).toBe(postgres)
	})
	test('include 6', async () => {
		const expression = 'northwind_1.Orders.filter(p=>(p.id===id)).include(p=>[p.details.map(p=>{quantity:p.quantity,unitPrice:p.unitPrice,productId:p.productId}),p.customer])'
		const mariadbExpected = 'SELECT n.OrderID AS `id`, n.CustomerID AS `customerId`, n.EmployeeID AS `employeeId`, n.OrderDate AS `orderDate`, n.RequiredDate AS `requiredDate`, n.ShippedDate AS `shippedDate`, n.ShipVia AS `shipViaId`, n.Freight AS `freight`, n.ShipName AS `name`, n.ShipAddress AS `address`, n.ShipCity AS `city`, n.ShipRegion AS `region`, n.ShipPostalCode AS `postalCode`, n.ShipCountry AS `country`, n.OrderID AS `__id`, n.CustomerID AS `__customerId` FROM Orders n  WHERE n.OrderID = ? ; SELECT o.Quantity AS `quantity`, o.UnitPrice AS `unitPrice`, o.ProductID AS `productId`, o.OrderID AS `__parentId` FROM `Order Details` o  WHERE  o.OrderID IN (?) ; SELECT c.CustomerID AS `id`, c.CompanyName AS `name`, c.ContactName AS `contact`, c.ContactTitle AS `phone`, c.Address AS `address`, c.City AS `city`, c.Region AS `region`, c.PostalCode AS `postalCode`, c.Country AS `country`, c.CustomerID AS `__parentId` FROM Customers c  WHERE  c.CustomerID IN (?) '
		let mariadb =  await orm.expression(expression).sentence('mariadb', 'northwind')
		mariadb=Helper.replace(mariadb,'\n','; ')
		expect(mariadbExpected).toBe(mariadb)
		const mssqlExpected = 'SELECT n.OrderID AS [id], n.CustomerID AS [customerId], n.EmployeeID AS [employeeId], n.OrderDate AS [orderDate], n.RequiredDate AS [requiredDate], n.ShippedDate AS [shippedDate], n.ShipVia AS [shipViaId], n.Freight AS [freight], n.ShipName AS [name], n.ShipAddress AS [address], n.ShipCity AS [city], n.ShipRegion AS [region], n.ShipPostalCode AS [postalCode], n.ShipCountry AS [country], n.OrderID AS [__id], n.CustomerID AS [__customerId] FROM Orders n  WHERE n.OrderID = :id ; SELECT o.Quantity AS [quantity], o.UnitPrice AS [unitPrice], o.ProductID AS [productId], o.OrderID AS [__parentId] FROM [Order Details] o  WHERE  o.OrderID IN (:__parentId) ; SELECT c.CustomerID AS [id], c.CompanyName AS [name], c.ContactName AS [contact], c.ContactTitle AS [phone], c.Address AS [address], c.City AS [city], c.Region AS [region], c.PostalCode AS [postalCode], c.Country AS [country], c.CustomerID AS [__parentId] FROM Customers c  WHERE  c.CustomerID IN (:__parentId) '
		let mssql =  await orm.expression(expression).sentence('mssql', 'northwind')
		mssql=Helper.replace(mssql,'\n','; ')
		expect(mssqlExpected).toBe(mssql)
		const mysqlExpected = 'SELECT n.OrderID AS `id`, n.CustomerID AS `customerId`, n.EmployeeID AS `employeeId`, n.OrderDate AS `orderDate`, n.RequiredDate AS `requiredDate`, n.ShippedDate AS `shippedDate`, n.ShipVia AS `shipViaId`, n.Freight AS `freight`, n.ShipName AS `name`, n.ShipAddress AS `address`, n.ShipCity AS `city`, n.ShipRegion AS `region`, n.ShipPostalCode AS `postalCode`, n.ShipCountry AS `country`, n.OrderID AS `__id`, n.CustomerID AS `__customerId` FROM Orders n  WHERE n.OrderID = ? ; SELECT o.Quantity AS `quantity`, o.UnitPrice AS `unitPrice`, o.ProductID AS `productId`, o.OrderID AS `__parentId` FROM `Order Details` o  WHERE  o.OrderID IN (?) ; SELECT c.CustomerID AS `id`, c.CompanyName AS `name`, c.ContactName AS `contact`, c.ContactTitle AS `phone`, c.Address AS `address`, c.City AS `city`, c.Region AS `region`, c.PostalCode AS `postalCode`, c.Country AS `country`, c.CustomerID AS `__parentId` FROM Customers c  WHERE  c.CustomerID IN (?) '
		let mysql =  await orm.expression(expression).sentence('mysql', 'northwind')
		mysql=Helper.replace(mysql,'\n','; ')
		expect(mysqlExpected).toBe(mysql)
		const oracleExpected = 'SELECT n.OrderID AS "id", n.CustomerID AS "customerId", n.EmployeeID AS "employeeId", n.OrderDate AS "orderDate", n.RequiredDate AS "requiredDate", n.ShippedDate AS "shippedDate", n.ShipVia AS "shipViaId", n.Freight AS "freight", n.ShipName AS "name", n.ShipAddress AS "address", n.ShipCity AS "city", n.ShipRegion AS "region", n.ShipPostalCode AS "postalCode", n.ShipCountry AS "country", n.OrderID AS "__id", n.CustomerID AS "__customerId" FROM Orders n  WHERE n.OrderID = :id ; SELECT o.Quantity AS "quantity", o.UnitPrice AS "unitPrice", o.ProductID AS "productId", o.OrderID AS "__parentId" FROM "Order Details" o  WHERE  o.OrderID IN (:__parentId) ; SELECT c.CustomerID AS "id", c.CompanyName AS "name", c.ContactName AS "contact", c.ContactTitle AS "phone", c.Address AS "address", c.City AS "city", c.Region AS "region", c.PostalCode AS "postalCode", c.Country AS "country", c.CustomerID AS "__parentId" FROM Customers c  WHERE  c.CustomerID IN (:__parentId) '
		let oracle =  await orm.expression(expression).sentence('oracle', 'northwind')
		oracle=Helper.replace(oracle,'\n','; ')
		expect(oracleExpected).toBe(oracle)
		const postgresExpected = 'SELECT n.OrderID AS "id", n.CustomerID AS "customerId", n.EmployeeID AS "employeeId", n.OrderDate AS "orderDate", n.RequiredDate AS "requiredDate", n.ShippedDate AS "shippedDate", n.ShipVia AS "shipViaId", n.Freight AS "freight", n.ShipName AS "name", n.ShipAddress AS "address", n.ShipCity AS "city", n.ShipRegion AS "region", n.ShipPostalCode AS "postalCode", n.ShipCountry AS "country", n.OrderID AS "__id", n.CustomerID AS "__customerId" FROM Orders n  WHERE n.OrderID = $1 ; SELECT o.Quantity AS "quantity", o.UnitPrice AS "unitPrice", o.ProductID AS "productId", o.OrderID AS "__parentId" FROM "Order Details" o  WHERE  o.OrderID IN ($1) ; SELECT c.CustomerID AS "id", c.CompanyName AS "name", c.ContactName AS "contact", c.ContactTitle AS "phone", c.Address AS "address", c.City AS "city", c.Region AS "region", c.PostalCode AS "postalCode", c.Country AS "country", c.CustomerID AS "__parentId" FROM Customers c  WHERE  c.CustomerID IN ($1) '
		let postgres =  await orm.expression(expression).sentence('postgres', 'northwind')
		postgres=Helper.replace(postgres,'\n','; ')
		expect(postgresExpected).toBe(postgres)
	})
	test('include 7', async () => {
		const expression = 'northwind_1.Orders.filter(p=>(p.id===id)).include(p=>[p.details.include(q=>q.product).map(p=>{quantity:p.quantity,unitPrice:p.unitPrice,productId:p.productId}),p.customer])'
		const mariadbExpected = 'SELECT n.OrderID AS `id`, n.CustomerID AS `customerId`, n.EmployeeID AS `employeeId`, n.OrderDate AS `orderDate`, n.RequiredDate AS `requiredDate`, n.ShippedDate AS `shippedDate`, n.ShipVia AS `shipViaId`, n.Freight AS `freight`, n.ShipName AS `name`, n.ShipAddress AS `address`, n.ShipCity AS `city`, n.ShipRegion AS `region`, n.ShipPostalCode AS `postalCode`, n.ShipCountry AS `country`, n.OrderID AS `__id`, n.CustomerID AS `__customerId` FROM Orders n  WHERE n.OrderID = ? ; SELECT o.Quantity AS `quantity`, o.UnitPrice AS `unitPrice`, o.ProductID AS `productId`, o.ProductID AS `__productId`, o.OrderID AS `__parentId` FROM `Order Details` o  WHERE  o.OrderID IN (?) ; SELECT p.ProductID AS `id`, p.ProductName AS `name`, p.SupplierID AS `supplierId`, p.CategoryID AS `categoryId`, p.QuantityPerUnit AS `quantity`, p.UnitPrice AS `price`, p.UnitsInStock AS `inStock`, p.UnitsOnOrder AS `onOrder`, p.ReorderLevel AS `reorderLevel`, p.Discontinued AS `discontinued`, p.ProductID AS `__parentId` FROM Products p  WHERE  p.ProductID IN (?) ; SELECT c.CustomerID AS `id`, c.CompanyName AS `name`, c.ContactName AS `contact`, c.ContactTitle AS `phone`, c.Address AS `address`, c.City AS `city`, c.Region AS `region`, c.PostalCode AS `postalCode`, c.Country AS `country`, c.CustomerID AS `__parentId` FROM Customers c  WHERE  c.CustomerID IN (?) '
		let mariadb =  await orm.expression(expression).sentence('mariadb', 'northwind')
		mariadb=Helper.replace(mariadb,'\n','; ')
		expect(mariadbExpected).toBe(mariadb)
		const mssqlExpected = 'SELECT n.OrderID AS [id], n.CustomerID AS [customerId], n.EmployeeID AS [employeeId], n.OrderDate AS [orderDate], n.RequiredDate AS [requiredDate], n.ShippedDate AS [shippedDate], n.ShipVia AS [shipViaId], n.Freight AS [freight], n.ShipName AS [name], n.ShipAddress AS [address], n.ShipCity AS [city], n.ShipRegion AS [region], n.ShipPostalCode AS [postalCode], n.ShipCountry AS [country], n.OrderID AS [__id], n.CustomerID AS [__customerId] FROM Orders n  WHERE n.OrderID = :id ; SELECT o.Quantity AS [quantity], o.UnitPrice AS [unitPrice], o.ProductID AS [productId], o.ProductID AS [__productId], o.OrderID AS [__parentId] FROM [Order Details] o  WHERE  o.OrderID IN (:__parentId) ; SELECT p.ProductID AS [id], p.ProductName AS [name], p.SupplierID AS [supplierId], p.CategoryID AS [categoryId], p.QuantityPerUnit AS [quantity], p.UnitPrice AS [price], p.UnitsInStock AS [inStock], p.UnitsOnOrder AS [onOrder], p.ReorderLevel AS [reorderLevel], p.Discontinued AS [discontinued], p.ProductID AS [__parentId] FROM Products p  WHERE  p.ProductID IN (:__parentId) ; SELECT c.CustomerID AS [id], c.CompanyName AS [name], c.ContactName AS [contact], c.ContactTitle AS [phone], c.Address AS [address], c.City AS [city], c.Region AS [region], c.PostalCode AS [postalCode], c.Country AS [country], c.CustomerID AS [__parentId] FROM Customers c  WHERE  c.CustomerID IN (:__parentId) '
		let mssql =  await orm.expression(expression).sentence('mssql', 'northwind')
		mssql=Helper.replace(mssql,'\n','; ')
		expect(mssqlExpected).toBe(mssql)
		const mysqlExpected = 'SELECT n.OrderID AS `id`, n.CustomerID AS `customerId`, n.EmployeeID AS `employeeId`, n.OrderDate AS `orderDate`, n.RequiredDate AS `requiredDate`, n.ShippedDate AS `shippedDate`, n.ShipVia AS `shipViaId`, n.Freight AS `freight`, n.ShipName AS `name`, n.ShipAddress AS `address`, n.ShipCity AS `city`, n.ShipRegion AS `region`, n.ShipPostalCode AS `postalCode`, n.ShipCountry AS `country`, n.OrderID AS `__id`, n.CustomerID AS `__customerId` FROM Orders n  WHERE n.OrderID = ? ; SELECT o.Quantity AS `quantity`, o.UnitPrice AS `unitPrice`, o.ProductID AS `productId`, o.ProductID AS `__productId`, o.OrderID AS `__parentId` FROM `Order Details` o  WHERE  o.OrderID IN (?) ; SELECT p.ProductID AS `id`, p.ProductName AS `name`, p.SupplierID AS `supplierId`, p.CategoryID AS `categoryId`, p.QuantityPerUnit AS `quantity`, p.UnitPrice AS `price`, p.UnitsInStock AS `inStock`, p.UnitsOnOrder AS `onOrder`, p.ReorderLevel AS `reorderLevel`, p.Discontinued AS `discontinued`, p.ProductID AS `__parentId` FROM Products p  WHERE  p.ProductID IN (?) ; SELECT c.CustomerID AS `id`, c.CompanyName AS `name`, c.ContactName AS `contact`, c.ContactTitle AS `phone`, c.Address AS `address`, c.City AS `city`, c.Region AS `region`, c.PostalCode AS `postalCode`, c.Country AS `country`, c.CustomerID AS `__parentId` FROM Customers c  WHERE  c.CustomerID IN (?) '
		let mysql =  await orm.expression(expression).sentence('mysql', 'northwind')
		mysql=Helper.replace(mysql,'\n','; ')
		expect(mysqlExpected).toBe(mysql)
		const oracleExpected = 'SELECT n.OrderID AS "id", n.CustomerID AS "customerId", n.EmployeeID AS "employeeId", n.OrderDate AS "orderDate", n.RequiredDate AS "requiredDate", n.ShippedDate AS "shippedDate", n.ShipVia AS "shipViaId", n.Freight AS "freight", n.ShipName AS "name", n.ShipAddress AS "address", n.ShipCity AS "city", n.ShipRegion AS "region", n.ShipPostalCode AS "postalCode", n.ShipCountry AS "country", n.OrderID AS "__id", n.CustomerID AS "__customerId" FROM Orders n  WHERE n.OrderID = :id ; SELECT o.Quantity AS "quantity", o.UnitPrice AS "unitPrice", o.ProductID AS "productId", o.ProductID AS "__productId", o.OrderID AS "__parentId" FROM "Order Details" o  WHERE  o.OrderID IN (:__parentId) ; SELECT p.ProductID AS "id", p.ProductName AS "name", p.SupplierID AS "supplierId", p.CategoryID AS "categoryId", p.QuantityPerUnit AS "quantity", p.UnitPrice AS "price", p.UnitsInStock AS "inStock", p.UnitsOnOrder AS "onOrder", p.ReorderLevel AS "reorderLevel", p.Discontinued AS "discontinued", p.ProductID AS "__parentId" FROM Products p  WHERE  p.ProductID IN (:__parentId) ; SELECT c.CustomerID AS "id", c.CompanyName AS "name", c.ContactName AS "contact", c.ContactTitle AS "phone", c.Address AS "address", c.City AS "city", c.Region AS "region", c.PostalCode AS "postalCode", c.Country AS "country", c.CustomerID AS "__parentId" FROM Customers c  WHERE  c.CustomerID IN (:__parentId) '
		let oracle =  await orm.expression(expression).sentence('oracle', 'northwind')
		oracle=Helper.replace(oracle,'\n','; ')
		expect(oracleExpected).toBe(oracle)
		const postgresExpected = 'SELECT n.OrderID AS "id", n.CustomerID AS "customerId", n.EmployeeID AS "employeeId", n.OrderDate AS "orderDate", n.RequiredDate AS "requiredDate", n.ShippedDate AS "shippedDate", n.ShipVia AS "shipViaId", n.Freight AS "freight", n.ShipName AS "name", n.ShipAddress AS "address", n.ShipCity AS "city", n.ShipRegion AS "region", n.ShipPostalCode AS "postalCode", n.ShipCountry AS "country", n.OrderID AS "__id", n.CustomerID AS "__customerId" FROM Orders n  WHERE n.OrderID = $1 ; SELECT o.Quantity AS "quantity", o.UnitPrice AS "unitPrice", o.ProductID AS "productId", o.ProductID AS "__productId", o.OrderID AS "__parentId" FROM "Order Details" o  WHERE  o.OrderID IN ($1) ; SELECT p.ProductID AS "id", p.ProductName AS "name", p.SupplierID AS "supplierId", p.CategoryID AS "categoryId", p.QuantityPerUnit AS "quantity", p.UnitPrice AS "price", p.UnitsInStock AS "inStock", p.UnitsOnOrder AS "onOrder", p.ReorderLevel AS "reorderLevel", p.Discontinued AS "discontinued", p.ProductID AS "__parentId" FROM Products p  WHERE  p.ProductID IN ($1) ; SELECT c.CustomerID AS "id", c.CompanyName AS "name", c.ContactName AS "contact", c.ContactTitle AS "phone", c.Address AS "address", c.City AS "city", c.Region AS "region", c.PostalCode AS "postalCode", c.Country AS "country", c.CustomerID AS "__parentId" FROM Customers c  WHERE  c.CustomerID IN ($1) '
		let postgres =  await orm.expression(expression).sentence('postgres', 'northwind')
		postgres=Helper.replace(postgres,'\n','; ')
		expect(postgresExpected).toBe(postgres)
	})
	test('include 8', async () => {
		const expression = 'northwind_1.Orders.filter(p=>(p.id===id)).include(p=>[p.customer.map(p=>p.name),p.details.include(p=>p.product.include(p=>p.category.map(p=>p.name)).map(p=>p.name)).map(p=>[p.quantity,p.unitPrice])])'
		const mariadbExpected = 'SELECT n.OrderID AS `id`, n.CustomerID AS `customerId`, n.EmployeeID AS `employeeId`, n.OrderDate AS `orderDate`, n.RequiredDate AS `requiredDate`, n.ShippedDate AS `shippedDate`, n.ShipVia AS `shipViaId`, n.Freight AS `freight`, n.ShipName AS `name`, n.ShipAddress AS `address`, n.ShipCity AS `city`, n.ShipRegion AS `region`, n.ShipPostalCode AS `postalCode`, n.ShipCountry AS `country`, n.CustomerID AS `__customerId`, n.OrderID AS `__id` FROM Orders n  WHERE n.OrderID = ? ; SELECT c.CompanyName AS `name`, c.CustomerID AS `__parentId` FROM Customers c  WHERE  c.CustomerID IN (?) ; SELECT o.Quantity AS `quantity`, o.UnitPrice AS `unitPrice`, o.ProductID AS `__productId`, o.OrderID AS `__parentId` FROM `Order Details` o  WHERE  o.OrderID IN (?) ; SELECT p.ProductName AS `name`, p.CategoryID AS `__categoryId`, p.ProductID AS `__parentId` FROM Products p  WHERE  p.ProductID IN (?) ; SELECT c1.CategoryName AS `name`, c1.CategoryID AS `__parentId` FROM Categories c1  WHERE  c1.CategoryID IN (?) '
		let mariadb =  await orm.expression(expression).sentence('mariadb', 'northwind')
		mariadb=Helper.replace(mariadb,'\n','; ')
		expect(mariadbExpected).toBe(mariadb)
		const mssqlExpected = 'SELECT n.OrderID AS [id], n.CustomerID AS [customerId], n.EmployeeID AS [employeeId], n.OrderDate AS [orderDate], n.RequiredDate AS [requiredDate], n.ShippedDate AS [shippedDate], n.ShipVia AS [shipViaId], n.Freight AS [freight], n.ShipName AS [name], n.ShipAddress AS [address], n.ShipCity AS [city], n.ShipRegion AS [region], n.ShipPostalCode AS [postalCode], n.ShipCountry AS [country], n.CustomerID AS [__customerId], n.OrderID AS [__id] FROM Orders n  WHERE n.OrderID = :id ; SELECT c.CompanyName AS [name], c.CustomerID AS [__parentId] FROM Customers c  WHERE  c.CustomerID IN (:__parentId) ; SELECT o.Quantity AS [quantity], o.UnitPrice AS [unitPrice], o.ProductID AS [__productId], o.OrderID AS [__parentId] FROM [Order Details] o  WHERE  o.OrderID IN (:__parentId) ; SELECT p.ProductName AS [name], p.CategoryID AS [__categoryId], p.ProductID AS [__parentId] FROM Products p  WHERE  p.ProductID IN (:__parentId) ; SELECT c1.CategoryName AS [name], c1.CategoryID AS [__parentId] FROM Categories c1  WHERE  c1.CategoryID IN (:__parentId) '
		let mssql =  await orm.expression(expression).sentence('mssql', 'northwind')
		mssql=Helper.replace(mssql,'\n','; ')
		expect(mssqlExpected).toBe(mssql)
		const mysqlExpected = 'SELECT n.OrderID AS `id`, n.CustomerID AS `customerId`, n.EmployeeID AS `employeeId`, n.OrderDate AS `orderDate`, n.RequiredDate AS `requiredDate`, n.ShippedDate AS `shippedDate`, n.ShipVia AS `shipViaId`, n.Freight AS `freight`, n.ShipName AS `name`, n.ShipAddress AS `address`, n.ShipCity AS `city`, n.ShipRegion AS `region`, n.ShipPostalCode AS `postalCode`, n.ShipCountry AS `country`, n.CustomerID AS `__customerId`, n.OrderID AS `__id` FROM Orders n  WHERE n.OrderID = ? ; SELECT c.CompanyName AS `name`, c.CustomerID AS `__parentId` FROM Customers c  WHERE  c.CustomerID IN (?) ; SELECT o.Quantity AS `quantity`, o.UnitPrice AS `unitPrice`, o.ProductID AS `__productId`, o.OrderID AS `__parentId` FROM `Order Details` o  WHERE  o.OrderID IN (?) ; SELECT p.ProductName AS `name`, p.CategoryID AS `__categoryId`, p.ProductID AS `__parentId` FROM Products p  WHERE  p.ProductID IN (?) ; SELECT c1.CategoryName AS `name`, c1.CategoryID AS `__parentId` FROM Categories c1  WHERE  c1.CategoryID IN (?) '
		let mysql =  await orm.expression(expression).sentence('mysql', 'northwind')
		mysql=Helper.replace(mysql,'\n','; ')
		expect(mysqlExpected).toBe(mysql)
		const oracleExpected = 'SELECT n.OrderID AS "id", n.CustomerID AS "customerId", n.EmployeeID AS "employeeId", n.OrderDate AS "orderDate", n.RequiredDate AS "requiredDate", n.ShippedDate AS "shippedDate", n.ShipVia AS "shipViaId", n.Freight AS "freight", n.ShipName AS "name", n.ShipAddress AS "address", n.ShipCity AS "city", n.ShipRegion AS "region", n.ShipPostalCode AS "postalCode", n.ShipCountry AS "country", n.CustomerID AS "__customerId", n.OrderID AS "__id" FROM Orders n  WHERE n.OrderID = :id ; SELECT c.CompanyName AS "name", c.CustomerID AS "__parentId" FROM Customers c  WHERE  c.CustomerID IN (:__parentId) ; SELECT o.Quantity AS "quantity", o.UnitPrice AS "unitPrice", o.ProductID AS "__productId", o.OrderID AS "__parentId" FROM "Order Details" o  WHERE  o.OrderID IN (:__parentId) ; SELECT p.ProductName AS "name", p.CategoryID AS "__categoryId", p.ProductID AS "__parentId" FROM Products p  WHERE  p.ProductID IN (:__parentId) ; SELECT c1.CategoryName AS "name", c1.CategoryID AS "__parentId" FROM Categories c1  WHERE  c1.CategoryID IN (:__parentId) '
		let oracle =  await orm.expression(expression).sentence('oracle', 'northwind')
		oracle=Helper.replace(oracle,'\n','; ')
		expect(oracleExpected).toBe(oracle)
		const postgresExpected = 'SELECT n.OrderID AS "id", n.CustomerID AS "customerId", n.EmployeeID AS "employeeId", n.OrderDate AS "orderDate", n.RequiredDate AS "requiredDate", n.ShippedDate AS "shippedDate", n.ShipVia AS "shipViaId", n.Freight AS "freight", n.ShipName AS "name", n.ShipAddress AS "address", n.ShipCity AS "city", n.ShipRegion AS "region", n.ShipPostalCode AS "postalCode", n.ShipCountry AS "country", n.CustomerID AS "__customerId", n.OrderID AS "__id" FROM Orders n  WHERE n.OrderID = $1 ; SELECT c.CompanyName AS "name", c.CustomerID AS "__parentId" FROM Customers c  WHERE  c.CustomerID IN ($1) ; SELECT o.Quantity AS "quantity", o.UnitPrice AS "unitPrice", o.ProductID AS "__productId", o.OrderID AS "__parentId" FROM "Order Details" o  WHERE  o.OrderID IN ($1) ; SELECT p.ProductName AS "name", p.CategoryID AS "__categoryId", p.ProductID AS "__parentId" FROM Products p  WHERE  p.ProductID IN ($1) ; SELECT c1.CategoryName AS "name", c1.CategoryID AS "__parentId" FROM Categories c1  WHERE  c1.CategoryID IN ($1) '
		let postgres =  await orm.expression(expression).sentence('postgres', 'northwind')
		postgres=Helper.replace(postgres,'\n','; ')
		expect(postgresExpected).toBe(postgres)
	})
})