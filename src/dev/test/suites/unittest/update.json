{
  "name": "update",
  "context": {
    "id": 1
  },
  "cases": [
    {
      "name": "normalize",
      "tests": [
        {
          "test": "Categories.update()",
          "result": "Categories.update(p=>{name:name,description:description}).filter(p=>(p.id==id))"
        },
        {
          "test": "Categories.update(entity)",
          "result": "Categories.update(p=>{name:entity.name,description:entity.description}).filter(p=>(p.id==entity.id))"
        },
        {
          "test": "Categories.update(p => entity)",
          "result": "Categories.update(p=>{name:entity.name,description:entity.description}).filter(p=>(p.id==id))"
        },
        {
          "test": "Categories.update(p => p)",
          "result": "Categories.update(p=>{name:name,description:description}).filter(p=>(p.id==id))"
        },
        {
          "test": "Categories.update(p => { name: entity.name })",
          "result": "Categories.update(p=>{name:entity.name}).filter(p=>(p.id==id))"
        },
        {
          "test": "Categories.update(p => { name: upper(p.name) })",
          "result": "Categories.update(p=>{name:upper(p.name)}).filter(p=>(p.id==id))"
        },
        {
          "test": "Categories.update(p => { name: concat(\"_\" + p.name) })",
          "result": "Categories.update(p=>{name:concat((_+p.name))}).filter(p=>(p.id==id))"
        },
        {
          "test": "Categories.update(() => [name] )",
          "result": "Categories.update(=>{name:name}).filter(p=>(p.id==id))"
        },
        {
          "test": "Categories.update({ name: entity.name })",
          "result": "Categories.update(p=>{name:entity.name}).filter(p=>(p.id==id))"
        },
        {
          "test": "Categories.update([name, description])",
          "result": "Categories.update(p=>{name:name,description:description})"
        },
        {
          "test": "Categories.update(p=>[name, description])",
          "result": "Categories.update(p=>{name:name,description:description}).filter(p=>(p.id==id))"
        },
        {
          "test": "Categories.update(p=>{name:name,description:description})",
          "result": "Categories.update(p=>{name:name,description:description}).filter(p=>(p.id==id))"
        },
        {
          "test": "Categories.update(p=>{name:upper(p.name),description:description})",
          "result": "Categories.update(p=>{name:upper(p.name),description:description}).filter(p=>(p.id==id))"
        },
        {
          "test": "Categories.updateAll(p => { name: upper(p.name) })",
          "result": "Categories.update(p=>{name:upper(p.name)})"
        },
        {
          "test": "Categories.updateAll(p => { name: concat(\"_\",p.name) })",
          "result": "Categories.update(p=>{name:concat(_,p.name)})"
        },
        {
          "test": "Categories.updateAll(() => [name])",
          "result": "Categories.update(=>{name:name})"
        },
        {
          "test": "Orders.update({ name: entity.name }).filter(p => p.id === entity.id)",
          "result": "Orders.update(p=>{name:entity.name}).filter(p=>(p.id==entity.id))"
        },
        {
          "test": "Orders.update({ name: entity.name }).include(p => p.details.update(p => p)).filter(p => p.id === entity.id)",
          "result": "Orders.update(p=>{name:entity.name}).filter(p=>(p.id==entity.id)).include(p=>p.details.update(p=>{unitPrice:unitPrice,quantity:quantity,discount:discount}).filter(p=>((p.orderId==orderId)&&(p.productId==productId))))"
        },
        {
          "test": "Orders.update({ name: entity.name }).include(p => p.details.update(p => ({ unitPrice: p.unitPrice, productId: p.productId }))).filter(p => p.id === entity.id)",
          "result": "Orders.update(p=>{name:entity.name}).filter(p=>(p.id==entity.id)).include(p=>p.details.update(p=>{unitPrice:p.unitPrice,productId:p.productId}).filter(p=>((p.orderId==orderId)&&(p.productId==productId))))"
        },
        {
          "test": "Orders.update(p => ({ name: entity.name })).filter(p => p.id === entity.id)",
          "result": "Orders.update(p=>{name:entity.name}).filter(p=>(p.id==entity.id))"
        },
        {
          "test": "Orders.update(() => ({ name: entity.name })).include(p => p.details).filter(p => p.id === entity.id)",
          "result": "Orders.update(=>{name:entity.name}).filter(p=>(p.id==entity.id)).include(p=>p.details.update(p=>{orderId:orderId,productId:productId,unitPrice:unitPrice,quantity:quantity,discount:discount}).filter(p=>((p.orderId==orderId)&&(p.productId==productId))))"
        },
        {
          "test": "Orders.update(() => ({ name: entity.name })).include(p => p.details.update(p => p)).filter(p => p.id === entity.id)",
          "result": "Orders.update(=>{name:entity.name}).filter(p=>(p.id==entity.id)).include(p=>p.details.update(p=>{unitPrice:unitPrice,quantity:quantity,discount:discount}).filter(p=>((p.orderId==orderId)&&(p.productId==productId))))"
        },
        {
          "test": "Orders.update(() => ({ name: entity.name })).include(p => p.details.update(p => ({ unitPrice: p.unitPrice, productId: p.productId }))).filter(p => p.id === entity.id)",
          "result": "Orders.update(=>{name:entity.name}).filter(p=>(p.id==entity.id)).include(p=>p.details.update(p=>{unitPrice:p.unitPrice,productId:p.productId}).filter(p=>((p.orderId==orderId)&&(p.productId==productId))))"
        },
        {
          "test": "Orders.update().include(p => p.details)",
          "result": "Orders.update(p=>{customerId:customerId,employeeId:employeeId,orderDate:orderDate,requiredDate:requiredDate,shippedDate:shippedDate,shipViaId:shipViaId,freight:freight,name:name,address:address,city:city,region:region,postalCode:postalCode,country:country}).filter(p=>(p.id==id)).include(p=>p.details.update(p=>{orderId:orderId,productId:productId,unitPrice:unitPrice,quantity:quantity,discount:discount}).filter(p=>((p.orderId==orderId)&&(p.productId==productId))))"
        },
        {
          "test": "Customers.update().include(p => p.orders.include(p => p.details))",
          "result": "Customers.update(p=>{id:id,name:name,contact:contact,phone:phone,address:address,city:city,region:region,postalCode:postalCode,country:country}).filter(p=>(p.id==id)).include(p=>p.orders.update(p=>{customerId:customerId,employeeId:employeeId,orderDate:orderDate,requiredDate:requiredDate,shippedDate:shippedDate,shipViaId:shipViaId,freight:freight,name:name,address:address,city:city,region:region,postalCode:postalCode,country:country}).filter(p=>(p.id==id)).include(p=>p.details.update(p=>{orderId:orderId,productId:productId,unitPrice:unitPrice,quantity:quantity,discount:discount}).filter(p=>((p.orderId==orderId)&&(p.productId==productId)))))"
        }
      ]
    },
    {
      "name": "model",
      "tests": [
        {
          "test": "Categories.update()",
          "result": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "description",
              "type": "string"
            }
          ]
        },
        {
          "test": "Categories.update(entity)",
          "result": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "description",
              "type": "string"
            }
          ]
        },
        {
          "test": "Categories.update(p => entity)",
          "result": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "description",
              "type": "string"
            }
          ]
        },
        {
          "test": "Categories.update(p => p)",
          "result": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "description",
              "type": "string"
            }
          ]
        },
        {
          "test": "Categories.update(p => { name: entity.name })",
          "result": [
            {
              "name": "name",
              "type": "string"
            }
          ]
        },
        {
          "test": "Categories.update(p => { name: upper(p.name) })",
          "result": [
            {
              "name": "name",
              "type": "string"
            }
          ]
        },
        {
          "test": "Categories.update(p => { name: concat(\"_\" + p.name) })",
          "result": [
            {
              "name": "name",
              "type": "string"
            }
          ]
        },
        {
          "test": "Categories.update(() => [name] )",
          "result": [
            {
              "name": "name",
              "type": "string"
            }
          ]
        },
        {
          "test": "Categories.update({ name: entity.name })",
          "result": [
            {
              "name": "name",
              "type": "string"
            }
          ]
        },
        {
          "test": "Categories.update([name, description])",
          "result": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "description",
              "type": "string"
            }
          ]
        },
        {
          "test": "Categories.update(p=>[name, description])",
          "result": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "description",
              "type": "string"
            }
          ]
        },
        {
          "test": "Categories.update(p=>{name:name,description:description})",
          "result": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "description",
              "type": "string"
            }
          ]
        },
        {
          "test": "Categories.update(p=>{name:upper(p.name),description:description})",
          "result": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "description",
              "type": "string"
            }
          ]
        },
        {
          "test": "Categories.updateAll(p => { name: upper(p.name) })",
          "result": [
            {
              "name": "name",
              "type": "string"
            }
          ]
        },
        {
          "test": "Categories.updateAll(p => { name: concat(\"_\",p.name) })",
          "result": [
            {
              "name": "name",
              "type": "string"
            }
          ]
        },
        {
          "test": "Categories.updateAll(() => [name])",
          "result": [
            {
              "name": "name",
              "type": "string"
            }
          ]
        },
        {
          "test": "Orders.update({ name: entity.name }).filter(p => p.id === entity.id)",
          "result": [
            {
              "name": "name",
              "type": "string"
            }
          ]
        },
        {
          "test": "Orders.update({ name: entity.name }).include(p => p.details.update(p => p)).filter(p => p.id === entity.id)",
          "result": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "details",
              "type": "Orders.details[]",
              "children": [
                {
                  "name": "unitPrice",
                  "type": "decimal"
                },
                {
                  "name": "quantity",
                  "type": "decimal"
                },
                {
                  "name": "discount",
                  "type": "decimal"
                }
              ]
            }
          ]
        },
        {
          "test": "Orders.update({ name: entity.name }).include(p => p.details.update(p => ({ unitPrice: p.unitPrice, productId: p.productId }))).filter(p => p.id === entity.id)",
          "result": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "details",
              "type": "Orders.details[]",
              "children": [
                {
                  "name": "unitPrice",
                  "type": "decimal"
                },
                {
                  "name": "productId",
                  "type": "integer"
                }
              ]
            }
          ]
        },
        {
          "test": "Orders.update(p => ({ name: entity.name })).filter(p => p.id === entity.id)",
          "result": [
            {
              "name": "name",
              "type": "string"
            }
          ]
        },
        {
          "test": "Orders.update(() => ({ name: entity.name })).include(p => p.details).filter(p => p.id === entity.id)",
          "result": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "details",
              "type": "Orders.details[]",
              "children": [
                {
                  "name": "orderId",
                  "type": "integer"
                },
                {
                  "name": "productId",
                  "type": "integer"
                },
                {
                  "name": "unitPrice",
                  "type": "decimal"
                },
                {
                  "name": "quantity",
                  "type": "decimal"
                },
                {
                  "name": "discount",
                  "type": "decimal"
                }
              ]
            }
          ]
        },
        {
          "test": "Orders.update(() => ({ name: entity.name })).include(p => p.details.update(p => p)).filter(p => p.id === entity.id)",
          "result": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "details",
              "type": "Orders.details[]",
              "children": [
                {
                  "name": "unitPrice",
                  "type": "decimal"
                },
                {
                  "name": "quantity",
                  "type": "decimal"
                },
                {
                  "name": "discount",
                  "type": "decimal"
                }
              ]
            }
          ]
        },
        {
          "test": "Orders.update(() => ({ name: entity.name })).include(p => p.details.update(p => ({ unitPrice: p.unitPrice, productId: p.productId }))).filter(p => p.id === entity.id)",
          "result": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "details",
              "type": "Orders.details[]",
              "children": [
                {
                  "name": "unitPrice",
                  "type": "decimal"
                },
                {
                  "name": "productId",
                  "type": "integer"
                }
              ]
            }
          ]
        },
        {
          "test": "Orders.update().include(p => p.details)",
          "result": [
            {
              "name": "customerId",
              "type": "string"
            },
            {
              "name": "employeeId",
              "type": "integer"
            },
            {
              "name": "orderDate",
              "type": "datetime"
            },
            {
              "name": "requiredDate",
              "type": "date"
            },
            {
              "name": "shippedDate",
              "type": "date"
            },
            {
              "name": "shipViaId",
              "type": "integer"
            },
            {
              "name": "freight",
              "type": "decimal"
            },
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "address",
              "type": "string"
            },
            {
              "name": "city",
              "type": "string"
            },
            {
              "name": "region",
              "type": "string"
            },
            {
              "name": "postalCode",
              "type": "string"
            },
            {
              "name": "country",
              "type": "string"
            },
            {
              "name": "details",
              "type": "Orders.details[]",
              "children": [
                {
                  "name": "orderId",
                  "type": "integer"
                },
                {
                  "name": "productId",
                  "type": "integer"
                },
                {
                  "name": "unitPrice",
                  "type": "decimal"
                },
                {
                  "name": "quantity",
                  "type": "decimal"
                },
                {
                  "name": "discount",
                  "type": "decimal"
                }
              ]
            }
          ]
        },
        {
          "test": "Customers.update().include(p => p.orders.include(p => p.details))",
          "result": [
            {
              "name": "id",
              "type": "string"
            },
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "contact",
              "type": "string"
            },
            {
              "name": "phone",
              "type": "string"
            },
            {
              "name": "address",
              "type": "string"
            },
            {
              "name": "city",
              "type": "string"
            },
            {
              "name": "region",
              "type": "string"
            },
            {
              "name": "postalCode",
              "type": "string"
            },
            {
              "name": "country",
              "type": "string"
            },
            {
              "name": "orders",
              "type": "Orders[]",
              "children": [
                {
                  "name": "customerId",
                  "type": "string"
                },
                {
                  "name": "employeeId",
                  "type": "integer"
                },
                {
                  "name": "orderDate",
                  "type": "datetime"
                },
                {
                  "name": "requiredDate",
                  "type": "date"
                },
                {
                  "name": "shippedDate",
                  "type": "date"
                },
                {
                  "name": "shipViaId",
                  "type": "integer"
                },
                {
                  "name": "freight",
                  "type": "decimal"
                },
                {
                  "name": "name",
                  "type": "string"
                },
                {
                  "name": "address",
                  "type": "string"
                },
                {
                  "name": "city",
                  "type": "string"
                },
                {
                  "name": "region",
                  "type": "string"
                },
                {
                  "name": "postalCode",
                  "type": "string"
                },
                {
                  "name": "country",
                  "type": "string"
                },
                {
                  "name": "details",
                  "type": "Orders.details[]",
                  "children": [
                    {
                      "name": "orderId",
                      "type": "integer"
                    },
                    {
                      "name": "productId",
                      "type": "integer"
                    },
                    {
                      "name": "unitPrice",
                      "type": "decimal"
                    },
                    {
                      "name": "quantity",
                      "type": "decimal"
                    },
                    {
                      "name": "discount",
                      "type": "decimal"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "parameters",
      "tests": [
        {
          "test": "Categories.update()",
          "result": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "description",
              "type": "string"
            },
            {
              "name": "id",
              "type": "integer"
            }
          ]
        },
        {
          "test": "Categories.update(entity)",
          "result": [
            {
              "name": "entity.name",
              "type": "string"
            },
            {
              "name": "entity.description",
              "type": "string"
            },
            {
              "name": "entity.id",
              "type": "integer"
            }
          ]
        },
        {
          "test": "Categories.update(p => entity)",
          "result": [
            {
              "name": "entity.name",
              "type": "string"
            },
            {
              "name": "entity.description",
              "type": "string"
            },
            {
              "name": "id",
              "type": "integer"
            }
          ]
        },
        {
          "test": "Categories.update(p => p)",
          "result": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "description",
              "type": "string"
            },
            {
              "name": "id",
              "type": "integer"
            }
          ]
        },
        {
          "test": "Categories.update(p => { name: entity.name })",
          "result": [
            {
              "name": "entity.name",
              "type": "any"
            },
            {
              "name": "id",
              "type": "integer"
            }
          ]
        },
        {
          "test": "Categories.update(p => { name: upper(p.name) })",
          "result": [
            {
              "name": "id",
              "type": "integer"
            }
          ]
        },
        {
          "test": "Categories.update(p => { name: concat(\"_\" + p.name) })",
          "result": [
            {
              "name": "id",
              "type": "integer"
            }
          ]
        },
        {
          "test": "Categories.update(() => [name] )",
          "result": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "id",
              "type": "integer"
            }
          ]
        },
        {
          "test": "Categories.update({ name: entity.name })",
          "result": [
            {
              "name": "entity.name",
              "type": "any"
            },
            {
              "name": "id",
              "type": "integer"
            }
          ]
        },
        {
          "test": "Categories.update([name, description])",
          "result": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "description",
              "type": "string"
            }
          ]
        },
        {
          "test": "Categories.update(p=>[name, description])",
          "result": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "description",
              "type": "string"
            },
            {
              "name": "id",
              "type": "integer"
            }
          ]
        },
        {
          "test": "Categories.update(p=>{name:name,description:description})",
          "result": [
            {
              "name": "name",
              "type": "any"
            },
            {
              "name": "description",
              "type": "any"
            },
            {
              "name": "id",
              "type": "integer"
            }
          ]
        },
        {
          "test": "Categories.update(p=>{name:upper(p.name),description:description})",
          "result": [
            {
              "name": "description",
              "type": "any"
            },
            {
              "name": "id",
              "type": "integer"
            }
          ]
        },
        {
          "test": "Categories.updateAll(p => { name: upper(p.name) })",
          "result": []
        },
        {
          "test": "Categories.updateAll(p => { name: concat(\"_\",p.name) })",
          "result": []
        },
        {
          "test": "Categories.updateAll(() => [name])",
          "result": [
            {
              "name": "name",
              "type": "string"
            }
          ]
        },
        {
          "test": "Orders.update({ name: entity.name }).filter(p => p.id === entity.id)",
          "result": [
            {
              "name": "entity.name",
              "type": "any"
            },
            {
              "name": "entity.id",
              "type": "integer"
            }
          ]
        },
        {
          "test": "Orders.update({ name: entity.name }).include(p => p.details.update(p => p)).filter(p => p.id === entity.id)",
          "result": [
            {
              "name": "entity.name",
              "type": "any"
            },
            {
              "name": "entity.id",
              "type": "integer"
            },
            {
              "name": "details",
              "type": "Orders.details",
              "children": [
                {
                  "name": "unitPrice",
                  "type": "decimal"
                },
                {
                  "name": "quantity",
                  "type": "decimal"
                },
                {
                  "name": "discount",
                  "type": "decimal"
                },
                {
                  "name": "orderId",
                  "type": "integer"
                },
                {
                  "name": "productId",
                  "type": "integer"
                }
              ]
            }
          ]
        },
        {
          "test": "Orders.update({ name: entity.name }).include(p => p.details.update(p => ({ unitPrice: p.unitPrice, productId: p.productId }))).filter(p => p.id === entity.id)",
          "result": [
            {
              "name": "entity.name",
              "type": "any"
            },
            {
              "name": "entity.id",
              "type": "integer"
            },
            {
              "name": "details",
              "type": "Orders.details",
              "children": [
                {
                  "name": "orderId",
                  "type": "integer"
                },
                {
                  "name": "productId",
                  "type": "integer"
                }
              ]
            }
          ]
        },
        {
          "test": "Orders.update(p => ({ name: entity.name })).filter(p => p.id === entity.id)",
          "result": [
            {
              "name": "entity.name",
              "type": "any"
            },
            {
              "name": "entity.id",
              "type": "integer"
            }
          ]
        },
        {
          "test": "Orders.update(() => ({ name: entity.name })).include(p => p.details).filter(p => p.id === entity.id)",
          "result": [
            {
              "name": "entity.name",
              "type": "any"
            },
            {
              "name": "entity.id",
              "type": "integer"
            },
            {
              "name": "details",
              "type": "Orders.details",
              "children": [
                {
                  "name": "orderId",
                  "type": "integer"
                },
                {
                  "name": "productId",
                  "type": "integer"
                },
                {
                  "name": "unitPrice",
                  "type": "decimal"
                },
                {
                  "name": "quantity",
                  "type": "decimal"
                },
                {
                  "name": "discount",
                  "type": "decimal"
                },
                {
                  "name": "orderId",
                  "type": "integer"
                },
                {
                  "name": "productId",
                  "type": "integer"
                }
              ]
            }
          ]
        },
        {
          "test": "Orders.update(() => ({ name: entity.name })).include(p => p.details.update(p => p)).filter(p => p.id === entity.id)",
          "result": [
            {
              "name": "entity.name",
              "type": "any"
            },
            {
              "name": "entity.id",
              "type": "integer"
            },
            {
              "name": "details",
              "type": "Orders.details",
              "children": [
                {
                  "name": "unitPrice",
                  "type": "decimal"
                },
                {
                  "name": "quantity",
                  "type": "decimal"
                },
                {
                  "name": "discount",
                  "type": "decimal"
                },
                {
                  "name": "orderId",
                  "type": "integer"
                },
                {
                  "name": "productId",
                  "type": "integer"
                }
              ]
            }
          ]
        },
        {
          "test": "Orders.update(() => ({ name: entity.name })).include(p => p.details.update(p => ({ unitPrice: p.unitPrice, productId: p.productId }))).filter(p => p.id === entity.id)",
          "result": [
            {
              "name": "entity.name",
              "type": "any"
            },
            {
              "name": "entity.id",
              "type": "integer"
            },
            {
              "name": "details",
              "type": "Orders.details",
              "children": [
                {
                  "name": "orderId",
                  "type": "integer"
                },
                {
                  "name": "productId",
                  "type": "integer"
                }
              ]
            }
          ]
        },
        {
          "test": "Orders.update().include(p => p.details)",
          "result": [
            {
              "name": "customerId",
              "type": "string"
            },
            {
              "name": "employeeId",
              "type": "integer"
            },
            {
              "name": "orderDate",
              "type": "any"
            },
            {
              "name": "requiredDate",
              "type": "date"
            },
            {
              "name": "shippedDate",
              "type": "date"
            },
            {
              "name": "shipViaId",
              "type": "integer"
            },
            {
              "name": "freight",
              "type": "decimal"
            },
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "address",
              "type": "string"
            },
            {
              "name": "city",
              "type": "string"
            },
            {
              "name": "region",
              "type": "string"
            },
            {
              "name": "postalCode",
              "type": "string"
            },
            {
              "name": "country",
              "type": "string"
            },
            {
              "name": "id",
              "type": "integer"
            },
            {
              "name": "details",
              "type": "Orders.details",
              "children": [
                {
                  "name": "orderId",
                  "type": "integer"
                },
                {
                  "name": "productId",
                  "type": "integer"
                },
                {
                  "name": "unitPrice",
                  "type": "decimal"
                },
                {
                  "name": "quantity",
                  "type": "decimal"
                },
                {
                  "name": "discount",
                  "type": "decimal"
                },
                {
                  "name": "orderId",
                  "type": "integer"
                },
                {
                  "name": "productId",
                  "type": "integer"
                }
              ]
            }
          ]
        },
        {
          "test": "Customers.update().include(p => p.orders.include(p => p.details))",
          "result": [
            {
              "name": "id",
              "type": "string"
            },
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "contact",
              "type": "string"
            },
            {
              "name": "phone",
              "type": "string"
            },
            {
              "name": "address",
              "type": "string"
            },
            {
              "name": "city",
              "type": "string"
            },
            {
              "name": "region",
              "type": "string"
            },
            {
              "name": "postalCode",
              "type": "string"
            },
            {
              "name": "country",
              "type": "string"
            },
            {
              "name": "id",
              "type": "string"
            },
            {
              "name": "orders",
              "type": "Orders",
              "children": [
                {
                  "name": "customerId",
                  "type": "string"
                },
                {
                  "name": "employeeId",
                  "type": "integer"
                },
                {
                  "name": "orderDate",
                  "type": "any"
                },
                {
                  "name": "requiredDate",
                  "type": "date"
                },
                {
                  "name": "shippedDate",
                  "type": "date"
                },
                {
                  "name": "shipViaId",
                  "type": "integer"
                },
                {
                  "name": "freight",
                  "type": "decimal"
                },
                {
                  "name": "name",
                  "type": "string"
                },
                {
                  "name": "address",
                  "type": "string"
                },
                {
                  "name": "city",
                  "type": "string"
                },
                {
                  "name": "region",
                  "type": "string"
                },
                {
                  "name": "postalCode",
                  "type": "string"
                },
                {
                  "name": "country",
                  "type": "string"
                },
                {
                  "name": "id",
                  "type": "integer"
                },
                {
                  "name": "details",
                  "type": "Orders.details",
                  "children": [
                    {
                      "name": "orderId",
                      "type": "integer"
                    },
                    {
                      "name": "productId",
                      "type": "integer"
                    },
                    {
                      "name": "unitPrice",
                      "type": "decimal"
                    },
                    {
                      "name": "quantity",
                      "type": "decimal"
                    },
                    {
                      "name": "discount",
                      "type": "decimal"
                    },
                    {
                      "name": "orderId",
                      "type": "integer"
                    },
                    {
                      "name": "productId",
                      "type": "integer"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "constraints",
      "tests": [
        {
          "test": "Categories.update()",
          "result": {
            "entity": "Categories",
            "constraints": [
              {
                "message": "Cannot be null property name in entity Categories",
                "condition": "isNotNull(name)"
              }
            ]
          }
        },
        {
          "test": "Categories.update(entity)",
          "result": {
            "entity": "Categories",
            "constraints": []
          }
        },
        {
          "test": "Categories.update(p => entity)",
          "result": {
            "entity": "Categories",
            "constraints": []
          }
        },
        {
          "test": "Categories.update(p => p)",
          "result": {
            "entity": "Categories",
            "constraints": [
              {
                "message": "Cannot be null property name in entity Categories",
                "condition": "isNotNull(name)"
              }
            ]
          }
        },
        {
          "test": "Categories.update(p => { name: entity.name })",
          "result": {
            "entity": "Categories",
            "constraints": []
          }
        },
        {
          "test": "Categories.update(p => { name: upper(p.name) })",
          "result": {
            "entity": "Categories",
            "constraints": []
          }
        },
        {
          "test": "Categories.update(p => { name: concat(\"_\" + p.name) })",
          "result": {
            "entity": "Categories",
            "constraints": []
          }
        },
        {
          "test": "Categories.update(() => [name] )",
          "result": {
            "entity": "Categories",
            "constraints": [
              {
                "message": "Cannot be null property name in entity Categories",
                "condition": "isNotNull(name)"
              }
            ]
          }
        },
        {
          "test": "Categories.update({ name: entity.name })",
          "result": {
            "entity": "Categories",
            "constraints": []
          }
        },
        {
          "test": "Categories.update([name, description])",
          "result": {
            "entity": "Categories",
            "constraints": [
              {
                "message": "Cannot be null property name in entity Categories",
                "condition": "isNotNull(name)"
              }
            ]
          }
        },
        {
          "test": "Categories.update(p=>[name, description])",
          "result": {
            "entity": "Categories",
            "constraints": [
              {
                "message": "Cannot be null property name in entity Categories",
                "condition": "isNotNull(name)"
              }
            ]
          }
        },
        {
          "test": "Categories.update(p=>{name:name,description:description})",
          "result": {
            "entity": "Categories",
            "constraints": [
              {
                "message": "Cannot be null property name in entity Categories",
                "condition": "isNotNull(name)"
              }
            ]
          }
        },
        {
          "test": "Categories.update(p=>{name:upper(p.name),description:description})",
          "result": {
            "entity": "Categories",
            "constraints": []
          }
        },
        {
          "test": "Categories.updateAll(p => { name: upper(p.name) })",
          "result": {
            "entity": "Categories",
            "constraints": []
          }
        },
        {
          "test": "Categories.updateAll(p => { name: concat(\"_\",p.name) })",
          "result": {
            "entity": "Categories",
            "constraints": []
          }
        },
        {
          "test": "Categories.updateAll(() => [name])",
          "result": {
            "entity": "Categories",
            "constraints": [
              {
                "message": "Cannot be null property name in entity Categories",
                "condition": "isNotNull(name)"
              }
            ]
          }
        },
        {
          "test": "Orders.update({ name: entity.name }).filter(p => p.id === entity.id)",
          "result": {
            "entity": "Orders",
            "constraints": []
          }
        },
        {
          "test": "Orders.update({ name: entity.name }).include(p => p.details.update(p => p)).filter(p => p.id === entity.id)",
          "result": {
            "entity": "Orders",
            "constraints": [],
            "children": [
              {
                "entity": "Orders.details",
                "constraints": [
                  {
                    "message": "Cannot be null property orderId in entity Orders.details",
                    "condition": "isNotNull(orderId)"
                  },
                  {
                    "message": "Cannot be null property productId in entity Orders.details",
                    "condition": "isNotNull(productId)"
                  }
                ]
              }
            ]
          }
        },
        {
          "test": "Orders.update({ name: entity.name }).include(p => p.details.update(p => ({ unitPrice: p.unitPrice, productId: p.productId }))).filter(p => p.id === entity.id)",
          "result": {
            "entity": "Orders",
            "constraints": [],
            "children": [
              {
                "entity": "Orders.details",
                "constraints": [
                  {
                    "message": "Cannot be null property orderId in entity Orders.details",
                    "condition": "isNotNull(orderId)"
                  },
                  {
                    "message": "Cannot be null property productId in entity Orders.details",
                    "condition": "isNotNull(productId)"
                  }
                ]
              }
            ]
          }
        },
        {
          "test": "Orders.update(p => ({ name: entity.name })).filter(p => p.id === entity.id)",
          "result": {
            "entity": "Orders",
            "constraints": []
          }
        },
        {
          "test": "Orders.update(() => ({ name: entity.name })).include(p => p.details).filter(p => p.id === entity.id)",
          "result": {
            "entity": "Orders",
            "constraints": [],
            "children": [
              {
                "entity": "Orders.details",
                "constraints": [
                  {
                    "message": "Cannot be null property orderId in entity Orders.details",
                    "condition": "isNotNull(orderId)"
                  },
                  {
                    "message": "Cannot be null property productId in entity Orders.details",
                    "condition": "isNotNull(productId)"
                  },
                  {
                    "message": "Cannot be null property orderId in entity Orders.details",
                    "condition": "isNotNull(orderId)"
                  },
                  {
                    "message": "Cannot be null property productId in entity Orders.details",
                    "condition": "isNotNull(productId)"
                  }
                ]
              }
            ]
          }
        },
        {
          "test": "Orders.update(() => ({ name: entity.name })).include(p => p.details.update(p => p)).filter(p => p.id === entity.id)",
          "result": {
            "entity": "Orders",
            "constraints": [],
            "children": [
              {
                "entity": "Orders.details",
                "constraints": [
                  {
                    "message": "Cannot be null property orderId in entity Orders.details",
                    "condition": "isNotNull(orderId)"
                  },
                  {
                    "message": "Cannot be null property productId in entity Orders.details",
                    "condition": "isNotNull(productId)"
                  }
                ]
              }
            ]
          }
        },
        {
          "test": "Orders.update(() => ({ name: entity.name })).include(p => p.details.update(p => ({ unitPrice: p.unitPrice, productId: p.productId }))).filter(p => p.id === entity.id)",
          "result": {
            "entity": "Orders",
            "constraints": [],
            "children": [
              {
                "entity": "Orders.details",
                "constraints": [
                  {
                    "message": "Cannot be null property orderId in entity Orders.details",
                    "condition": "isNotNull(orderId)"
                  },
                  {
                    "message": "Cannot be null property productId in entity Orders.details",
                    "condition": "isNotNull(productId)"
                  }
                ]
              }
            ]
          }
        },
        {
          "test": "Orders.update().include(p => p.details)",
          "result": {
            "entity": "Orders",
            "constraints": [
              {
                "message": "Cannot be null property customerId in entity Orders",
                "condition": "isNotNull(customerId)"
              },
              {
                "message": "Cannot be null property employeeId in entity Orders",
                "condition": "isNotNull(employeeId)"
              }
            ],
            "children": [
              {
                "entity": "Orders.details",
                "constraints": [
                  {
                    "message": "Cannot be null property orderId in entity Orders.details",
                    "condition": "isNotNull(orderId)"
                  },
                  {
                    "message": "Cannot be null property productId in entity Orders.details",
                    "condition": "isNotNull(productId)"
                  },
                  {
                    "message": "Cannot be null property orderId in entity Orders.details",
                    "condition": "isNotNull(orderId)"
                  },
                  {
                    "message": "Cannot be null property productId in entity Orders.details",
                    "condition": "isNotNull(productId)"
                  }
                ]
              }
            ]
          }
        },
        {
          "test": "Customers.update().include(p => p.orders.include(p => p.details))",
          "result": {
            "entity": "Customers",
            "constraints": [
              {
                "message": "Cannot be null property id in entity Customers",
                "condition": "isNotNull(id)"
              },
              {
                "message": "Cannot be null property name in entity Customers",
                "condition": "isNotNull(name)"
              },
              {
                "message": "Cannot be null property id in entity Customers",
                "condition": "isNotNull(id)"
              }
            ],
            "children": [
              {
                "entity": "Orders",
                "constraints": [
                  {
                    "message": "Cannot be null property customerId in entity Orders",
                    "condition": "isNotNull(customerId)"
                  },
                  {
                    "message": "Cannot be null property employeeId in entity Orders",
                    "condition": "isNotNull(employeeId)"
                  }
                ],
                "children": [
                  {
                    "entity": "Orders.details",
                    "constraints": [
                      {
                        "message": "Cannot be null property orderId in entity Orders.details",
                        "condition": "isNotNull(orderId)"
                      },
                      {
                        "message": "Cannot be null property productId in entity Orders.details",
                        "condition": "isNotNull(productId)"
                      },
                      {
                        "message": "Cannot be null property orderId in entity Orders.details",
                        "condition": "isNotNull(orderId)"
                      },
                      {
                        "message": "Cannot be null property productId in entity Orders.details",
                        "condition": "isNotNull(productId)"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "name": "metadata",
      "tests": [
        {
          "test": "Categories.update()",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 18
            },
            "name": "update",
            "children": [],
            "type": "any",
            "entity": "Categories",
            "columns": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "description",
                "type": "string"
              }
            ],
            "parameters": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "description",
                "type": "string"
              },
              {
                "name": "id",
                "type": "integer"
              }
            ],
            "constraints": [
              {
                "message": "Cannot be null property name in entity Categories",
                "condition": "isNotNull(name)"
              }
            ],
            "values": [],
            "defaults": [],
            "clause": "update",
            "alias": "c"
          }
        },
        {
          "test": "Categories.update(entity)",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 18
            },
            "name": "update",
            "children": [],
            "type": "any",
            "entity": "Categories",
            "columns": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "description",
                "type": "string"
              }
            ],
            "parameters": [
              {
                "name": "entity.name",
                "type": "string"
              },
              {
                "name": "entity.description",
                "type": "string"
              },
              {
                "name": "entity.id",
                "type": "integer"
              }
            ],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "update",
            "alias": "c"
          }
        },
        {
          "test": "Categories.update(p => entity)",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 18
            },
            "name": "update",
            "children": [],
            "type": "any",
            "entity": "Categories",
            "columns": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "description",
                "type": "string"
              }
            ],
            "parameters": [
              {
                "name": "entity.name",
                "type": "string"
              },
              {
                "name": "entity.description",
                "type": "string"
              },
              {
                "name": "id",
                "type": "integer"
              }
            ],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "update",
            "alias": "c"
          }
        },
        {
          "test": "Categories.update(p => p)",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 18
            },
            "name": "update",
            "children": [],
            "type": "any",
            "entity": "Categories",
            "columns": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "description",
                "type": "string"
              }
            ],
            "parameters": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "description",
                "type": "string"
              },
              {
                "name": "id",
                "type": "integer"
              }
            ],
            "constraints": [
              {
                "message": "Cannot be null property name in entity Categories",
                "condition": "isNotNull(name)"
              }
            ],
            "values": [],
            "defaults": [],
            "clause": "update",
            "alias": "c"
          }
        },
        {
          "test": "Categories.update(p => { name: entity.name })",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 18
            },
            "name": "update",
            "children": [],
            "type": "any",
            "entity": "Categories",
            "columns": [
              {
                "name": "name",
                "type": "string"
              }
            ],
            "parameters": [
              {
                "name": "entity.name",
                "type": "any"
              },
              {
                "name": "id",
                "type": "integer"
              }
            ],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "update",
            "alias": "c"
          }
        },
        {
          "test": "Categories.update(p => { name: upper(p.name) })",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 18
            },
            "name": "update",
            "children": [],
            "type": "any",
            "entity": "Categories",
            "columns": [
              {
                "name": "name",
                "type": "string"
              }
            ],
            "parameters": [
              {
                "name": "id",
                "type": "integer"
              }
            ],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "update",
            "alias": "c"
          }
        },
        {
          "test": "Categories.update(p => { name: concat(\"_\" + p.name) })",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 18
            },
            "name": "update",
            "children": [],
            "type": "any",
            "entity": "Categories",
            "columns": [
              {
                "name": "name",
                "type": "string"
              }
            ],
            "parameters": [
              {
                "name": "id",
                "type": "integer"
              }
            ],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "update",
            "alias": "c"
          }
        },
        {
          "test": "Categories.update(() => [name] )",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 18
            },
            "name": "update",
            "children": [],
            "type": "any",
            "entity": "Categories",
            "columns": [
              {
                "name": "name",
                "type": "string"
              }
            ],
            "parameters": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "id",
                "type": "integer"
              }
            ],
            "constraints": [
              {
                "message": "Cannot be null property name in entity Categories",
                "condition": "isNotNull(name)"
              }
            ],
            "values": [],
            "defaults": [],
            "clause": "update",
            "alias": "c"
          }
        },
        {
          "test": "Categories.update({ name: entity.name })",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 18
            },
            "name": "update",
            "children": [],
            "type": "any",
            "entity": "Categories",
            "columns": [
              {
                "name": "name",
                "type": "string"
              }
            ],
            "parameters": [
              {
                "name": "entity.name",
                "type": "any"
              },
              {
                "name": "id",
                "type": "integer"
              }
            ],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "update",
            "alias": "c"
          }
        },
        {
          "test": "Categories.update([name, description])",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 18
            },
            "name": "update",
            "children": [],
            "type": "any",
            "entity": "Categories",
            "columns": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "description",
                "type": "string"
              }
            ],
            "parameters": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "description",
                "type": "string"
              }
            ],
            "constraints": [
              {
                "message": "Cannot be null property name in entity Categories",
                "condition": "isNotNull(name)"
              }
            ],
            "values": [],
            "defaults": [],
            "clause": "update",
            "alias": "c"
          }
        },
        {
          "test": "Categories.update(p=>[name, description])",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 18
            },
            "name": "update",
            "children": [],
            "type": "any",
            "entity": "Categories",
            "columns": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "description",
                "type": "string"
              }
            ],
            "parameters": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "description",
                "type": "string"
              },
              {
                "name": "id",
                "type": "integer"
              }
            ],
            "constraints": [
              {
                "message": "Cannot be null property name in entity Categories",
                "condition": "isNotNull(name)"
              }
            ],
            "values": [],
            "defaults": [],
            "clause": "update",
            "alias": "c"
          }
        },
        {
          "test": "Categories.update(p=>{name:name,description:description})",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 18
            },
            "name": "update",
            "children": [],
            "type": "any",
            "entity": "Categories",
            "columns": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "description",
                "type": "string"
              }
            ],
            "parameters": [
              {
                "name": "name",
                "type": "any"
              },
              {
                "name": "description",
                "type": "any"
              },
              {
                "name": "id",
                "type": "integer"
              }
            ],
            "constraints": [
              {
                "message": "Cannot be null property name in entity Categories",
                "condition": "isNotNull(name)"
              }
            ],
            "values": [],
            "defaults": [],
            "clause": "update",
            "alias": "c"
          }
        },
        {
          "test": "Categories.update(p=>{name:upper(p.name),description:description})",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 18
            },
            "name": "update",
            "children": [],
            "type": "any",
            "entity": "Categories",
            "columns": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "description",
                "type": "string"
              }
            ],
            "parameters": [
              {
                "name": "description",
                "type": "any"
              },
              {
                "name": "id",
                "type": "integer"
              }
            ],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "update",
            "alias": "c"
          }
        },
        {
          "test": "Categories.updateAll(p => { name: upper(p.name) })",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 21
            },
            "name": "update",
            "children": [],
            "type": "any",
            "entity": "Categories",
            "columns": [
              {
                "name": "name",
                "type": "string"
              }
            ],
            "parameters": [],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "update",
            "alias": "c"
          }
        },
        {
          "test": "Categories.updateAll(p => { name: concat(\"_\",p.name) })",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 21
            },
            "name": "update",
            "children": [],
            "type": "any",
            "entity": "Categories",
            "columns": [
              {
                "name": "name",
                "type": "string"
              }
            ],
            "parameters": [],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "update",
            "alias": "c"
          }
        },
        {
          "test": "Categories.updateAll(() => [name])",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 21
            },
            "name": "update",
            "children": [],
            "type": "any",
            "entity": "Categories",
            "columns": [
              {
                "name": "name",
                "type": "string"
              }
            ],
            "parameters": [
              {
                "name": "name",
                "type": "string"
              }
            ],
            "constraints": [
              {
                "message": "Cannot be null property name in entity Categories",
                "condition": "isNotNull(name)"
              }
            ],
            "values": [],
            "defaults": [],
            "clause": "update",
            "alias": "c"
          }
        },
        {
          "test": "Orders.update({ name: entity.name }).filter(p => p.id === entity.id)",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 44
            },
            "name": "update",
            "children": [],
            "type": "any",
            "entity": "Orders",
            "columns": [
              {
                "name": "name",
                "type": "string"
              }
            ],
            "parameters": [
              {
                "name": "entity.name",
                "type": "any"
              },
              {
                "name": "entity.id",
                "type": "integer"
              }
            ],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "update",
            "alias": "o"
          }
        },
        {
          "test": "Orders.update({ name: entity.name }).include(p => p.details.update(p => p)).filter(p => p.id === entity.id)",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 83
            },
            "name": "update",
            "children": [
              {
                "classtype": "Sentence",
                "pos": {
                  "ln": 0,
                  "col": 67
                },
                "name": "update",
                "children": [],
                "type": "any",
                "entity": "Orders.details",
                "columns": [
                  {
                    "name": "unitPrice",
                    "type": "decimal"
                  },
                  {
                    "name": "quantity",
                    "type": "decimal"
                  },
                  {
                    "name": "discount",
                    "type": "decimal"
                  }
                ],
                "parameters": [
                  {
                    "name": "unitPrice",
                    "type": "decimal"
                  },
                  {
                    "name": "quantity",
                    "type": "decimal"
                  },
                  {
                    "name": "discount",
                    "type": "decimal"
                  },
                  {
                    "name": "orderId",
                    "type": "integer"
                  },
                  {
                    "name": "productId",
                    "type": "integer"
                  }
                ],
                "constraints": [
                  {
                    "message": "Cannot be null property orderId in entity Orders.details",
                    "condition": "isNotNull(orderId)"
                  },
                  {
                    "message": "Cannot be null property productId in entity Orders.details",
                    "condition": "isNotNull(productId)"
                  }
                ],
                "values": [],
                "defaults": [],
                "clause": "update",
                "alias": "o1"
              }
            ],
            "type": "any",
            "entity": "Orders",
            "columns": [
              {
                "name": "name",
                "type": "string"
              }
            ],
            "parameters": [
              {
                "name": "entity.name",
                "type": "any"
              },
              {
                "name": "entity.id",
                "type": "integer"
              }
            ],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "update",
            "alias": "o"
          }
        },
        {
          "test": "Orders.update({ name: entity.name }).include(p => p.details.update(p => ({ unitPrice: p.unitPrice, productId: p.productId }))).filter(p => p.id === entity.id)",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 134
            },
            "name": "update",
            "children": [
              {
                "classtype": "Sentence",
                "pos": {
                  "ln": 0,
                  "col": 67
                },
                "name": "update",
                "children": [],
                "type": "any",
                "entity": "Orders.details",
                "columns": [
                  {
                    "name": "unitPrice",
                    "type": "decimal"
                  },
                  {
                    "name": "productId",
                    "type": "integer"
                  }
                ],
                "parameters": [
                  {
                    "name": "orderId",
                    "type": "integer"
                  },
                  {
                    "name": "productId",
                    "type": "integer"
                  }
                ],
                "constraints": [
                  {
                    "message": "Cannot be null property orderId in entity Orders.details",
                    "condition": "isNotNull(orderId)"
                  },
                  {
                    "message": "Cannot be null property productId in entity Orders.details",
                    "condition": "isNotNull(productId)"
                  }
                ],
                "values": [],
                "defaults": [],
                "clause": "update",
                "alias": "o1"
              }
            ],
            "type": "any",
            "entity": "Orders",
            "columns": [
              {
                "name": "name",
                "type": "string"
              }
            ],
            "parameters": [
              {
                "name": "entity.name",
                "type": "any"
              },
              {
                "name": "entity.id",
                "type": "integer"
              }
            ],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "update",
            "alias": "o"
          }
        },
        {
          "test": "Orders.update(p => ({ name: entity.name })).filter(p => p.id === entity.id)",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 51
            },
            "name": "update",
            "children": [],
            "type": "any",
            "entity": "Orders",
            "columns": [
              {
                "name": "name",
                "type": "string"
              }
            ],
            "parameters": [
              {
                "name": "entity.name",
                "type": "any"
              },
              {
                "name": "entity.id",
                "type": "integer"
              }
            ],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "update",
            "alias": "o"
          }
        },
        {
          "test": "Orders.update(() => ({ name: entity.name })).include(p => p.details).filter(p => p.id === entity.id)",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 76
            },
            "name": "update",
            "children": [
              {
                "classtype": "Sentence",
                "pos": {
                  "ln": 0,
                  "col": 58
                },
                "name": "update",
                "children": [],
                "type": "any",
                "entity": "Orders.details",
                "columns": [
                  {
                    "name": "orderId",
                    "type": "integer"
                  },
                  {
                    "name": "productId",
                    "type": "integer"
                  },
                  {
                    "name": "unitPrice",
                    "type": "decimal"
                  },
                  {
                    "name": "quantity",
                    "type": "decimal"
                  },
                  {
                    "name": "discount",
                    "type": "decimal"
                  }
                ],
                "parameters": [
                  {
                    "name": "orderId",
                    "type": "integer"
                  },
                  {
                    "name": "productId",
                    "type": "integer"
                  },
                  {
                    "name": "unitPrice",
                    "type": "decimal"
                  },
                  {
                    "name": "quantity",
                    "type": "decimal"
                  },
                  {
                    "name": "discount",
                    "type": "decimal"
                  },
                  {
                    "name": "orderId",
                    "type": "integer"
                  },
                  {
                    "name": "productId",
                    "type": "integer"
                  }
                ],
                "constraints": [
                  {
                    "message": "Cannot be null property orderId in entity Orders.details",
                    "condition": "isNotNull(orderId)"
                  },
                  {
                    "message": "Cannot be null property productId in entity Orders.details",
                    "condition": "isNotNull(productId)"
                  },
                  {
                    "message": "Cannot be null property orderId in entity Orders.details",
                    "condition": "isNotNull(orderId)"
                  },
                  {
                    "message": "Cannot be null property productId in entity Orders.details",
                    "condition": "isNotNull(productId)"
                  }
                ],
                "values": [],
                "defaults": [],
                "clause": "update",
                "alias": "o1"
              }
            ],
            "type": "any",
            "entity": "Orders",
            "columns": [
              {
                "name": "name",
                "type": "string"
              }
            ],
            "parameters": [
              {
                "name": "entity.name",
                "type": "any"
              },
              {
                "name": "entity.id",
                "type": "integer"
              }
            ],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "update",
            "alias": "o"
          }
        },
        {
          "test": "Orders.update(() => ({ name: entity.name })).include(p => p.details.update(p => p)).filter(p => p.id === entity.id)",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 91
            },
            "name": "update",
            "children": [
              {
                "classtype": "Sentence",
                "pos": {
                  "ln": 0,
                  "col": 75
                },
                "name": "update",
                "children": [],
                "type": "any",
                "entity": "Orders.details",
                "columns": [
                  {
                    "name": "unitPrice",
                    "type": "decimal"
                  },
                  {
                    "name": "quantity",
                    "type": "decimal"
                  },
                  {
                    "name": "discount",
                    "type": "decimal"
                  }
                ],
                "parameters": [
                  {
                    "name": "unitPrice",
                    "type": "decimal"
                  },
                  {
                    "name": "quantity",
                    "type": "decimal"
                  },
                  {
                    "name": "discount",
                    "type": "decimal"
                  },
                  {
                    "name": "orderId",
                    "type": "integer"
                  },
                  {
                    "name": "productId",
                    "type": "integer"
                  }
                ],
                "constraints": [
                  {
                    "message": "Cannot be null property orderId in entity Orders.details",
                    "condition": "isNotNull(orderId)"
                  },
                  {
                    "message": "Cannot be null property productId in entity Orders.details",
                    "condition": "isNotNull(productId)"
                  }
                ],
                "values": [],
                "defaults": [],
                "clause": "update",
                "alias": "o1"
              }
            ],
            "type": "any",
            "entity": "Orders",
            "columns": [
              {
                "name": "name",
                "type": "string"
              }
            ],
            "parameters": [
              {
                "name": "entity.name",
                "type": "any"
              },
              {
                "name": "entity.id",
                "type": "integer"
              }
            ],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "update",
            "alias": "o"
          }
        },
        {
          "test": "Orders.update(() => ({ name: entity.name })).include(p => p.details.update(p => ({ unitPrice: p.unitPrice, productId: p.productId }))).filter(p => p.id === entity.id)",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 142
            },
            "name": "update",
            "children": [
              {
                "classtype": "Sentence",
                "pos": {
                  "ln": 0,
                  "col": 75
                },
                "name": "update",
                "children": [],
                "type": "any",
                "entity": "Orders.details",
                "columns": [
                  {
                    "name": "unitPrice",
                    "type": "decimal"
                  },
                  {
                    "name": "productId",
                    "type": "integer"
                  }
                ],
                "parameters": [
                  {
                    "name": "orderId",
                    "type": "integer"
                  },
                  {
                    "name": "productId",
                    "type": "integer"
                  }
                ],
                "constraints": [
                  {
                    "message": "Cannot be null property orderId in entity Orders.details",
                    "condition": "isNotNull(orderId)"
                  },
                  {
                    "message": "Cannot be null property productId in entity Orders.details",
                    "condition": "isNotNull(productId)"
                  }
                ],
                "values": [],
                "defaults": [],
                "clause": "update",
                "alias": "o1"
              }
            ],
            "type": "any",
            "entity": "Orders",
            "columns": [
              {
                "name": "name",
                "type": "string"
              }
            ],
            "parameters": [
              {
                "name": "entity.name",
                "type": "any"
              },
              {
                "name": "entity.id",
                "type": "integer"
              }
            ],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "update",
            "alias": "o"
          }
        },
        {
          "test": "Orders.update().include(p => p.details)",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 24
            },
            "name": "update",
            "children": [
              {
                "classtype": "Sentence",
                "pos": {
                  "ln": 0,
                  "col": 29
                },
                "name": "update",
                "children": [],
                "type": "any",
                "entity": "Orders.details",
                "columns": [
                  {
                    "name": "orderId",
                    "type": "integer"
                  },
                  {
                    "name": "productId",
                    "type": "integer"
                  },
                  {
                    "name": "unitPrice",
                    "type": "decimal"
                  },
                  {
                    "name": "quantity",
                    "type": "decimal"
                  },
                  {
                    "name": "discount",
                    "type": "decimal"
                  }
                ],
                "parameters": [
                  {
                    "name": "orderId",
                    "type": "integer"
                  },
                  {
                    "name": "productId",
                    "type": "integer"
                  },
                  {
                    "name": "unitPrice",
                    "type": "decimal"
                  },
                  {
                    "name": "quantity",
                    "type": "decimal"
                  },
                  {
                    "name": "discount",
                    "type": "decimal"
                  },
                  {
                    "name": "orderId",
                    "type": "integer"
                  },
                  {
                    "name": "productId",
                    "type": "integer"
                  }
                ],
                "constraints": [
                  {
                    "message": "Cannot be null property orderId in entity Orders.details",
                    "condition": "isNotNull(orderId)"
                  },
                  {
                    "message": "Cannot be null property productId in entity Orders.details",
                    "condition": "isNotNull(productId)"
                  },
                  {
                    "message": "Cannot be null property orderId in entity Orders.details",
                    "condition": "isNotNull(orderId)"
                  },
                  {
                    "message": "Cannot be null property productId in entity Orders.details",
                    "condition": "isNotNull(productId)"
                  }
                ],
                "values": [],
                "defaults": [],
                "clause": "update",
                "alias": "o1"
              }
            ],
            "type": "any",
            "entity": "Orders",
            "columns": [
              {
                "name": "customerId",
                "type": "string"
              },
              {
                "name": "employeeId",
                "type": "integer"
              },
              {
                "name": "orderDate",
                "type": "datetime"
              },
              {
                "name": "requiredDate",
                "type": "date"
              },
              {
                "name": "shippedDate",
                "type": "date"
              },
              {
                "name": "shipViaId",
                "type": "integer"
              },
              {
                "name": "freight",
                "type": "decimal"
              },
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "address",
                "type": "string"
              },
              {
                "name": "city",
                "type": "string"
              },
              {
                "name": "region",
                "type": "string"
              },
              {
                "name": "postalCode",
                "type": "string"
              },
              {
                "name": "country",
                "type": "string"
              }
            ],
            "parameters": [
              {
                "name": "customerId",
                "type": "string"
              },
              {
                "name": "employeeId",
                "type": "integer"
              },
              {
                "name": "orderDate",
                "type": "any"
              },
              {
                "name": "requiredDate",
                "type": "date"
              },
              {
                "name": "shippedDate",
                "type": "date"
              },
              {
                "name": "shipViaId",
                "type": "integer"
              },
              {
                "name": "freight",
                "type": "decimal"
              },
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "address",
                "type": "string"
              },
              {
                "name": "city",
                "type": "string"
              },
              {
                "name": "region",
                "type": "string"
              },
              {
                "name": "postalCode",
                "type": "string"
              },
              {
                "name": "country",
                "type": "string"
              },
              {
                "name": "id",
                "type": "integer"
              }
            ],
            "constraints": [
              {
                "message": "Cannot be null property customerId in entity Orders",
                "condition": "isNotNull(customerId)"
              },
              {
                "message": "Cannot be null property employeeId in entity Orders",
                "condition": "isNotNull(employeeId)"
              }
            ],
            "values": [],
            "defaults": [],
            "clause": "update",
            "alias": "o"
          }
        },
        {
          "test": "Customers.update().include(p => p.orders.include(p => p.details))",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 27
            },
            "name": "update",
            "children": [
              {
                "classtype": "Sentence",
                "pos": {
                  "ln": 0,
                  "col": 49
                },
                "name": "update",
                "children": [
                  {
                    "classtype": "Sentence",
                    "pos": {
                      "ln": 0,
                      "col": 54
                    },
                    "name": "update",
                    "children": [],
                    "type": "any",
                    "entity": "Orders.details",
                    "columns": [
                      {
                        "name": "orderId",
                        "type": "integer"
                      },
                      {
                        "name": "productId",
                        "type": "integer"
                      },
                      {
                        "name": "unitPrice",
                        "type": "decimal"
                      },
                      {
                        "name": "quantity",
                        "type": "decimal"
                      },
                      {
                        "name": "discount",
                        "type": "decimal"
                      }
                    ],
                    "parameters": [
                      {
                        "name": "orderId",
                        "type": "integer"
                      },
                      {
                        "name": "productId",
                        "type": "integer"
                      },
                      {
                        "name": "unitPrice",
                        "type": "decimal"
                      },
                      {
                        "name": "quantity",
                        "type": "decimal"
                      },
                      {
                        "name": "discount",
                        "type": "decimal"
                      },
                      {
                        "name": "orderId",
                        "type": "integer"
                      },
                      {
                        "name": "productId",
                        "type": "integer"
                      }
                    ],
                    "constraints": [
                      {
                        "message": "Cannot be null property orderId in entity Orders.details",
                        "condition": "isNotNull(orderId)"
                      },
                      {
                        "message": "Cannot be null property productId in entity Orders.details",
                        "condition": "isNotNull(productId)"
                      },
                      {
                        "message": "Cannot be null property orderId in entity Orders.details",
                        "condition": "isNotNull(orderId)"
                      },
                      {
                        "message": "Cannot be null property productId in entity Orders.details",
                        "condition": "isNotNull(productId)"
                      }
                    ],
                    "values": [],
                    "defaults": [],
                    "clause": "update",
                    "alias": "o1"
                  }
                ],
                "type": "any",
                "entity": "Orders",
                "columns": [
                  {
                    "name": "customerId",
                    "type": "string"
                  },
                  {
                    "name": "employeeId",
                    "type": "integer"
                  },
                  {
                    "name": "orderDate",
                    "type": "datetime"
                  },
                  {
                    "name": "requiredDate",
                    "type": "date"
                  },
                  {
                    "name": "shippedDate",
                    "type": "date"
                  },
                  {
                    "name": "shipViaId",
                    "type": "integer"
                  },
                  {
                    "name": "freight",
                    "type": "decimal"
                  },
                  {
                    "name": "name",
                    "type": "string"
                  },
                  {
                    "name": "address",
                    "type": "string"
                  },
                  {
                    "name": "city",
                    "type": "string"
                  },
                  {
                    "name": "region",
                    "type": "string"
                  },
                  {
                    "name": "postalCode",
                    "type": "string"
                  },
                  {
                    "name": "country",
                    "type": "string"
                  }
                ],
                "parameters": [
                  {
                    "name": "customerId",
                    "type": "string"
                  },
                  {
                    "name": "employeeId",
                    "type": "integer"
                  },
                  {
                    "name": "orderDate",
                    "type": "any"
                  },
                  {
                    "name": "requiredDate",
                    "type": "date"
                  },
                  {
                    "name": "shippedDate",
                    "type": "date"
                  },
                  {
                    "name": "shipViaId",
                    "type": "integer"
                  },
                  {
                    "name": "freight",
                    "type": "decimal"
                  },
                  {
                    "name": "name",
                    "type": "string"
                  },
                  {
                    "name": "address",
                    "type": "string"
                  },
                  {
                    "name": "city",
                    "type": "string"
                  },
                  {
                    "name": "region",
                    "type": "string"
                  },
                  {
                    "name": "postalCode",
                    "type": "string"
                  },
                  {
                    "name": "country",
                    "type": "string"
                  },
                  {
                    "name": "id",
                    "type": "integer"
                  }
                ],
                "constraints": [
                  {
                    "message": "Cannot be null property customerId in entity Orders",
                    "condition": "isNotNull(customerId)"
                  },
                  {
                    "message": "Cannot be null property employeeId in entity Orders",
                    "condition": "isNotNull(employeeId)"
                  }
                ],
                "values": [],
                "defaults": [],
                "clause": "update",
                "alias": "o"
              }
            ],
            "type": "any",
            "entity": "Customers",
            "columns": [
              {
                "name": "id",
                "type": "string"
              },
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "contact",
                "type": "string"
              },
              {
                "name": "phone",
                "type": "string"
              },
              {
                "name": "address",
                "type": "string"
              },
              {
                "name": "city",
                "type": "string"
              },
              {
                "name": "region",
                "type": "string"
              },
              {
                "name": "postalCode",
                "type": "string"
              },
              {
                "name": "country",
                "type": "string"
              }
            ],
            "parameters": [
              {
                "name": "id",
                "type": "string"
              },
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "contact",
                "type": "string"
              },
              {
                "name": "phone",
                "type": "string"
              },
              {
                "name": "address",
                "type": "string"
              },
              {
                "name": "city",
                "type": "string"
              },
              {
                "name": "region",
                "type": "string"
              },
              {
                "name": "postalCode",
                "type": "string"
              },
              {
                "name": "country",
                "type": "string"
              },
              {
                "name": "id",
                "type": "string"
              }
            ],
            "constraints": [
              {
                "message": "Cannot be null property id in entity Customers",
                "condition": "isNotNull(id)"
              },
              {
                "message": "Cannot be null property name in entity Customers",
                "condition": "isNotNull(name)"
              },
              {
                "message": "Cannot be null property id in entity Customers",
                "condition": "isNotNull(id)"
              }
            ],
            "values": [],
            "defaults": [],
            "clause": "update",
            "alias": "c"
          }
        }
      ]
    },
    {
      "name": "getInfo",
      "tests": [
        {
          "test": "Categories.update()",
          "result": {
            "entity": "Categories",
            "dialect": "MySQL",
            "source": "MySQL",
            "sentence": "UPDATE Categories  SET CategoryName = ?,Description = ? WHERE c.CategoryID = ? ",
            "children": []
          }
        },
        {
          "test": "Categories.update(entity)",
          "result": {
            "entity": "Categories",
            "dialect": "MySQL",
            "source": "MySQL",
            "sentence": "UPDATE Categories  SET CategoryName = ?,Description = ? WHERE c.CategoryID = ? ",
            "children": []
          }
        },
        {
          "test": "Categories.update(p => entity)",
          "result": {
            "entity": "Categories",
            "dialect": "MySQL",
            "source": "MySQL",
            "sentence": "UPDATE Categories  SET CategoryName = ?,Description = ? WHERE c.CategoryID = ? ",
            "children": []
          }
        },
        {
          "test": "Categories.update(p => p)",
          "result": {
            "entity": "Categories",
            "dialect": "MySQL",
            "source": "MySQL",
            "sentence": "UPDATE Categories  SET CategoryName = ?,Description = ? WHERE c.CategoryID = ? ",
            "children": []
          }
        },
        {
          "test": "Categories.update(p => { name: entity.name })",
          "result": {
            "entity": "Categories",
            "dialect": "MySQL",
            "source": "MySQL",
            "sentence": "UPDATE Categories  SET CategoryName = ? WHERE c.CategoryID = ? ",
            "children": []
          }
        },
        {
          "test": "Categories.update(p => { name: upper(p.name) })",
          "result": {
            "entity": "Categories",
            "dialect": "MySQL",
            "source": "MySQL",
            "sentence": "UPDATE Categories  SET CategoryName = UPPER(c.CategoryName) WHERE c.CategoryID = ? ",
            "children": []
          }
        },
        {
          "test": "Categories.update(p => { name: concat(\"_\" + p.name) })",
          "result": {
            "entity": "Categories",
            "dialect": "MySQL",
            "source": "MySQL",
            "sentence": "UPDATE Categories  SET CategoryName = ('_' + c.CategoryName) WHERE c.CategoryID = ? ",
            "children": []
          }
        },
        {
          "test": "Categories.update(() => [name] )",
          "result": {
            "entity": "Categories",
            "dialect": "MySQL",
            "source": "MySQL",
            "sentence": "UPDATE Categories  SET CategoryName = ? WHERE c.CategoryID = ? ",
            "children": []
          }
        },
        {
          "test": "Categories.update({ name: entity.name })",
          "result": {
            "entity": "Categories",
            "dialect": "MySQL",
            "source": "MySQL",
            "sentence": "UPDATE Categories  SET CategoryName = ? WHERE c.CategoryID = ? ",
            "children": []
          }
        },
        {
          "test": "Categories.update([name, description])",
          "result": {
            "entity": "Categories",
            "dialect": "MySQL",
            "source": "MySQL",
            "sentence": "UPDATE Categories  SET CategoryName = ?,Description = ? ",
            "children": []
          }
        },
        {
          "test": "Categories.update(p=>[name, description])",
          "result": {
            "entity": "Categories",
            "dialect": "MySQL",
            "source": "MySQL",
            "sentence": "UPDATE Categories  SET CategoryName = ?,Description = ? WHERE c.CategoryID = ? ",
            "children": []
          }
        },
        {
          "test": "Categories.update(p=>{name:name,description:description})",
          "result": {
            "entity": "Categories",
            "dialect": "MySQL",
            "source": "MySQL",
            "sentence": "UPDATE Categories  SET CategoryName = ?,Description = ? WHERE c.CategoryID = ? ",
            "children": []
          }
        },
        {
          "test": "Categories.update(p=>{name:upper(p.name),description:description})",
          "result": {
            "entity": "Categories",
            "dialect": "MySQL",
            "source": "MySQL",
            "sentence": "UPDATE Categories  SET CategoryName = UPPER(c.CategoryName),Description = ? WHERE c.CategoryID = ? ",
            "children": []
          }
        },
        {
          "test": "Categories.updateAll(p => { name: upper(p.name) })",
          "result": {
            "entity": "Categories",
            "dialect": "MySQL",
            "source": "MySQL",
            "sentence": "UPDATE Categories  SET CategoryName = UPPER(c.CategoryName) ",
            "children": []
          }
        },
        {
          "test": "Categories.updateAll(p => { name: concat(\"_\",p.name) })",
          "result": {
            "entity": "Categories",
            "dialect": "MySQL",
            "source": "MySQL",
            "sentence": "UPDATE Categories  SET CategoryName = CONCAT('_',c.CategoryName) ",
            "children": []
          }
        },
        {
          "test": "Categories.updateAll(() => [name])",
          "result": {
            "entity": "Categories",
            "dialect": "MySQL",
            "source": "MySQL",
            "sentence": "UPDATE Categories  SET CategoryName = ? ",
            "children": []
          }
        },
        {
          "test": "Orders.update({ name: entity.name }).filter(p => p.id === entity.id)",
          "result": {
            "entity": "Orders",
            "dialect": "MySQL",
            "source": "MySQL",
            "sentence": "UPDATE Orders  SET ShipName = ? WHERE o.OrderID = ? ",
            "children": []
          }
        },
        {
          "test": "Orders.update({ name: entity.name }).include(p => p.details.update(p => p)).filter(p => p.id === entity.id)",
          "result": {
            "entity": "Orders",
            "dialect": "MySQL",
            "source": "MySQL",
            "sentence": "UPDATE Orders  SET ShipName = ? WHERE o.OrderID = ? ",
            "children": [
              {
                "entity": "Orders.details",
                "dialect": "MySQL",
                "source": "MySQL",
                "sentence": "UPDATE `Order Details`  SET UnitPrice = ?,Quantity = ?,Discount = ? WHERE (o1.OrderID = ? AND o1.ProductID = ?) ",
                "children": []
              }
            ]
          }
        },
        {
          "test": "Orders.update({ name: entity.name }).include(p => p.details.update(p => ({ unitPrice: p.unitPrice, productId: p.productId }))).filter(p => p.id === entity.id)",
          "result": {
            "entity": "Orders",
            "dialect": "MySQL",
            "source": "MySQL",
            "sentence": "UPDATE Orders  SET ShipName = ? WHERE o.OrderID = ? ",
            "children": [
              {
                "entity": "Orders.details",
                "dialect": "MySQL",
                "source": "MySQL",
                "sentence": "UPDATE `Order Details`  SET UnitPrice = o1.UnitPrice,ProductID = o1.ProductID WHERE (o1.OrderID = ? AND o1.ProductID = ?) ",
                "children": []
              }
            ]
          }
        },
        {
          "test": "Orders.update(p => ({ name: entity.name })).filter(p => p.id === entity.id)",
          "result": {
            "entity": "Orders",
            "dialect": "MySQL",
            "source": "MySQL",
            "sentence": "UPDATE Orders  SET ShipName = ? WHERE o.OrderID = ? ",
            "children": []
          }
        },
        {
          "test": "Orders.update(() => ({ name: entity.name })).include(p => p.details).filter(p => p.id === entity.id)",
          "result": {
            "entity": "Orders",
            "dialect": "MySQL",
            "source": "MySQL",
            "sentence": "UPDATE Orders  SET ShipName = ? WHERE o.OrderID = ? ",
            "children": [
              {
                "entity": "Orders.details",
                "dialect": "MySQL",
                "source": "MySQL",
                "sentence": "UPDATE `Order Details`  SET OrderID = ?,ProductID = ?,UnitPrice = ?,Quantity = ?,Discount = ? WHERE (o1.OrderID = ? AND o1.ProductID = ?) ",
                "children": []
              }
            ]
          }
        },
        {
          "test": "Orders.update(() => ({ name: entity.name })).include(p => p.details.update(p => p)).filter(p => p.id === entity.id)",
          "result": {
            "entity": "Orders",
            "dialect": "MySQL",
            "source": "MySQL",
            "sentence": "UPDATE Orders  SET ShipName = ? WHERE o.OrderID = ? ",
            "children": [
              {
                "entity": "Orders.details",
                "dialect": "MySQL",
                "source": "MySQL",
                "sentence": "UPDATE `Order Details`  SET UnitPrice = ?,Quantity = ?,Discount = ? WHERE (o1.OrderID = ? AND o1.ProductID = ?) ",
                "children": []
              }
            ]
          }
        },
        {
          "test": "Orders.update(() => ({ name: entity.name })).include(p => p.details.update(p => ({ unitPrice: p.unitPrice, productId: p.productId }))).filter(p => p.id === entity.id)",
          "result": {
            "entity": "Orders",
            "dialect": "MySQL",
            "source": "MySQL",
            "sentence": "UPDATE Orders  SET ShipName = ? WHERE o.OrderID = ? ",
            "children": [
              {
                "entity": "Orders.details",
                "dialect": "MySQL",
                "source": "MySQL",
                "sentence": "UPDATE `Order Details`  SET UnitPrice = o1.UnitPrice,ProductID = o1.ProductID WHERE (o1.OrderID = ? AND o1.ProductID = ?) ",
                "children": []
              }
            ]
          }
        },
        {
          "test": "Orders.update().include(p => p.details)",
          "result": {
            "entity": "Orders",
            "dialect": "MySQL",
            "source": "MySQL",
            "sentence": "UPDATE Orders  SET CustomerID = ?,EmployeeID = ?,OrderDate = ?,RequiredDate = ?,ShippedDate = ?,ShipVia = ?,Freight = ?,ShipName = ?,ShipAddress = ?,ShipCity = ?,ShipRegion = ?,ShipPostalCode = ?,ShipCountry = ? WHERE o.OrderID = ? ",
            "children": [
              {
                "entity": "Orders.details",
                "dialect": "MySQL",
                "source": "MySQL",
                "sentence": "UPDATE `Order Details`  SET OrderID = ?,ProductID = ?,UnitPrice = ?,Quantity = ?,Discount = ? WHERE (o1.OrderID = ? AND o1.ProductID = ?) ",
                "children": []
              }
            ]
          }
        },
        {
          "test": "Customers.update().include(p => p.orders.include(p => p.details))",
          "result": {
            "entity": "Customers",
            "dialect": "MySQL",
            "source": "MySQL",
            "sentence": "UPDATE Customers  SET CustomerID = ?,CompanyName = ?,ContactName = ?,ContactTitle = ?,Address = ?,City = ?,Region = ?,PostalCode = ?,Country = ? WHERE c.CustomerID = ? ",
            "children": [
              {
                "entity": "Orders",
                "dialect": "MySQL",
                "source": "MySQL",
                "sentence": "UPDATE Orders  SET CustomerID = ?,EmployeeID = ?,OrderDate = ?,RequiredDate = ?,ShippedDate = ?,ShipVia = ?,Freight = ?,ShipName = ?,ShipAddress = ?,ShipCity = ?,ShipRegion = ?,ShipPostalCode = ?,ShipCountry = ? WHERE o.OrderID = ? ",
                "children": [
                  {
                    "entity": "Orders.details",
                    "dialect": "MySQL",
                    "source": "MySQL",
                    "sentence": "UPDATE `Order Details`  SET OrderID = ?,ProductID = ?,UnitPrice = ?,Quantity = ?,Discount = ? WHERE (o1.OrderID = ? AND o1.ProductID = ?) ",
                    "children": []
                  }
                ]
              }
            ]
          }
        }
      ]
    }
  ]
}