{
  "name": "nullable",
  "cases": [
    {
      "name": "normalize",
      "tests": [
        {
          "test": "States.filter(p=> isNull(p.latitude)).map(p=> count(1))",
          "result": "States.map(p=>count(1)).filter(p=>isNull(p.latitude))"
        },
        {
          "test": "States.filter(p=> isNotNull(p.latitude)).map(p=> count(1))",
          "result": "States.map(p=>count(1)).filter(p=>isNotNull(p.latitude))"
        },
        {
          "test": "States.filter(p=> nvl(p.latitude,-100)== -100).map(p=> count(1))",
          "result": "States.map(p=>count(1)).filter(p=>(nvl(p.latitude,-100)==-100))"
        },
        {
          "test": "Countries.filter(p=> p.iso3 == \"CIV\" ).map(p=> {native: nvl(p.native,\"???\")})",
          "result": "Countries.map(p=>{native:nvl(p.native,???)}).filter(p=>(p.iso3==CIV))"
        },
        {
          "test": "Countries.filter(p=> p.iso3 == \"CIV\" ).map(p=> {native: nvl2(p.native,\"is not null\",\"is null\")})",
          "result": "Countries.map(p=>{native:nvl2(p.native,is not null,is null)}).filter(p=>(p.iso3==CIV))"
        }
      ],
      "errors": 0
    },
    {
      "name": "model",
      "tests": [
        {
          "test": "States.filter(p=> isNull(p.latitude)).map(p=> count(1))",
          "result": []
        },
        {
          "test": "States.filter(p=> isNotNull(p.latitude)).map(p=> count(1))",
          "result": []
        },
        {
          "test": "States.filter(p=> nvl(p.latitude,-100)== -100).map(p=> count(1))",
          "result": []
        },
        {
          "test": "Countries.filter(p=> p.iso3 == \"CIV\" ).map(p=> {native: nvl(p.native,\"???\")})",
          "result": [
            {
              "name": "native",
              "type": "any"
            }
          ]
        },
        {
          "test": "Countries.filter(p=> p.iso3 == \"CIV\" ).map(p=> {native: nvl2(p.native,\"is not null\",\"is null\")})",
          "result": [
            {
              "name": "native",
              "type": "any"
            }
          ]
        }
      ],
      "errors": 0
    },
    {
      "name": "parameters",
      "tests": [
        {
          "test": "States.filter(p=> isNull(p.latitude)).map(p=> count(1))",
          "result": []
        },
        {
          "test": "States.filter(p=> isNotNull(p.latitude)).map(p=> count(1))",
          "result": []
        },
        {
          "test": "States.filter(p=> nvl(p.latitude,-100)== -100).map(p=> count(1))",
          "result": []
        },
        {
          "test": "Countries.filter(p=> p.iso3 == \"CIV\" ).map(p=> {native: nvl(p.native,\"???\")})",
          "result": []
        },
        {
          "test": "Countries.filter(p=> p.iso3 == \"CIV\" ).map(p=> {native: nvl2(p.native,\"is not null\",\"is null\")})",
          "result": []
        }
      ],
      "errors": 0
    },
    {
      "name": "constraints",
      "tests": [
        {
          "test": "States.filter(p=> isNull(p.latitude)).map(p=> count(1))",
          "result": {
            "entity": "States",
            "constraints": []
          }
        },
        {
          "test": "States.filter(p=> isNotNull(p.latitude)).map(p=> count(1))",
          "result": {
            "entity": "States",
            "constraints": []
          }
        },
        {
          "test": "States.filter(p=> nvl(p.latitude,-100)== -100).map(p=> count(1))",
          "result": {
            "entity": "States",
            "constraints": []
          }
        },
        {
          "test": "Countries.filter(p=> p.iso3 == \"CIV\" ).map(p=> {native: nvl(p.native,\"???\")})",
          "result": {
            "entity": "Countries",
            "constraints": []
          }
        },
        {
          "test": "Countries.filter(p=> p.iso3 == \"CIV\" ).map(p=> {native: nvl2(p.native,\"is not null\",\"is null\")})",
          "result": {
            "entity": "Countries",
            "constraints": []
          }
        }
      ],
      "errors": 0
    },
    {
      "name": "metadata",
      "tests": [
        {
          "test": "States.filter(p=> isNull(p.latitude)).map(p=> count(1))",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 42
            },
            "name": "select",
            "children": [],
            "type": "any",
            "entity": "States",
            "columns": [],
            "parameters": [],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "select",
            "alias": "s"
          }
        },
        {
          "test": "States.filter(p=> isNotNull(p.latitude)).map(p=> count(1))",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 45
            },
            "name": "select",
            "children": [],
            "type": "any",
            "entity": "States",
            "columns": [],
            "parameters": [],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "select",
            "alias": "s"
          }
        },
        {
          "test": "States.filter(p=> nvl(p.latitude,-100)== -100).map(p=> count(1))",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 51
            },
            "name": "select",
            "children": [],
            "type": "any",
            "entity": "States",
            "columns": [],
            "parameters": [],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "select",
            "alias": "s"
          }
        },
        {
          "test": "Countries.filter(p=> p.iso3 == \"CIV\" ).map(p=> {native: nvl(p.native,\"???\")})",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 43
            },
            "name": "select",
            "children": [],
            "type": "any",
            "entity": "Countries",
            "columns": [
              {
                "name": "native",
                "type": "any"
              }
            ],
            "parameters": [],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "select",
            "alias": "c"
          }
        },
        {
          "test": "Countries.filter(p=> p.iso3 == \"CIV\" ).map(p=> {native: nvl2(p.native,\"is not null\",\"is null\")})",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 43
            },
            "name": "select",
            "children": [],
            "type": "any",
            "entity": "Countries",
            "columns": [
              {
                "name": "native",
                "type": "any"
              }
            ],
            "parameters": [],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "select",
            "alias": "c"
          }
        }
      ],
      "errors": 0
    },
    {
      "name": "getInfo",
      "tests": [
        {
          "test": "States.filter(p=> isNull(p.latitude)).map(p=> count(1))",
          "result": {
            "entity": "States",
            "dialect": "PostgreSQL",
            "source": "dataSource2",
            "sentence": "SELECT COUNT(1) FROM TBL_STATES s  WHERE (s.LATITUDE IS NULL) ",
            "children": []
          }
        },
        {
          "test": "States.filter(p=> isNotNull(p.latitude)).map(p=> count(1))",
          "result": {
            "entity": "States",
            "dialect": "PostgreSQL",
            "source": "dataSource2",
            "sentence": "SELECT COUNT(1) FROM TBL_STATES s  WHERE (s.LATITUDE IS NOT NULL) ",
            "children": []
          }
        },
        {
          "test": "States.filter(p=> nvl(p.latitude,-100)== -100).map(p=> count(1))",
          "result": {
            "entity": "States",
            "dialect": "PostgreSQL",
            "source": "dataSource2",
            "sentence": "SELECT COUNT(1) FROM TBL_STATES s  WHERE (CASE WHEN s.LATITUDE IS NOT NULL THEN s.LATITUDE ELSE -100 END) = -100 ",
            "children": []
          }
        },
        {
          "test": "Countries.filter(p=> p.iso3 == \"CIV\" ).map(p=> {native: nvl(p.native,\"???\")})",
          "result": {
            "entity": "Countries",
            "dialect": "MySQL",
            "source": "dataSource1",
            "sentence": "SELECT IFNULL(c.native,'???') AS native FROM Countries c  WHERE c.iso3 = 'CIV' ",
            "children": []
          }
        },
        {
          "test": "Countries.filter(p=> p.iso3 == \"CIV\" ).map(p=> {native: nvl2(p.native,\"is not null\",\"is null\")})",
          "result": {
            "entity": "Countries",
            "dialect": "MySQL",
            "source": "dataSource1",
            "sentence": "SELECT (CASE WHEN c.native IS NOT NULL THEN 'is not null' ELSE 'is null' END) AS native FROM Countries c  WHERE c.iso3 = 'CIV' ",
            "children": []
          }
        }
      ],
      "errors": 0
    }
  ],
  "errors": 0
}