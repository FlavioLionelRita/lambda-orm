name: groupBy
data:
  a:
    id: 1
test:
  - name: groupBy 1
    sentences:
      - stage: MongoDB
        info:
          entity: Products
          dialect: MongoDB
          source: MongoDB
          sentence: '[{ "$group" :{ "_id": 0 , "maxPrice":{ "$max" :"$UnitPrice" } }} ]'
          children: []
    errors: 0
    expression: 'Products.map(p => ({ maxPrice: max(p.price) }))'
    normalizeExpression: Products.map(p=>{maxPrice:max(p.price)})
    model:
      - name: maxPrice
        type: any
    parameters: []
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 13
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: maxPrice
          type: any
      parameters: []
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MongoDB
    result:
      - _id: 0
        maxPrice: 263.5
  - name: groupBy 2
    sentences:
      - stage: MongoDB
        info:
          entity: Products
          dialect: MongoDB
          source: MongoDB
          sentence: '[{ "$group" :{ "_id": 0 , "minPrice":{ "$min" :"$UnitPrice" } }} ]'
          children: []
    errors: 0
    expression: 'Products.map(p => ({ minPrice: min(p.price) }))'
    normalizeExpression: Products.map(p=>{minPrice:min(p.price)})
    model:
      - name: minPrice
        type: any
    parameters: []
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 13
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: minPrice
          type: any
      parameters: []
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MongoDB
    result:
      - _id: 0
        minPrice: 2.5
  - name: groupBy 3
    sentences:
      - stage: MongoDB
        info:
          entity: Products
          dialect: MongoDB
          source: MongoDB
          sentence: '[{ "$group" :{ "_id": 0 , "total":{ "$sum" :"$UnitPrice" } }} ]'
          children: []
    errors: 0
    expression: 'Products.map(p => ({ total: sum(p.price) }))'
    normalizeExpression: Products.map(p=>{total:sum(p.price)})
    model:
      - name: total
        type: number
    parameters: []
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 13
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: total
          type: number
      parameters: []
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MongoDB
    result:
      - _id: 0
        total: 2222.71
  - name: groupBy 4
    sentences:
      - stage: MongoDB
        info:
          entity: Products
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$group" :{ "_id": 0 , "average":{ "$round" :[{ "$avg"
            :"$UnitPrice" },4] } }} ]
          children: []
    errors: 1
    expression: 'Products.map(p => ({ average: round(avg(p.price), 4) }))'
    normalizeExpression: Products.map(p=>{average:round(avg(p.price),4)})
    model:
      - name: average
        type: number
    parameters: []
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 13
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: average
          type: number
      parameters: []
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MongoDB
        error: 'MongoServerError: The $round accumulator is a unary operator'
  - name: groupBy 5
    sentences:
      - stage: MongoDB
        info:
          entity: Products
          dialect: MongoDB
          source: MongoDB
          sentence: '[{ "$group" :{ "_id": 0 , "count":{ "$sum" : 1 } }} ]'
          children: []
    errors: 0
    expression: 'Products.map(p => ({ count: count(1) }))'
    normalizeExpression: Products.map(p=>{count:count(1)})
    model:
      - name: count
        type: integer
    parameters: []
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 13
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: count
          type: integer
      parameters: []
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MongoDB
    result:
      - _id: 0
        count: 77
  - name: groupBy 6
    sentences:
      - stage: MongoDB
        info:
          entity: Products
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$group" :{ "_id":{ "category":"$CategoryID" } , "largestPrice":{
            "$max" :"$UnitPrice" } }}, { "$project" :{ "_id": 0 ,
            "category":"$_id.category" , "largestPrice":"$largestPrice" }} ]
          children: []
    errors: 0
    expression: >-
      Products.map(p => ({ category: p.categoryId, largestPrice: max(p.price)
      }))
    normalizeExpression: Products.map(p=>{category:p.categoryId,largestPrice:max(p.price)})
    model:
      - name: category
        type: integer
      - name: largestPrice
        type: any
    parameters: []
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 13
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: category
          type: integer
        - name: largestPrice
          type: any
      parameters: []
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MongoDB
    result:
      - category: 4
        largestPrice: 55
      - category: 3
        largestPrice: 81
      - category: 1
        largestPrice: 263.5
      - category: 6
        largestPrice: 123.79
      - category: 5
        largestPrice: 38
      - category: 2
        largestPrice: 43.9
      - category: 8
        largestPrice: 62.5
      - category: 7
        largestPrice: 53
  - name: groupBy 7
    sentences:
      - stage: MongoDB
        info:
          entity: Products
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$lookup" :{ "from": "Categories", "localField": "CategoryID" ,
            "foreignField": "_id", "as": "c" }}, { "$group" :{ "_id":{
            "category":{ "$arrayElemAt": ["$c.CategoryName", 0] } } ,
            "largestPrice":{ "$max" :"$UnitPrice" } }}, { "$project" :{ "_id": 0
            , "category":"$_id.category" , "largestPrice":"$largestPrice" }} ]
          children: []
    errors: 0
    expression: >-
      Products.map(p => ({ category: p.category.name, largestPrice: max(p.price)
      }))
    normalizeExpression: Products.map(p=>{category:p.category.name,largestPrice:max(p.price)})
    model:
      - name: category
        type: string
      - name: largestPrice
        type: any
    parameters: []
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 13
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: category
          type: string
        - name: largestPrice
          type: any
      parameters: []
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MongoDB
    result:
      - category: Condiments
        largestPrice: 43.9
      - category: Produce
        largestPrice: 53
      - category: Seafood
        largestPrice: 62.5
      - category: Dairy Products
        largestPrice: 55
      - category: Confections
        largestPrice: 81
      - category: Beverages
        largestPrice: 263.5
      - category: Meat/Poultry
        largestPrice: 123.79
      - category: Grains/Cereals
        largestPrice: 38
  - name: groupBy 8
    data: a
    sentences:
      - stage: MongoDB
        info:
          entity: Products
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":"$UnitPrice", "result":{ "$abs"
            :"$UnitPrice" } }} ]
          children: []
    errors: 0
    expression: >-
      Products.filter(p => p.id === id).map(p => ({ name: p.name, source:
      p.price, result: abs(p.price) }))
    normalizeExpression: >-
      Products.map(p=>{name:p.name,source:p.price,result:abs(p.price)}).filter(p=>(p.id==id))
    model:
      - name: name
        type: string
      - name: source
        type: decimal
      - name: result
        type: number
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 38
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: name
          type: string
        - name: source
          type: decimal
        - name: result
          type: number
      parameters:
        - name: id
          type: integer
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MongoDB
    result:
      - name: Chai
        source: 18
        result: 18
  - name: groupBy 9
    sentences:
      - stage: MongoDB
        info:
          entity: Products
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$lookup" :{ "from": "Categories", "localField": "CategoryID" ,
            "foreignField": "_id", "as": "c" }}, { "$group" :{ "_id":{
            "category":{ "$arrayElemAt": ["$c.CategoryName", 0] } } ,
            "largestPrice":{ "$max" :"$UnitPrice" } }}, { "$project" :{ "_id": 0
            , "category":"$_id.category" , "largestPrice":"$largestPrice" }} , {
            "$match" : { { "$max" :"UnitPrice" }: { "$gt": 100 } } }]
          children: []
    errors: 1
    expression: >-
      Products.having(p => max(p.price) > 100).map(p => ({ category:
      p.category.name, largestPrice: max(p.price) }))
    normalizeExpression: >-
      Products.map(p=>{category:p.category.name,largestPrice:max(p.price)}).having(p=>(max(p.price)>100))
    model:
      - name: category
        type: string
      - name: largestPrice
        type: any
    parameters: []
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 45
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: category
          type: string
        - name: largestPrice
          type: any
      parameters: []
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MongoDB
        error: 'SyntaxError: Unexpected token { in JSON at position 335'
  - name: query 10
    sentences:
      - stage: MongoDB
        info:
          entity: Orders.details
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$unwind" : "$\"Order Details\"" }, { "$replaceRoot": {
            "newRoot": "$\"Order Details\"" } }, { "$group" :{ "_id": 0 ,
            "subTotal":{ "$sum" :{ "$multiply" :[{ "$multiply" :[{ "$multiply"
            :["$UnitPrice","$Quantity"] },{ "$subtract" :[1,{ "$divide"
            :["$Discount",100] }] }] },100] } } }} , { "$sort" :{ "subTotal":1 }
            }]
          children: []
    errors: 0
    expression: >-
      Orders.details.map(p => ({ subTotal: sum((p.unitPrice * p.quantity * (1 -
      p.discount / 100)) * 100) })).sort(p => p.subTotal)
    normalizeExpression: >-
      Orders.details.map(p=>{subTotal:sum((((p.unitPrice*p.quantity)*(1-(p.discount/100)))*100))}).sort(p=>asc(p.subTotal))
    model:
      - name: subTotal
        type: number
    parameters: []
    constraints:
      entity: Orders.details
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 109
      name: select
      children: []
      type: any
      entity: Orders.details
      columns:
        - name: subTotal
          type: number
      parameters: []
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: o
    executions:
      - stage: MongoDB
    result:
      - _id: 0
        subTotal: 135445859
errors: 2
