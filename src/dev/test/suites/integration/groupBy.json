{
  "name": "groupBy",
  "context": {
    "id": 1
  },
  "cases": [
    {
      "name": "MySQL",
      "tests": [
        {
          "test": "Products.map(p => ({ maxPrice: max(p.price) }))",
          "result": [
            {
              "maxPrice": null
            }
          ]
        },
        {
          "test": "Products.map(p => ({ minPrice: min(p.price) }))",
          "result": [
            {
              "minPrice": null
            }
          ]
        },
        {
          "test": "Products.map(p => ({ total: sum(p.price) }))",
          "result": [
            {
              "total": null
            }
          ]
        },
        {
          "test": "Products.map(p => ({ average: round(avg(p.price), 4) }))",
          "result": [
            {
              "average": null
            }
          ]
        },
        {
          "test": "Products.map(p => ({ count: count(1) }))",
          "result": [
            {
              "count": 0
            }
          ]
        },
        {
          "test": "Products.map(p => ({ category: p.categoryId, largestPrice: max(p.price) }))",
          "result": []
        },
        {
          "test": "Products.map(p => ({ category: p.category.name, largestPrice: max(p.price) }))",
          "result": []
        },
        {
          "test": "Products.filter(p => p.id === id).map(p => ({ name: p.name, source: p.price, result: abs(p.price) }))",
          "result": []
        },
        {
          "test": "Products.having(p => max(p.price) > 100).map(p => ({ category: p.category.name, largestPrice: max(p.price) }))",
          "result": []
        },
        {
          "test": "Orders.details.map(p => ({ subTotal: sum((p.unitPrice * p.quantity * (1 - p.discount / 100)) * 100) })).sort(p => p.subTotal)",
          "result": [
            {
              "subTotal": null
            }
          ]
        },
        {
          "test": "Products.having(p => max(p.price) > 100).map(p => ({ category: p.category.name, largestPrice: max(p.price) })).sort(p => desc(p.largestPrice))",
          "result": []
        },
        {
          "test": "Products.filter(p => p.price > 5).having(p => max(p.price) > 50).map(p => ({ category: p.category.name, largestPrice: max(p.price) })).sort(p => desc(p.largestPrice))",
          "result": []
        }
      ],
      "errors": 0
    },
    {
      "name": "MariaDB",
      "tests": [
        {
          "test": "Products.map(p => ({ maxPrice: max(p.price) }))",
          "result": [
            {
              "maxPrice": null
            }
          ]
        },
        {
          "test": "Products.map(p => ({ minPrice: min(p.price) }))",
          "result": [
            {
              "minPrice": null
            }
          ]
        },
        {
          "test": "Products.map(p => ({ total: sum(p.price) }))",
          "result": [
            {
              "total": null
            }
          ]
        },
        {
          "test": "Products.map(p => ({ average: round(avg(p.price), 4) }))",
          "result": [
            {
              "average": null
            }
          ]
        },
        {
          "test": "Products.map(p => ({ count: count(1) }))",
          "result": [
            {
              "count": 0
            }
          ]
        },
        {
          "test": "Products.map(p => ({ category: p.categoryId, largestPrice: max(p.price) }))",
          "result": []
        },
        {
          "test": "Products.map(p => ({ category: p.category.name, largestPrice: max(p.price) }))",
          "result": []
        },
        {
          "test": "Products.filter(p => p.id === id).map(p => ({ name: p.name, source: p.price, result: abs(p.price) }))",
          "result": []
        },
        {
          "test": "Products.having(p => max(p.price) > 100).map(p => ({ category: p.category.name, largestPrice: max(p.price) }))",
          "result": []
        },
        {
          "test": "Orders.details.map(p => ({ subTotal: sum((p.unitPrice * p.quantity * (1 - p.discount / 100)) * 100) })).sort(p => p.subTotal)",
          "result": [
            {
              "subTotal": null
            }
          ]
        },
        {
          "test": "Products.having(p => max(p.price) > 100).map(p => ({ category: p.category.name, largestPrice: max(p.price) })).sort(p => desc(p.largestPrice))",
          "result": []
        },
        {
          "test": "Products.filter(p => p.price > 5).having(p => max(p.price) > 50).map(p => ({ category: p.category.name, largestPrice: max(p.price) })).sort(p => desc(p.largestPrice))",
          "result": []
        }
      ],
      "errors": 0
    },
    {
      "name": "PostgreSQL",
      "tests": [
        {
          "test": "Products.map(p => ({ maxPrice: max(p.price) }))",
          "result": [
            {
              "maxPrice": null
            }
          ]
        },
        {
          "test": "Products.map(p => ({ minPrice: min(p.price) }))",
          "result": [
            {
              "minPrice": null
            }
          ]
        },
        {
          "test": "Products.map(p => ({ total: sum(p.price) }))",
          "result": [
            {
              "total": null
            }
          ]
        },
        {
          "test": "Products.map(p => ({ average: round(avg(p.price), 4) }))",
          "result": [
            {
              "average": null
            }
          ]
        },
        {
          "test": "Products.map(p => ({ count: count(1) }))",
          "result": [
            {
              "count": 0
            }
          ]
        },
        {
          "test": "Products.map(p => ({ category: p.categoryId, largestPrice: max(p.price) }))",
          "result": []
        },
        {
          "test": "Products.map(p => ({ category: p.category.name, largestPrice: max(p.price) }))",
          "result": []
        },
        {
          "test": "Products.filter(p => p.id === id).map(p => ({ name: p.name, source: p.price, result: abs(p.price) }))",
          "result": []
        },
        {
          "test": "Products.having(p => max(p.price) > 100).map(p => ({ category: p.category.name, largestPrice: max(p.price) }))",
          "result": []
        },
        {
          "test": "Orders.details.map(p => ({ subTotal: sum((p.unitPrice * p.quantity * (1 - p.discount / 100)) * 100) })).sort(p => p.subTotal)",
          "result": [
            {
              "subTotal": null
            }
          ]
        },
        {
          "test": "Products.having(p => max(p.price) > 100).map(p => ({ category: p.category.name, largestPrice: max(p.price) })).sort(p => desc(p.largestPrice))",
          "result": []
        },
        {
          "test": "Products.filter(p => p.price > 5).having(p => max(p.price) > 50).map(p => ({ category: p.category.name, largestPrice: max(p.price) })).sort(p => desc(p.largestPrice))",
          "result": []
        }
      ],
      "errors": 0
    },
    {
      "name": "SqlServer",
      "tests": [
        {
          "test": "Products.map(p => ({ maxPrice: max(p.price) }))",
          "result": [
            {
              "maxPrice": null
            }
          ]
        },
        {
          "test": "Products.map(p => ({ minPrice: min(p.price) }))",
          "result": [
            {
              "minPrice": null
            }
          ]
        },
        {
          "test": "Products.map(p => ({ total: sum(p.price) }))",
          "result": [
            {
              "total": null
            }
          ]
        },
        {
          "test": "Products.map(p => ({ average: round(avg(p.price), 4) }))",
          "result": [
            {
              "average": null
            }
          ]
        },
        {
          "test": "Products.map(p => ({ count: count(1) }))",
          "result": [
            {
              "count": 0
            }
          ]
        },
        {
          "test": "Products.map(p => ({ category: p.categoryId, largestPrice: max(p.price) }))",
          "result": []
        },
        {
          "test": "Products.map(p => ({ category: p.category.name, largestPrice: max(p.price) }))",
          "result": []
        },
        {
          "test": "Products.filter(p => p.id === id).map(p => ({ name: p.name, source: p.price, result: abs(p.price) }))",
          "result": []
        },
        {
          "test": "Products.having(p => max(p.price) > 100).map(p => ({ category: p.category.name, largestPrice: max(p.price) }))",
          "result": []
        },
        {
          "test": "Orders.details.map(p => ({ subTotal: sum((p.unitPrice * p.quantity * (1 - p.discount / 100)) * 100) })).sort(p => p.subTotal)",
          "result": [
            {
              "subTotal": null
            }
          ]
        },
        {
          "test": "Products.having(p => max(p.price) > 100).map(p => ({ category: p.category.name, largestPrice: max(p.price) })).sort(p => desc(p.largestPrice))",
          "result": []
        },
        {
          "test": "Products.filter(p => p.price > 5).having(p => max(p.price) > 50).map(p => ({ category: p.category.name, largestPrice: max(p.price) })).sort(p => desc(p.largestPrice))",
          "result": []
        }
      ],
      "errors": 0
    },
    {
      "name": "Oracle",
      "tests": [
        {
          "test": "Products.map(p => ({ maxPrice: max(p.price) }))",
          "result": [
            {
              "maxPrice": null
            }
          ]
        },
        {
          "test": "Products.map(p => ({ minPrice: min(p.price) }))",
          "result": [
            {
              "minPrice": null
            }
          ]
        },
        {
          "test": "Products.map(p => ({ total: sum(p.price) }))",
          "result": [
            {
              "total": null
            }
          ]
        },
        {
          "test": "Products.map(p => ({ average: round(avg(p.price), 4) }))",
          "result": [
            {
              "average": null
            }
          ]
        },
        {
          "test": "Products.map(p => ({ count: count(1) }))",
          "result": [
            {
              "count": 0
            }
          ]
        },
        {
          "test": "Products.map(p => ({ category: p.categoryId, largestPrice: max(p.price) }))",
          "result": []
        },
        {
          "test": "Products.map(p => ({ category: p.category.name, largestPrice: max(p.price) }))",
          "result": []
        },
        {
          "test": "Products.filter(p => p.id === id).map(p => ({ name: p.name, source: p.price, result: abs(p.price) }))",
          "result": []
        },
        {
          "test": "Products.having(p => max(p.price) > 100).map(p => ({ category: p.category.name, largestPrice: max(p.price) }))",
          "result": []
        },
        {
          "test": "Orders.details.map(p => ({ subTotal: sum((p.unitPrice * p.quantity * (1 - p.discount / 100)) * 100) })).sort(p => p.subTotal)",
          "result": [
            {
              "subTotal": null
            }
          ]
        },
        {
          "test": "Products.having(p => max(p.price) > 100).map(p => ({ category: p.category.name, largestPrice: max(p.price) })).sort(p => desc(p.largestPrice))",
          "result": []
        },
        {
          "test": "Products.filter(p => p.price > 5).having(p => max(p.price) > 50).map(p => ({ category: p.category.name, largestPrice: max(p.price) })).sort(p => desc(p.largestPrice))",
          "result": []
        }
      ],
      "errors": 0
    },
    {
      "name": "MongoDB",
      "tests": [
        {
          "test": "Products.map(p => ({ maxPrice: max(p.price) }))",
          "result": [
            {
              "maxPrice": null
            }
          ]
        },
        {
          "test": "Products.map(p => ({ minPrice: min(p.price) }))",
          "result": [
            {
              "minPrice": null
            }
          ]
        },
        {
          "test": "Products.map(p => ({ total: sum(p.price) }))",
          "result": [
            {
              "total": null
            }
          ]
        },
        {
          "test": "Products.map(p => ({ average: round(avg(p.price), 4) }))",
          "result": [
            {
              "average": null
            }
          ]
        },
        {
          "test": "Products.map(p => ({ count: count(1) }))",
          "result": [
            {
              "count": 0
            }
          ]
        },
        {
          "test": "Products.map(p => ({ category: p.categoryId, largestPrice: max(p.price) }))",
          "result": []
        },
        {
          "test": "Products.map(p => ({ category: p.category.name, largestPrice: max(p.price) }))",
          "result": []
        },
        {
          "test": "Products.filter(p => p.id === id).map(p => ({ name: p.name, source: p.price, result: abs(p.price) }))",
          "result": []
        },
        {
          "test": "Products.having(p => max(p.price) > 100).map(p => ({ category: p.category.name, largestPrice: max(p.price) }))",
          "result": []
        },
        {
          "test": "Orders.details.map(p => ({ subTotal: sum((p.unitPrice * p.quantity * (1 - p.discount / 100)) * 100) })).sort(p => p.subTotal)",
          "result": [
            {
              "subTotal": null
            }
          ]
        },
        {
          "test": "Products.having(p => max(p.price) > 100).map(p => ({ category: p.category.name, largestPrice: max(p.price) })).sort(p => desc(p.largestPrice))",
          "result": []
        },
        {
          "test": "Products.filter(p => p.price > 5).having(p => max(p.price) > 50).map(p => ({ category: p.category.name, largestPrice: max(p.price) })).sort(p => desc(p.largestPrice))",
          "result": []
        }
      ],
      "errors": 0
    }
  ],
  "errors": 0
}