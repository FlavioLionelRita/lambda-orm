name: query
context: {}
data:
  a:
    id: 1
  b:
    minValue: 10
    from: '1997-01-01'
    to: '1997-12-31'
test:
  - name: query 1
    sentences:
      - datastore: mysql
        sentence: >-
          SELECT p.ProductID AS `id`, p.ProductName AS `name`, p.SupplierID AS
          `supplierId`, p.CategoryID AS `categoryId`, p.QuantityPerUnit AS
          `quantity`, p.UnitPrice AS `price`, p.UnitsInStock AS `inStock`,
          p.UnitsOnOrder AS `onOrder`, p.ReorderLevel AS `reorderLevel`,
          p.Discontinued AS `discontinued` FROM Products p  
    errors: 0
    expression: Products
    completeExpression: >-
      Products.map(p=>{id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued})
    model:
      id: integer
      name: string
      supplierId: integer
      categoryId: integer
      quantity: string
      price: decimal
      inStock: decimal
      onOrder: decimal
      reorderLevel: decimal
      discontinued: boolean
    parameters: []
    fields:
      - name: id
        type: integer
      - name: name
        type: string
      - name: supplierId
        type: integer
      - name: categoryId
        type: integer
      - name: quantity
        type: string
      - name: price
        type: decimal
      - name: inStock
        type: decimal
      - name: onOrder
        type: decimal
      - name: reorderLevel
        type: decimal
      - name: discontinued
        type: boolean
    executions:
      - datastore: mysql
    result: []
  - name: query 2
    sentences:
      - datastore: mysql
        sentence: >-
          SELECT p.ProductID AS `id`, p.ProductName AS `name`, p.SupplierID AS
          `supplierId`, p.CategoryID AS `categoryId`, p.QuantityPerUnit AS
          `quantity`, p.UnitPrice AS `price`, p.UnitsInStock AS `inStock`,
          p.UnitsOnOrder AS `onOrder`, p.ReorderLevel AS `reorderLevel`,
          p.Discontinued AS `discontinued` FROM Products p  LIMIT 0,1  
    errors: 0
    expression: Products.map(p=>p).page(1,1)
    completeExpression: >-
      Products.map(p=>{id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued}).page(1,1)
    model:
      id: integer
      name: string
      supplierId: integer
      categoryId: integer
      quantity: string
      price: decimal
      inStock: decimal
      onOrder: decimal
      reorderLevel: decimal
      discontinued: boolean
    parameters: []
    fields:
      - name: id
        type: integer
      - name: name
        type: string
      - name: supplierId
        type: integer
      - name: categoryId
        type: integer
      - name: quantity
        type: string
      - name: price
        type: decimal
      - name: inStock
        type: decimal
      - name: onOrder
        type: decimal
      - name: reorderLevel
        type: decimal
      - name: discontinued
        type: boolean
    executions:
      - datastore: mysql
    result: []
  - name: query 3
    sentences:
      - datastore: mysql
        sentence: >-
          SELECT p.ProductID AS `id`, p.ProductName AS `name`, p.SupplierID AS
          `supplierId`, p.CategoryID AS `categoryId`, p.QuantityPerUnit AS
          `quantity`, p.UnitPrice AS `price`, p.UnitsInStock AS `inStock`,
          p.UnitsOnOrder AS `onOrder`, p.ReorderLevel AS `reorderLevel`,
          p.Discontinued AS `discontinued` FROM Products p  LIMIT 0,1  
    errors: 0
    expression: Products.page(1,1)
    completeExpression: >-
      Products.map(p=>{id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued}).page(1,1)
    model:
      id: integer
      name: string
      supplierId: integer
      categoryId: integer
      quantity: string
      price: decimal
      inStock: decimal
      onOrder: decimal
      reorderLevel: decimal
      discontinued: boolean
    parameters: []
    fields:
      - name: id
        type: integer
      - name: name
        type: string
      - name: supplierId
        type: integer
      - name: categoryId
        type: integer
      - name: quantity
        type: string
      - name: price
        type: decimal
      - name: inStock
        type: decimal
      - name: onOrder
        type: decimal
      - name: reorderLevel
        type: decimal
      - name: discontinued
        type: boolean
    executions:
      - datastore: mysql
    result: []
  - name: query 4
    data: a
    sentences:
      - datastore: mysql
        sentence: >-
          SELECT p.ProductID AS `id`, p.ProductName AS `name`, p.SupplierID AS
          `supplierId`, p.CategoryID AS `categoryId`, p.QuantityPerUnit AS
          `quantity`, p.UnitPrice AS `price`, p.UnitsInStock AS `inStock`,
          p.UnitsOnOrder AS `onOrder`, p.ReorderLevel AS `reorderLevel`,
          p.Discontinued AS `discontinued` FROM Products p  WHERE p.ProductID =
          ? ORDER BY id.ProductID 
    errors: 1
    expression: Products.filter(p=>(p.id===id)).map(p=>p).sort(p=>p.id)
    completeExpression: >-
      Products.filter(p=>(p.id===id)).map(p=>{id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued}).sort(p=>p.id)
    model:
      id: integer
      name: string
      supplierId: integer
      categoryId: integer
      quantity: string
      price: decimal
      inStock: decimal
      onOrder: decimal
      reorderLevel: decimal
      discontinued: boolean
    parameters:
      - name: id
        type: integer
        value: 1
    fields:
      - name: id
        type: integer
      - name: name
        type: string
      - name: supplierId
        type: integer
      - name: categoryId
        type: integer
      - name: quantity
        type: string
      - name: price
        type: decimal
      - name: inStock
        type: decimal
      - name: onOrder
        type: decimal
      - name: reorderLevel
        type: decimal
      - name: discontinued
        type: boolean
    executions:
      - datastore: mysql
        error: 'Error: Unknown column ''id.ProductID'' in ''order clause'''
  - name: query 5
    data: a
    sentences:
      - datastore: mysql
        sentence: >-
          SELECT p.ProductID AS `id`, p.ProductName AS `name`, p.SupplierID AS
          `supplierId`, p.CategoryID AS `categoryId`, p.QuantityPerUnit AS
          `quantity`, p.UnitPrice AS `price`, p.UnitsInStock AS `inStock`,
          p.UnitsOnOrder AS `onOrder`, p.ReorderLevel AS `reorderLevel`,
          p.Discontinued AS `discontinued` FROM Products p  WHERE p.ProductID =
          ? ORDER BY id.ProductID 
    errors: 1
    expression: Products.filter(p=>(p.id===id)).sort(p=>p.id)
    completeExpression: >-
      Products.filter(p=>(p.id===id)).map(p=>{id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued}).sort(p=>p.id)
    model:
      id: integer
      name: string
      supplierId: integer
      categoryId: integer
      quantity: string
      price: decimal
      inStock: decimal
      onOrder: decimal
      reorderLevel: decimal
      discontinued: boolean
    parameters:
      - name: id
        type: integer
        value: 1
    fields:
      - name: id
        type: integer
      - name: name
        type: string
      - name: supplierId
        type: integer
      - name: categoryId
        type: integer
      - name: quantity
        type: string
      - name: price
        type: decimal
      - name: inStock
        type: decimal
      - name: onOrder
        type: decimal
      - name: reorderLevel
        type: decimal
      - name: discontinued
        type: boolean
    executions:
      - datastore: mysql
        error: 'Error: Unknown column ''id.ProductID'' in ''order clause'''
  - name: query 6
    data: a
    sentences:
      - datastore: mysql
        sentence: >-
          SELECT c.CategoryName AS `category_name` FROM Products p INNER JOIN
          Categories c ON c.CategoryID = p.CategoryID 
    errors: 0
    expression: Products.map(p=>p.category.name)
    completeExpression: Products.map(p=>{category_name:p.category.name})
    model:
      category_name: string
    parameters: []
    fields:
      - name: category_name
        type: string
    executions:
      - datastore: mysql
    result: []
  - name: query 7
    sentences:
      - datastore: mysql
        sentence: >-
          SELECT c.CategoryName AS `category`, p.ProductName AS `name`,
          p.QuantityPerUnit AS `quantity`, p.UnitsInStock AS `inStock` FROM
          Products p INNER JOIN Categories c ON c.CategoryID = p.CategoryID
          ORDER BY name.ProductName 
    errors: 1
    expression: >-
      Products.map(p=>{category:p.category.name,name:p.name,quantity:p.quantity,inStock:p.inStock}).sort(p=>p.name)
    completeExpression: >-
      Products.map(p=>{category:p.category.name,name:p.name,quantity:p.quantity,inStock:p.inStock}).sort(p=>p.name)
    model:
      category: string
      name: string
      quantity: string
      inStock: decimal
    parameters: []
    fields:
      - name: category
        type: string
      - name: name
        type: string
      - name: quantity
        type: string
      - name: inStock
        type: decimal
    executions:
      - datastore: mysql
        error: 'Error: Unknown column ''name.ProductName'' in ''order clause'''
  - name: query 8
    sentences:
      - datastore: mysql
        sentence: >-
          SELECT c.CategoryName AS `category`, p.ProductName AS `name`,
          p.QuantityPerUnit AS `quantity`, p.UnitsInStock AS `inStock` FROM
          Products p INNER JOIN Categories c ON c.CategoryID = p.CategoryID
          WHERE p.Discontinued <> FALSE ORDER BY category, name.ProductName
          desc 
    errors: 1
    expression: >-
      Products.filter(p=>(p.discontinued!==false)).map(p=>{category:p.category.name,name:p.name,quantity:p.quantity,inStock:p.inStock}).sort(p=>[p.category,desc(p.name)])
    completeExpression: >-
      Products.filter(p=>(p.discontinued!==false)).map(p=>{category:p.category.name,name:p.name,quantity:p.quantity,inStock:p.inStock}).sort(p=>[p.category,desc(p.name)])
    model:
      category: string
      name: string
      quantity: string
      inStock: decimal
    parameters: []
    fields:
      - name: category
        type: string
      - name: name
        type: string
      - name: quantity
        type: string
      - name: inStock
        type: decimal
    executions:
      - datastore: mysql
        error: 'Error: Unknown column ''name.ProductName'' in ''order clause'''
  - name: query 9
    data: b
    sentences:
      - datastore: mysql
        sentence: >-
          SELECT c.CategoryName AS `category`, p.ProductName AS `product`,
          o.UnitPrice AS `unitPrice`, o.Quantity AS `quantity` FROM OrderDetails
          o INNER JOIN Orders o1 ON o1.OrderID = o.OrderID INNER JOIN Products p
          ON p.ProductID = o.ProductID INNER JOIN Categories c ON c.CategoryID =
          p.CategoryID WHERE (o1.ShippedDate BETWEEN ? AND ? AND o.UnitPrice >
          ?) ORDER BY category, product 
    errors: 1
    expression: >-
      OrderDetails.filter(p=>(between(p.order.shippedDate,from,to)&&(p.unitPrice>minValue))).map(p=>{category:p.product.category.name,product:p.product.name,unitPrice:p.unitPrice,quantity:p.quantity}).sort(p=>[p.category,p.product])
    completeExpression: >-
      OrderDetails.filter(p=>(between(p.order.shippedDate,from,to)&&(p.unitPrice>minValue))).map(p=>{category:p.product.category.name,product:p.product.name,unitPrice:p.unitPrice,quantity:p.quantity}).sort(p=>[p.category,p.product])
    model:
      category: string
      product: string
      unitPrice: decimal
      quantity: decimal
    parameters:
      - name: from
        type: datetime
        value: '1997-01-01 00:00:00'
      - name: to
        type: datetime
        value: '1997-12-31 00:00:00'
      - name: minValue
        type: decimal
        value: 10
    fields:
      - name: category
        type: string
      - name: product
        type: string
      - name: unitPrice
        type: decimal
      - name: quantity
        type: decimal
    executions:
      - datastore: mysql
        error: 'Error: Table ''northwind.OrderDetails'' doesn''t exist'
  - name: query 10
    sentences:
      - datastore: mysql
        sentence: >-
          SELECT o.OrderID AS `orderId`, SUM(((o.UnitPrice * (o.Quantity * (1 -
          (o.Discount / 100)))) * 100)) AS `subTotal` FROM OrderDetails o  GROUP
          BY o.OrderID ORDER BY orderId.OrderID 
    errors: 1
    expression: >-
      OrderDetails.map(p=>{orderId:p.orderId,subTotal:sum(((p.unitPrice*(p.quantity*(1-(p.discount/100))))*100))}).sort(p=>p.orderId)
    completeExpression: >-
      OrderDetails.map(p=>{orderId:p.orderId,subTotal:sum(((p.unitPrice*(p.quantity*(1-(p.discount/100))))*100))}).sort(p=>p.orderId)
    model:
      orderId: integer
      subTotal: any
    parameters: []
    fields:
      - name: orderId
        type: integer
      - name: subTotal
        type: any
    executions:
      - datastore: mysql
        error: 'Error: Table ''northwind.OrderDetails'' doesn''t exist'
  - name: query 11
    sentences:
      - datastore: mysql
        sentence: >-
          SELECT p.ProductID AS `id`, p.ProductName AS `name`, p.SupplierID AS
          `supplierId`, p.CategoryID AS `categoryId`, p.QuantityPerUnit AS
          `quantity`, p.UnitPrice AS `price`, p.UnitsInStock AS `inStock`,
          p.UnitsOnOrder AS `onOrder`, p.ReorderLevel AS `reorderLevel`,
          p.Discontinued AS `discontinued` FROM Products p  LIMIT 0,1  
    errors: 0
    expression: Products.page(1,1)
    completeExpression: >-
      Products.map(p=>{id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued}).page(1,1)
    model:
      id: integer
      name: string
      supplierId: integer
      categoryId: integer
      quantity: string
      price: decimal
      inStock: decimal
      onOrder: decimal
      reorderLevel: decimal
      discontinued: boolean
    parameters: []
    fields:
      - name: id
        type: integer
      - name: name
        type: string
      - name: supplierId
        type: integer
      - name: categoryId
        type: integer
      - name: quantity
        type: string
      - name: price
        type: decimal
      - name: inStock
        type: decimal
      - name: onOrder
        type: decimal
      - name: reorderLevel
        type: decimal
      - name: discontinued
        type: boolean
    executions:
      - datastore: mysql
    result: []
  - name: query 12
    sentences:
      - datastore: mysql
        sentence: >-
          SELECT p.ProductID AS `id`, p.ProductName AS `name`, p.SupplierID AS
          `supplierId`, p.CategoryID AS `categoryId`, p.QuantityPerUnit AS
          `quantity`, p.UnitPrice AS `price`, p.UnitsInStock AS `inStock`,
          p.UnitsOnOrder AS `onOrder`, p.ReorderLevel AS `reorderLevel`,
          p.Discontinued AS `discontinued` FROM Products p  ORDER BY
          id.ProductID LIMIT 0,1  
    errors: 1
    expression: Products.first(p=>p)
    completeExpression: >-
      Products.sort(p=>p.id).page(1,1).map(p=>{id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued})
    model:
      id: integer
      name: string
      supplierId: integer
      categoryId: integer
      quantity: string
      price: decimal
      inStock: decimal
      onOrder: decimal
      reorderLevel: decimal
      discontinued: boolean
    parameters: []
    fields:
      - name: id
        type: integer
      - name: name
        type: string
      - name: supplierId
        type: integer
      - name: categoryId
        type: integer
      - name: quantity
        type: string
      - name: price
        type: decimal
      - name: inStock
        type: decimal
      - name: onOrder
        type: decimal
      - name: reorderLevel
        type: decimal
      - name: discontinued
        type: boolean
    executions:
      - datastore: mysql
        error: 'Error: Unknown column ''id.ProductID'' in ''order clause'''
  - name: query 13
    sentences:
      - datastore: mysql
        sentence: >-
          SELECT p.ProductID AS `id`, p.ProductName AS `name`, p.SupplierID AS
          `supplierId`, p.CategoryID AS `categoryId`, p.QuantityPerUnit AS
          `quantity`, p.UnitPrice AS `price`, p.UnitsInStock AS `inStock`,
          p.UnitsOnOrder AS `onOrder`, p.ReorderLevel AS `reorderLevel`,
          p.Discontinued AS `discontinued` FROM Products p  ORDER BY
          id.ProductID desc LIMIT 0,1  
    errors: 1
    expression: Products.last(p=>p)
    completeExpression: >-
      Products.sort(p=>desc(p.id)).page(1,1).map(p=>{id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued})
    model:
      id: integer
      name: string
      supplierId: integer
      categoryId: integer
      quantity: string
      price: decimal
      inStock: decimal
      onOrder: decimal
      reorderLevel: decimal
      discontinued: boolean
    parameters: []
    fields:
      - name: id
        type: integer
      - name: name
        type: string
      - name: supplierId
        type: integer
      - name: categoryId
        type: integer
      - name: quantity
        type: string
      - name: price
        type: decimal
      - name: inStock
        type: decimal
      - name: onOrder
        type: decimal
      - name: reorderLevel
        type: decimal
      - name: discontinued
        type: boolean
    executions:
      - datastore: mysql
        error: 'Error: Unknown column ''id.ProductID'' in ''order clause'''
  - name: query 14
    sentences:
      - datastore: mysql
        sentence: >-
          SELECT p.ProductID AS `id`, p.ProductName AS `name`, p.SupplierID AS
          `supplierId`, p.CategoryID AS `categoryId`, p.QuantityPerUnit AS
          `quantity`, p.UnitPrice AS `price`, p.UnitsInStock AS `inStock`,
          p.UnitsOnOrder AS `onOrder`, p.ReorderLevel AS `reorderLevel`,
          p.Discontinued AS `discontinued` FROM Products p  LIMIT 0,1  
    errors: 0
    expression: Products.take(p=>p)
    completeExpression: >-
      Products.page(1,1).map(p=>{id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued})
    model:
      id: integer
      name: string
      supplierId: integer
      categoryId: integer
      quantity: string
      price: decimal
      inStock: decimal
      onOrder: decimal
      reorderLevel: decimal
      discontinued: boolean
    parameters: []
    fields:
      - name: id
        type: integer
      - name: name
        type: string
      - name: supplierId
        type: integer
      - name: categoryId
        type: integer
      - name: quantity
        type: string
      - name: price
        type: decimal
      - name: inStock
        type: decimal
      - name: onOrder
        type: decimal
      - name: reorderLevel
        type: decimal
      - name: discontinued
        type: boolean
    executions:
      - datastore: mysql
    result: []
  - name: query 15
    sentences:
      - datastore: mysql
        sentence: >-
          SELECT p.ProductID AS `id`, p.ProductName AS `name`, p.SupplierID AS
          `supplierId`, p.CategoryID AS `categoryId`, p.QuantityPerUnit AS
          `quantity`, p.UnitPrice AS `price`, p.UnitsInStock AS `inStock`,
          p.UnitsOnOrder AS `onOrder`, p.ReorderLevel AS `reorderLevel`,
          p.Discontinued AS `discontinued` FROM Products p  LIMIT 0,1  
    errors: 0
    expression: Products.page(1,1)
    completeExpression: >-
      Products.map(p=>{id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued}).page(1,1)
    model:
      id: integer
      name: string
      supplierId: integer
      categoryId: integer
      quantity: string
      price: decimal
      inStock: decimal
      onOrder: decimal
      reorderLevel: decimal
      discontinued: boolean
    parameters: []
    fields:
      - name: id
        type: integer
      - name: name
        type: string
      - name: supplierId
        type: integer
      - name: categoryId
        type: integer
      - name: quantity
        type: string
      - name: price
        type: decimal
      - name: inStock
        type: decimal
      - name: onOrder
        type: decimal
      - name: reorderLevel
        type: decimal
      - name: discontinued
        type: boolean
    executions:
      - datastore: mysql
    result: []
  - name: query 16
    sentences:
      - datastore: mysql
        sentence: >-
          SELECT c.CategoryName AS `category`, p.ProductName AS `name`,
          p.QuantityPerUnit AS `quantity`, p.UnitsInStock AS `inStock` FROM
          Products p INNER JOIN Categories c ON c.CategoryID = p.CategoryID
          ORDER BY p.ProductID LIMIT 0,1  
    errors: 0
    expression: >-
      Products.first(p=>{category:p.category.name,name:p.name,quantity:p.quantity,inStock:p.inStock})
    completeExpression: >-
      Products.sort(p=>p.id).page(1,1).map(p=>{category:p.category.name,name:p.name,quantity:p.quantity,inStock:p.inStock})
    model:
      category: string
      name: string
      quantity: string
      inStock: decimal
    parameters: []
    fields:
      - name: category
        type: string
      - name: name
        type: string
      - name: quantity
        type: string
      - name: inStock
        type: decimal
    executions:
      - datastore: mysql
    result: []
  - name: query 17
    sentences:
      - datastore: mysql
        sentence: >-
          SELECT p.ProductID AS `id`, p.ProductName AS `name`, p.SupplierID AS
          `supplierId`, p.CategoryID AS `categoryId`, p.QuantityPerUnit AS
          `quantity`, p.UnitPrice AS `price`, p.UnitsInStock AS `inStock`,
          p.UnitsOnOrder AS `onOrder`, p.ReorderLevel AS `reorderLevel`,
          p.Discontinued AS `discontinued` FROM Products p  WHERE p.Discontinued
          <> FALSE ORDER BY id.ProductID desc LIMIT 0,1  
    errors: 1
    expression: Products.filter(p=>(p.discontinued!==false)).last(p=>p)
    completeExpression: >-
      Products.filter(p=>(p.discontinued!==false)).sort(p=>desc(p.id)).page(1,1).map(p=>{id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued})
    model:
      id: integer
      name: string
      supplierId: integer
      categoryId: integer
      quantity: string
      price: decimal
      inStock: decimal
      onOrder: decimal
      reorderLevel: decimal
      discontinued: boolean
    parameters: []
    fields:
      - name: id
        type: integer
      - name: name
        type: string
      - name: supplierId
        type: integer
      - name: categoryId
        type: integer
      - name: quantity
        type: string
      - name: price
        type: decimal
      - name: inStock
        type: decimal
      - name: onOrder
        type: decimal
      - name: reorderLevel
        type: decimal
      - name: discontinued
        type: boolean
    executions:
      - datastore: mysql
        error: 'Error: Unknown column ''id.ProductID'' in ''order clause'''
  - name: query 18
    sentences:
      - datastore: mysql
        sentence: >-
          SELECT DISTINCT p.ProductID AS `id`, p.ProductName AS `name`,
          p.SupplierID AS `supplierId`, p.CategoryID AS `categoryId`,
          p.QuantityPerUnit AS `quantity`, p.UnitPrice AS `price`,
          p.UnitsInStock AS `inStock`, p.UnitsOnOrder AS `onOrder`,
          p.ReorderLevel AS `reorderLevel`, p.Discontinued AS `discontinued`
          FROM Products p  
    errors: 0
    expression: Products.distinct(p=>p)
    completeExpression: >-
      Products.map(p=>distinct({id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued}))
    model:
      id: integer
      name: string
      supplierId: integer
      categoryId: integer
      quantity: string
      price: decimal
      inStock: decimal
      onOrder: decimal
      reorderLevel: decimal
      discontinued: boolean
    parameters: []
    fields:
      - name: id
        type: integer
      - name: name
        type: string
      - name: supplierId
        type: integer
      - name: categoryId
        type: integer
      - name: quantity
        type: string
      - name: price
        type: decimal
      - name: inStock
        type: decimal
      - name: onOrder
        type: decimal
      - name: reorderLevel
        type: decimal
      - name: discontinued
        type: boolean
    executions:
      - datastore: mysql
    result: []
  - name: query 19
    data: a
    sentences:
      - datastore: mysql
        sentence: >-
          SELECT DISTINCT c.CategoryName AS `category_name` FROM Products p
          INNER JOIN Categories c ON c.CategoryID = p.CategoryID 
    errors: 0
    expression: Products.distinct(p=>p.category.name)
    completeExpression: Products.map(p=>distinct({category_name:p.category.name}))
    model:
      category_name: string
    parameters: []
    fields:
      - name: category_name
        type: string
    executions:
      - datastore: mysql
    result: []
  - name: query 20
    data: a
    sentences:
      - datastore: mysql
        sentence: >-
          SELECT DISTINCT p.QuantityPerUnit AS `quantity`, c.CategoryName AS
          `category` FROM Products p INNER JOIN Categories c ON c.CategoryID =
          p.CategoryID ORDER BY category 
    errors: 0
    expression: >-
      Products.distinct(p=>{quantity:p.quantity,category:p.category.name}).sort(p=>p.category)
    completeExpression: >-
      Products.map(p=>distinct({quantity:p.quantity,category:p.category.name})).sort(p=>p.category)
    model:
      quantity: string
      category: string
    parameters: []
    fields:
      - name: quantity
        type: string
      - name: category
        type: string
    executions:
      - datastore: mysql
    result: []
  - name: query 21
    data: a
    sentences:
      - datastore: mysql
        sentence: >-
          SELECT DISTINCT c.CategoryName AS `category` FROM Products p INNER
          JOIN Categories c ON c.CategoryID = p.CategoryID ORDER BY category 
    errors: 0
    expression: Products.distinct(p=>{category:p.category.name}).sort(p=>p.category)
    completeExpression: Products.map(p=>distinct({category:p.category.name})).sort(p=>p.category)
    model:
      category: string
    parameters: []
    fields:
      - name: category
        type: string
    executions:
      - datastore: mysql
    result: []
errors: 9
