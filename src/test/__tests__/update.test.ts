import { orm,Helper } from '../../lib'
beforeAll(async () => {
	require('dotenv').config({ path: './test.env' })
	await orm.init()
})
describe('Complete Expression', () => {
	test('update 1', () => {
		const source = 'Orders.update()'
		const expected = 'Orders.filter(p=>(p.id==obj.id)).update({customerId:customerId,employeeId:employeeId,orderDate:orderDate,requiredDate:requiredDate,shippedDate:shippedDate,shipViaId:shipViaId,freight:freight,name:name,address:address,city:city,region:region,postalCode:postalCode,country:country})'
		const target = orm.normalize(source)
		expect(expected).toBe(target)
	})
	test('update 2', () => {
		const source = 'Orders.update(entity)'
		const expected = 'Orders.filter(p=>(p.id==obj.id)).update({customerId:entity.customerId,employeeId:entity.employeeId,orderDate:entity.orderDate,requiredDate:entity.requiredDate,shippedDate:entity.shippedDate,shipViaId:entity.shipViaId,freight:entity.freight,name:entity.name,address:entity.address,city:entity.city,region:entity.region,postalCode:entity.postalCode,country:entity.country})'
		const target = orm.normalize(source)
		expect(expected).toBe(target)
	})
	test('update 3', () => {
		const source = 'Orders.updateAll(=>{postalCode:postalCode})'
		const expected = 'Orders.update(=>{postalCode:postalCode})'
		const target = orm.normalize(source)
		expect(expected).toBe(target)
	})
	test('update 4', () => {
		const source = 'Orders.update(p=>{name:entity.name}).filter(p=>(p.id===entity.id))'
		const expected = 'Orders.update(p=>{name:entity.name}).filter(p=>(p.id===entity.id))'
		const target = orm.normalize(source)
		expect(expected).toBe(target)
	})
	test('update 5', () => {
		const source = 'Orders.update(=>{name:entity.name}).include(p=>p.details).filter(p=>(p.id===entity.id))'
		const expected = 'Orders.update(=>{name:entity.name}).include(p=>p.details.filter(p=>((p.orderId==obj.orderId)&&(p.productId==obj.productId))).update({orderId:orderId,productId:productId,unitPrice:unitPrice,quantity:quantity,discount:discount})).filter(p=>(p.id===entity.id))'
		const target = orm.normalize(source)
		expect(expected).toBe(target)
	})
	test('update 6', () => {
		const source = 'Orders.update(=>{name:entity.name}).include(p=>p.details.update(p=>p)).filter(p=>(p.id===entity.id))'
		const expected = 'Orders.update(=>{name:entity.name}).include(p=>p.details.filter(p=>((p.orderId==orderId)&&(p.productId==productId))).update(p=>{unitPrice:p.unitPrice,quantity:p.quantity,discount:p.discount})).filter(p=>(p.id===entity.id))'
		const target = orm.normalize(source)
		expect(expected).toBe(target)
	})
	test('update 7', () => {
		const source = 'Orders.update(=>{name:entity.name}).include(p=>p.details.update(p=>{unitPrice:p.unitPrice,productId:p.productId})).filter(p=>(p.id===entity.id))'
		const expected = 'Orders.update(=>{name:entity.name}).include(p=>p.details.filter(p=>((p.orderId==orderId)&&(p.productId==productId))).update(p=>{unitPrice:p.unitPrice,productId:p.productId})).filter(p=>(p.id===entity.id))'
		const target = orm.normalize(source)
		expect(expected).toBe(target)
	})
	test('update 8', () => {
		const source = 'Orders.update().include(p=>p.details)'
		const expected = 'Orders.filter(p=>(p.id==obj.id)).update({customerId:customerId,employeeId:employeeId,orderDate:orderDate,requiredDate:requiredDate,shippedDate:shippedDate,shipViaId:shipViaId,freight:freight,name:name,address:address,city:city,region:region,postalCode:postalCode,country:country}).include(p=>p.details.filter(p=>((p.orderId==obj.orderId)&&(p.productId==obj.productId))).update({orderId:orderId,productId:productId,unitPrice:unitPrice,quantity:quantity,discount:discount}))'
		const target = orm.normalize(source)
		expect(expected).toBe(target)
	})
	test('update 9', () => {
		const source = 'Customers.update().include(p=>p.orders.include(p=>p.details))'
		const expected = 'Customers.filter(p=>(p.id==obj.id)).update({id:id,name:name,contact:contact,phone:phone,address:address,city:city,region:region,postalCode:postalCode,country:country}).include(p=>p.orders.include(p=>p.details.filter(p=>((p.orderId==obj.orderId)&&(p.productId==obj.productId))).update({orderId:orderId,productId:productId,unitPrice:unitPrice,quantity:quantity,discount:discount})).filter(p=>(p.id==obj.id)).update({customerId:customerId,employeeId:employeeId,orderDate:orderDate,requiredDate:requiredDate,shippedDate:shippedDate,shipViaId:shipViaId,freight:freight,name:name,address:address,city:city,region:region,postalCode:postalCode,country:country}))'
		const target = orm.normalize(source)
		expect(expected).toBe(target)
	})
})
describe('Metadata', () => {
	test('update 1', async () => {
		const expression = 'Orders.update()'
		const modelExpected :any= [{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"datetime"},{"name":"shippedDate","type":"datetime"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"}]
		const parametersExpected:any = [{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"datetime"},{"name":"shippedDate","type":"datetime"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"},{"name":"obj.id","type":"integer"}]
		const metadataExpected :any= {"name":"update","classtype":"Sentence","children":[{"name":"filter","classtype":"Filter","children":[{"name":"==","classtype":"Operator","children":[{"name":"id","classtype":"Field","children":[],"type":"integer","entity":"Orders","alias":"o"},{"name":"obj.id","classtype":"Variable","children":[],"type":"integer","number":14}],"type":"any"}],"type":"any"},{"name":"Orders.o","classtype":"From","children":[],"type":"any"},{"name":"Orders.o","classtype":"Update","children":[{"name":"obj","classtype":"Obj","children":[{"name":"customerId","classtype":"KeyValue","children":[{"name":"customerId","classtype":"Variable","children":[],"type":"string","number":1}],"type":"any","property":"customerId"},{"name":"employeeId","classtype":"KeyValue","children":[{"name":"employeeId","classtype":"Variable","children":[],"type":"integer","number":2}],"type":"any","property":"employeeId"},{"name":"orderDate","classtype":"KeyValue","children":[{"name":"orderDate","classtype":"Variable","children":[],"type":"datetime","number":3}],"type":"any","property":"orderDate"},{"name":"requiredDate","classtype":"KeyValue","children":[{"name":"requiredDate","classtype":"Variable","children":[],"type":"datetime","number":4}],"type":"any","property":"requiredDate"},{"name":"shippedDate","classtype":"KeyValue","children":[{"name":"shippedDate","classtype":"Variable","children":[],"type":"datetime","number":5}],"type":"any","property":"shippedDate"},{"name":"shipViaId","classtype":"KeyValue","children":[{"name":"shipViaId","classtype":"Variable","children":[],"type":"integer","number":6}],"type":"any","property":"shipViaId"},{"name":"freight","classtype":"KeyValue","children":[{"name":"freight","classtype":"Variable","children":[],"type":"decimal","number":7}],"type":"any","property":"freight"},{"name":"name","classtype":"KeyValue","children":[{"name":"name","classtype":"Variable","children":[],"type":"string","number":8}],"type":"any","property":"name"},{"name":"address","classtype":"KeyValue","children":[{"name":"address","classtype":"Variable","children":[],"type":"string","number":9}],"type":"any","property":"address"},{"name":"city","classtype":"KeyValue","children":[{"name":"city","classtype":"Variable","children":[],"type":"string","number":10}],"type":"any","property":"city"},{"name":"region","classtype":"KeyValue","children":[{"name":"region","classtype":"Variable","children":[],"type":"string","number":11}],"type":"any","property":"region"},{"name":"postalCode","classtype":"KeyValue","children":[{"name":"postalCode","classtype":"Variable","children":[],"type":"string","number":12}],"type":"any","property":"postalCode"},{"name":"country","classtype":"KeyValue","children":[{"name":"country","classtype":"Variable","children":[],"type":"string","number":13}],"type":"any","property":"country"}],"type":"object"}],"type":"any"}],"type":"any","columns":[{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"datetime"},{"name":"shippedDate","type":"datetime"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"}],"parameters":[{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"datetime"},{"name":"shippedDate","type":"datetime"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"},{"name":"obj.id","type":"integer"}],"entity":"Orders","constraints":[{"message":"Cannot be null property customerId in entity Orders","condition":"isNotNull(customerId)"},{"message":"Cannot be null property employeeId in entity Orders","condition":"isNotNull(employeeId)"}]}
		const constraintsExpected :any= {"entity":"Orders","constraints":[{"message":"Cannot be null property customerId in entity Orders","condition":"isNotNull(customerId)"},{"message":"Cannot be null property employeeId in entity Orders","condition":"isNotNull(employeeId)"}]}
		const model = orm.model(expression)
		const parameters = orm.parameters(expression)
		const constraints = orm.constraints(expression)
		const metadata = orm.metadata(expression)
		expect(modelExpected).toStrictEqual(model)
		expect(metadataExpected.columns).toStrictEqual(metadata.columns)
		expect(parametersExpected).toStrictEqual(parameters)
		expect(constraintsExpected).toStrictEqual(constraints)
	})
	test('update 2', async () => {
		const expression = 'Orders.update(entity)'
		const modelExpected :any= [{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"datetime"},{"name":"shippedDate","type":"datetime"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"}]
		const parametersExpected:any = [{"name":"entity.customerId","type":"string"},{"name":"entity.employeeId","type":"integer"},{"name":"entity.orderDate","type":"datetime"},{"name":"entity.requiredDate","type":"datetime"},{"name":"entity.shippedDate","type":"datetime"},{"name":"entity.shipViaId","type":"integer"},{"name":"entity.freight","type":"decimal"},{"name":"entity.name","type":"string"},{"name":"entity.address","type":"string"},{"name":"entity.city","type":"string"},{"name":"entity.region","type":"string"},{"name":"entity.postalCode","type":"string"},{"name":"entity.country","type":"string"},{"name":"obj.id","type":"integer"}]
		const metadataExpected :any= {"name":"update","classtype":"Sentence","children":[{"name":"filter","classtype":"Filter","children":[{"name":"==","classtype":"Operator","children":[{"name":"id","classtype":"Field","children":[],"type":"integer","entity":"Orders","alias":"o"},{"name":"obj.id","classtype":"Variable","children":[],"type":"integer","number":14}],"type":"any"}],"type":"any"},{"name":"Orders.o","classtype":"From","children":[],"type":"any"},{"name":"Orders.o","classtype":"Update","children":[{"name":"obj","classtype":"Obj","children":[{"name":"customerId","classtype":"KeyValue","children":[{"name":"entity.customerId","classtype":"Variable","children":[],"type":"string","number":1}],"type":"any","property":"customerId"},{"name":"employeeId","classtype":"KeyValue","children":[{"name":"entity.employeeId","classtype":"Variable","children":[],"type":"integer","number":2}],"type":"any","property":"employeeId"},{"name":"orderDate","classtype":"KeyValue","children":[{"name":"entity.orderDate","classtype":"Variable","children":[],"type":"datetime","number":3}],"type":"any","property":"orderDate"},{"name":"requiredDate","classtype":"KeyValue","children":[{"name":"entity.requiredDate","classtype":"Variable","children":[],"type":"datetime","number":4}],"type":"any","property":"requiredDate"},{"name":"shippedDate","classtype":"KeyValue","children":[{"name":"entity.shippedDate","classtype":"Variable","children":[],"type":"datetime","number":5}],"type":"any","property":"shippedDate"},{"name":"shipViaId","classtype":"KeyValue","children":[{"name":"entity.shipViaId","classtype":"Variable","children":[],"type":"integer","number":6}],"type":"any","property":"shipViaId"},{"name":"freight","classtype":"KeyValue","children":[{"name":"entity.freight","classtype":"Variable","children":[],"type":"decimal","number":7}],"type":"any","property":"freight"},{"name":"name","classtype":"KeyValue","children":[{"name":"entity.name","classtype":"Variable","children":[],"type":"string","number":8}],"type":"any","property":"name"},{"name":"address","classtype":"KeyValue","children":[{"name":"entity.address","classtype":"Variable","children":[],"type":"string","number":9}],"type":"any","property":"address"},{"name":"city","classtype":"KeyValue","children":[{"name":"entity.city","classtype":"Variable","children":[],"type":"string","number":10}],"type":"any","property":"city"},{"name":"region","classtype":"KeyValue","children":[{"name":"entity.region","classtype":"Variable","children":[],"type":"string","number":11}],"type":"any","property":"region"},{"name":"postalCode","classtype":"KeyValue","children":[{"name":"entity.postalCode","classtype":"Variable","children":[],"type":"string","number":12}],"type":"any","property":"postalCode"},{"name":"country","classtype":"KeyValue","children":[{"name":"entity.country","classtype":"Variable","children":[],"type":"string","number":13}],"type":"any","property":"country"}],"type":"object"}],"type":"any"}],"type":"any","columns":[{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"datetime"},{"name":"shippedDate","type":"datetime"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"}],"parameters":[{"name":"entity.customerId","type":"string"},{"name":"entity.employeeId","type":"integer"},{"name":"entity.orderDate","type":"datetime"},{"name":"entity.requiredDate","type":"datetime"},{"name":"entity.shippedDate","type":"datetime"},{"name":"entity.shipViaId","type":"integer"},{"name":"entity.freight","type":"decimal"},{"name":"entity.name","type":"string"},{"name":"entity.address","type":"string"},{"name":"entity.city","type":"string"},{"name":"entity.region","type":"string"},{"name":"entity.postalCode","type":"string"},{"name":"entity.country","type":"string"},{"name":"obj.id","type":"integer"}],"entity":"Orders","constraints":[]}
		const constraintsExpected :any= {"entity":"Orders","constraints":[]}
		const model = orm.model(expression)
		const parameters = orm.parameters(expression)
		const constraints = orm.constraints(expression)
		const metadata = orm.metadata(expression)
		expect(modelExpected).toStrictEqual(model)
		expect(metadataExpected.columns).toStrictEqual(metadata.columns)
		expect(parametersExpected).toStrictEqual(parameters)
		expect(constraintsExpected).toStrictEqual(constraints)
	})
	test('update 3', async () => {
		const expression = 'Orders.updateAll(=>{postalCode:postalCode})'
		const modelExpected :any= [{"name":"postalCode","type":"string"}]
		const parametersExpected:any = [{"name":"postalCode","type":"string"}]
		const metadataExpected :any= {"name":"update","classtype":"Sentence","children":[{"name":"Orders.o","classtype":"From","children":[],"type":"any"},{"name":"Orders.o","classtype":"Update","children":[{"name":"obj","classtype":"Obj","children":[{"name":"postalCode","classtype":"KeyValue","children":[{"name":"postalCode","classtype":"Variable","children":[],"type":"string","number":1}],"type":"any","property":"postalCode"}],"type":"object"}],"type":"any"}],"type":"any","columns":[{"name":"postalCode","type":"string"}],"parameters":[{"name":"postalCode","type":"string"}],"entity":"Orders","constraints":[]}
		const constraintsExpected :any= {"entity":"Orders","constraints":[]}
		const model = orm.model(expression)
		const parameters = orm.parameters(expression)
		const constraints = orm.constraints(expression)
		const metadata = orm.metadata(expression)
		expect(modelExpected).toStrictEqual(model)
		expect(metadataExpected.columns).toStrictEqual(metadata.columns)
		expect(parametersExpected).toStrictEqual(parameters)
		expect(constraintsExpected).toStrictEqual(constraints)
	})
	test('update 4', async () => {
		const expression = 'Orders.update(p=>{name:entity.name}).filter(p=>(p.id===entity.id))'
		const modelExpected :any= [{"name":"name","type":"string"}]
		const parametersExpected:any = [{"name":"entity.name","type":"string"},{"name":"entity.id","type":"integer"}]
		const metadataExpected :any= {"name":"update","classtype":"Sentence","children":[{"name":"filter","classtype":"Filter","children":[{"name":"===","classtype":"Operator","children":[{"name":"id","classtype":"Field","children":[],"type":"integer","entity":"Orders","alias":"o"},{"name":"entity.id","classtype":"Variable","children":[],"type":"integer","number":2}],"type":"any"}],"type":"any"},{"name":"Orders.o","classtype":"From","children":[],"type":"any"},{"name":"Orders.o","classtype":"Update","children":[{"name":"obj","classtype":"Obj","children":[{"name":"name","classtype":"KeyValue","children":[{"name":"entity.name","classtype":"Variable","children":[],"type":"string","number":1}],"type":"any","property":"name"}],"type":"object"}],"type":"any"}],"type":"any","columns":[{"name":"name","type":"string"}],"parameters":[{"name":"entity.name","type":"string"},{"name":"entity.id","type":"integer"}],"entity":"Orders","constraints":[]}
		const constraintsExpected :any= {"entity":"Orders","constraints":[]}
		const model = orm.model(expression)
		const parameters = orm.parameters(expression)
		const constraints = orm.constraints(expression)
		const metadata = orm.metadata(expression)
		expect(modelExpected).toStrictEqual(model)
		expect(metadataExpected.columns).toStrictEqual(metadata.columns)
		expect(parametersExpected).toStrictEqual(parameters)
		expect(constraintsExpected).toStrictEqual(constraints)
	})
	test('update 5', async () => {
		const expression = 'Orders.update(=>{name:entity.name}).include(p=>p.details).filter(p=>(p.id===entity.id))'
		const modelExpected :any= [{"name":"name","type":"string"},{"name":"details","type":"OrderDetails[]","childs":[{"name":"orderId","type":"integer"},{"name":"productId","type":"integer"},{"name":"unitPrice","type":"decimal"},{"name":"quantity","type":"decimal"},{"name":"discount","type":"decimal"}]}]
		const parametersExpected:any = [{"name":"entity.name","type":"string"},{"name":"entity.id","type":"integer"},{"name":"details","type":"OrderDetails","childs":[{"name":"orderId","type":"integer"},{"name":"productId","type":"integer"},{"name":"unitPrice","type":"decimal"},{"name":"quantity","type":"decimal"},{"name":"discount","type":"decimal"},{"name":"obj.orderId","type":"integer"},{"name":"obj.productId","type":"integer"}]}]
		const metadataExpected :any= {"name":"update","classtype":"Sentence","children":[{"name":"filter","classtype":"Filter","children":[{"name":"===","classtype":"Operator","children":[{"name":"id","classtype":"Field","children":[],"type":"integer","entity":"Orders","alias":"o"},{"name":"entity.id","classtype":"Variable","children":[],"type":"integer","number":2}],"type":"any"}],"type":"any"},{"name":"Orders.o","classtype":"From","children":[],"type":"any"},{"name":"Orders.o","classtype":"Update","children":[{"name":"obj","classtype":"Obj","children":[{"name":"name","classtype":"KeyValue","children":[{"name":"entity.name","classtype":"Variable","children":[],"type":"string","number":1}],"type":"any","property":"name"}],"type":"object"}],"type":"any"},{"name":"details","classtype":"SentenceInclude","children":[{"name":"update","classtype":"Sentence","children":[{"name":"filter","classtype":"Filter","children":[{"name":"&&","classtype":"Operator","children":[{"name":"==","classtype":"Operator","children":[{"name":"orderId","classtype":"Field","children":[],"type":"integer","entity":"OrderDetails","alias":"o1"},{"name":"obj.orderId","classtype":"Variable","children":[],"type":"integer","number":6}],"type":"any"},{"name":"==","classtype":"Operator","children":[{"name":"productId","classtype":"Field","children":[],"type":"integer","entity":"OrderDetails","alias":"o1"},{"name":"obj.productId","classtype":"Variable","children":[],"type":"integer","number":7}],"type":"any"}],"type":"any"}],"type":"any"},{"name":"OrderDetails.o1","classtype":"From","children":[],"type":"any"},{"name":"OrderDetails.o1","classtype":"Update","children":[{"name":"obj","classtype":"Obj","children":[{"name":"orderId","classtype":"KeyValue","children":[{"name":"orderId","classtype":"Variable","children":[],"type":"integer","number":1}],"type":"any","property":"orderId"},{"name":"productId","classtype":"KeyValue","children":[{"name":"productId","classtype":"Variable","children":[],"type":"integer","number":2}],"type":"any","property":"productId"},{"name":"unitPrice","classtype":"KeyValue","children":[{"name":"unitPrice","classtype":"Variable","children":[],"type":"decimal","number":3}],"type":"any","property":"unitPrice"},{"name":"quantity","classtype":"KeyValue","children":[{"name":"quantity","classtype":"Variable","children":[],"type":"decimal","number":4}],"type":"any","property":"quantity"},{"name":"discount","classtype":"KeyValue","children":[{"name":"discount","classtype":"Variable","children":[],"type":"decimal","number":5}],"type":"any","property":"discount"}],"type":"object"}],"type":"any"}],"type":"any","columns":[{"name":"orderId","type":"integer"},{"name":"productId","type":"integer"},{"name":"unitPrice","type":"decimal"},{"name":"quantity","type":"decimal"},{"name":"discount","type":"decimal"}],"parameters":[{"name":"orderId","type":"integer"},{"name":"productId","type":"integer"},{"name":"unitPrice","type":"decimal"},{"name":"quantity","type":"decimal"},{"name":"discount","type":"decimal"},{"name":"obj.orderId","type":"integer"},{"name":"obj.productId","type":"integer"}],"entity":"OrderDetails","constraints":[{"message":"Cannot be null property orderId in entity OrderDetails","condition":"isNotNull(orderId)"},{"message":"Cannot be null property productId in entity OrderDetails","condition":"isNotNull(productId)"}]}],"type":"any","relation":{"name":"details","type":"manyToOne","composite":true,"from":"id","entity":"OrderDetails","weak":true,"to":"orderId","target":"order"}}],"type":"any","columns":[{"name":"name","type":"string"}],"parameters":[{"name":"entity.name","type":"string"},{"name":"entity.id","type":"integer"}],"entity":"Orders","constraints":[]}
		const constraintsExpected :any= {"entity":"Orders","constraints":[],"childs":[{"entity":"OrderDetails","constraints":[{"message":"Cannot be null property orderId in entity OrderDetails","condition":"isNotNull(orderId)"},{"message":"Cannot be null property productId in entity OrderDetails","condition":"isNotNull(productId)"}]}]}
		const model = orm.model(expression)
		const parameters = orm.parameters(expression)
		const constraints = orm.constraints(expression)
		const metadata = orm.metadata(expression)
		expect(modelExpected).toStrictEqual(model)
		expect(metadataExpected.columns).toStrictEqual(metadata.columns)
		expect(parametersExpected).toStrictEqual(parameters)
		expect(constraintsExpected).toStrictEqual(constraints)
	})
	test('update 6', async () => {
		const expression = 'Orders.update(=>{name:entity.name}).include(p=>p.details.update(p=>p)).filter(p=>(p.id===entity.id))'
		const modelExpected :any= [{"name":"name","type":"string"},{"name":"details","type":"OrderDetails[]","childs":[{"name":"unitPrice","type":"decimal"},{"name":"quantity","type":"decimal"},{"name":"discount","type":"decimal"}]}]
		const parametersExpected:any = [{"name":"entity.name","type":"string"},{"name":"entity.id","type":"integer"},{"name":"details","type":"OrderDetails","childs":[{"name":"orderId","type":"integer"},{"name":"productId","type":"integer"}]}]
		const metadataExpected :any= {"name":"update","classtype":"Sentence","children":[{"name":"filter","classtype":"Filter","children":[{"name":"===","classtype":"Operator","children":[{"name":"id","classtype":"Field","children":[],"type":"integer","entity":"Orders","alias":"o"},{"name":"entity.id","classtype":"Variable","children":[],"type":"integer","number":2}],"type":"any"}],"type":"any"},{"name":"Orders.o","classtype":"From","children":[],"type":"any"},{"name":"Orders.o","classtype":"Update","children":[{"name":"obj","classtype":"Obj","children":[{"name":"name","classtype":"KeyValue","children":[{"name":"entity.name","classtype":"Variable","children":[],"type":"string","number":1}],"type":"any","property":"name"}],"type":"object"}],"type":"any"},{"name":"details","classtype":"SentenceInclude","children":[{"name":"update","classtype":"Sentence","children":[{"name":"filter","classtype":"Filter","children":[{"name":"&&","classtype":"Operator","children":[{"name":"==","classtype":"Operator","children":[{"name":"orderId","classtype":"Field","children":[],"type":"integer","entity":"OrderDetails","alias":"o1"},{"name":"orderId","classtype":"Variable","children":[],"type":"integer","number":1}],"type":"any"},{"name":"==","classtype":"Operator","children":[{"name":"productId","classtype":"Field","children":[],"type":"integer","entity":"OrderDetails","alias":"o1"},{"name":"productId","classtype":"Variable","children":[],"type":"integer","number":2}],"type":"any"}],"type":"any"}],"type":"any"},{"name":"OrderDetails.o1","classtype":"From","children":[],"type":"any"},{"name":"OrderDetails.o1","classtype":"Update","children":[{"name":"obj","classtype":"Obj","children":[{"name":"unitPrice","classtype":"KeyValue","children":[{"name":"unitPrice","classtype":"Field","children":[],"type":"decimal","entity":"OrderDetails","alias":"o1"}],"type":"any","property":"unitPrice"},{"name":"quantity","classtype":"KeyValue","children":[{"name":"quantity","classtype":"Field","children":[],"type":"decimal","entity":"OrderDetails","alias":"o1"}],"type":"any","property":"quantity"},{"name":"discount","classtype":"KeyValue","children":[{"name":"discount","classtype":"Field","children":[],"type":"decimal","entity":"OrderDetails","alias":"o1"}],"type":"any","property":"discount"}],"type":"object"}],"type":"any"}],"type":"any","columns":[{"name":"unitPrice","type":"decimal"},{"name":"quantity","type":"decimal"},{"name":"discount","type":"decimal"}],"parameters":[{"name":"orderId","type":"integer"},{"name":"productId","type":"integer"}],"entity":"OrderDetails","constraints":[{"message":"Cannot be null property orderId in entity OrderDetails","condition":"isNotNull(orderId)"},{"message":"Cannot be null property productId in entity OrderDetails","condition":"isNotNull(productId)"}]}],"type":"any","relation":{"name":"details","type":"manyToOne","composite":true,"from":"id","entity":"OrderDetails","weak":true,"to":"orderId","target":"order"}}],"type":"any","columns":[{"name":"name","type":"string"}],"parameters":[{"name":"entity.name","type":"string"},{"name":"entity.id","type":"integer"}],"entity":"Orders","constraints":[]}
		const constraintsExpected :any= {"entity":"Orders","constraints":[],"childs":[{"entity":"OrderDetails","constraints":[{"message":"Cannot be null property orderId in entity OrderDetails","condition":"isNotNull(orderId)"},{"message":"Cannot be null property productId in entity OrderDetails","condition":"isNotNull(productId)"}]}]}
		const model = orm.model(expression)
		const parameters = orm.parameters(expression)
		const constraints = orm.constraints(expression)
		const metadata = orm.metadata(expression)
		expect(modelExpected).toStrictEqual(model)
		expect(metadataExpected.columns).toStrictEqual(metadata.columns)
		expect(parametersExpected).toStrictEqual(parameters)
		expect(constraintsExpected).toStrictEqual(constraints)
	})
	test('update 7', async () => {
		const expression = 'Orders.update(=>{name:entity.name}).include(p=>p.details.update(p=>{unitPrice:p.unitPrice,productId:p.productId})).filter(p=>(p.id===entity.id))'
		const modelExpected :any= [{"name":"name","type":"string"},{"name":"details","type":"OrderDetails[]","childs":[{"name":"unitPrice","type":"decimal"},{"name":"productId","type":"integer"}]}]
		const parametersExpected:any = [{"name":"entity.name","type":"string"},{"name":"entity.id","type":"integer"},{"name":"details","type":"OrderDetails","childs":[{"name":"orderId","type":"integer"},{"name":"productId","type":"integer"}]}]
		const metadataExpected :any= {"name":"update","classtype":"Sentence","children":[{"name":"filter","classtype":"Filter","children":[{"name":"===","classtype":"Operator","children":[{"name":"id","classtype":"Field","children":[],"type":"integer","entity":"Orders","alias":"o"},{"name":"entity.id","classtype":"Variable","children":[],"type":"integer","number":2}],"type":"any"}],"type":"any"},{"name":"Orders.o","classtype":"From","children":[],"type":"any"},{"name":"Orders.o","classtype":"Update","children":[{"name":"obj","classtype":"Obj","children":[{"name":"name","classtype":"KeyValue","children":[{"name":"entity.name","classtype":"Variable","children":[],"type":"string","number":1}],"type":"any","property":"name"}],"type":"object"}],"type":"any"},{"name":"details","classtype":"SentenceInclude","children":[{"name":"update","classtype":"Sentence","children":[{"name":"filter","classtype":"Filter","children":[{"name":"&&","classtype":"Operator","children":[{"name":"==","classtype":"Operator","children":[{"name":"orderId","classtype":"Field","children":[],"type":"integer","entity":"OrderDetails","alias":"o1"},{"name":"orderId","classtype":"Variable","children":[],"type":"integer","number":1}],"type":"any"},{"name":"==","classtype":"Operator","children":[{"name":"productId","classtype":"Field","children":[],"type":"integer","entity":"OrderDetails","alias":"o1"},{"name":"productId","classtype":"Variable","children":[],"type":"integer","number":2}],"type":"any"}],"type":"any"}],"type":"any"},{"name":"OrderDetails.o1","classtype":"From","children":[],"type":"any"},{"name":"OrderDetails.o1","classtype":"Update","children":[{"name":"obj","classtype":"Obj","children":[{"name":"unitPrice","classtype":"KeyValue","children":[{"name":"unitPrice","classtype":"Field","children":[],"type":"decimal","entity":"OrderDetails","alias":"o1"}],"type":"any","property":"unitPrice"},{"name":"productId","classtype":"KeyValue","children":[{"name":"productId","classtype":"Field","children":[],"type":"integer","entity":"OrderDetails","alias":"o1"}],"type":"any","property":"productId"}],"type":"object"}],"type":"any"}],"type":"any","columns":[{"name":"unitPrice","type":"decimal"},{"name":"productId","type":"integer"}],"parameters":[{"name":"orderId","type":"integer"},{"name":"productId","type":"integer"}],"entity":"OrderDetails","constraints":[{"message":"Cannot be null property orderId in entity OrderDetails","condition":"isNotNull(orderId)"},{"message":"Cannot be null property productId in entity OrderDetails","condition":"isNotNull(productId)"}]}],"type":"any","relation":{"name":"details","type":"manyToOne","composite":true,"from":"id","entity":"OrderDetails","weak":true,"to":"orderId","target":"order"}}],"type":"any","columns":[{"name":"name","type":"string"}],"parameters":[{"name":"entity.name","type":"string"},{"name":"entity.id","type":"integer"}],"entity":"Orders","constraints":[]}
		const constraintsExpected :any= {"entity":"Orders","constraints":[],"childs":[{"entity":"OrderDetails","constraints":[{"message":"Cannot be null property orderId in entity OrderDetails","condition":"isNotNull(orderId)"},{"message":"Cannot be null property productId in entity OrderDetails","condition":"isNotNull(productId)"}]}]}
		const model = orm.model(expression)
		const parameters = orm.parameters(expression)
		const constraints = orm.constraints(expression)
		const metadata = orm.metadata(expression)
		expect(modelExpected).toStrictEqual(model)
		expect(metadataExpected.columns).toStrictEqual(metadata.columns)
		expect(parametersExpected).toStrictEqual(parameters)
		expect(constraintsExpected).toStrictEqual(constraints)
	})
	test('update 8', async () => {
		const expression = 'Orders.update().include(p=>p.details)'
		const modelExpected :any= [{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"datetime"},{"name":"shippedDate","type":"datetime"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"},{"name":"details","type":"OrderDetails[]","childs":[{"name":"orderId","type":"integer"},{"name":"productId","type":"integer"},{"name":"unitPrice","type":"decimal"},{"name":"quantity","type":"decimal"},{"name":"discount","type":"decimal"}]}]
		const parametersExpected:any = [{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"datetime"},{"name":"shippedDate","type":"datetime"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"},{"name":"obj.id","type":"integer"},{"name":"details","type":"OrderDetails","childs":[{"name":"orderId","type":"integer"},{"name":"productId","type":"integer"},{"name":"unitPrice","type":"decimal"},{"name":"quantity","type":"decimal"},{"name":"discount","type":"decimal"},{"name":"obj.orderId","type":"integer"},{"name":"obj.productId","type":"integer"}]}]
		const metadataExpected :any= {"name":"update","classtype":"Sentence","children":[{"name":"filter","classtype":"Filter","children":[{"name":"==","classtype":"Operator","children":[{"name":"id","classtype":"Field","children":[],"type":"integer","entity":"Orders","alias":"o"},{"name":"obj.id","classtype":"Variable","children":[],"type":"integer","number":14}],"type":"any"}],"type":"any"},{"name":"Orders.o","classtype":"From","children":[],"type":"any"},{"name":"Orders.o","classtype":"Update","children":[{"name":"obj","classtype":"Obj","children":[{"name":"customerId","classtype":"KeyValue","children":[{"name":"customerId","classtype":"Variable","children":[],"type":"string","number":1}],"type":"any","property":"customerId"},{"name":"employeeId","classtype":"KeyValue","children":[{"name":"employeeId","classtype":"Variable","children":[],"type":"integer","number":2}],"type":"any","property":"employeeId"},{"name":"orderDate","classtype":"KeyValue","children":[{"name":"orderDate","classtype":"Variable","children":[],"type":"datetime","number":3}],"type":"any","property":"orderDate"},{"name":"requiredDate","classtype":"KeyValue","children":[{"name":"requiredDate","classtype":"Variable","children":[],"type":"datetime","number":4}],"type":"any","property":"requiredDate"},{"name":"shippedDate","classtype":"KeyValue","children":[{"name":"shippedDate","classtype":"Variable","children":[],"type":"datetime","number":5}],"type":"any","property":"shippedDate"},{"name":"shipViaId","classtype":"KeyValue","children":[{"name":"shipViaId","classtype":"Variable","children":[],"type":"integer","number":6}],"type":"any","property":"shipViaId"},{"name":"freight","classtype":"KeyValue","children":[{"name":"freight","classtype":"Variable","children":[],"type":"decimal","number":7}],"type":"any","property":"freight"},{"name":"name","classtype":"KeyValue","children":[{"name":"name","classtype":"Variable","children":[],"type":"string","number":8}],"type":"any","property":"name"},{"name":"address","classtype":"KeyValue","children":[{"name":"address","classtype":"Variable","children":[],"type":"string","number":9}],"type":"any","property":"address"},{"name":"city","classtype":"KeyValue","children":[{"name":"city","classtype":"Variable","children":[],"type":"string","number":10}],"type":"any","property":"city"},{"name":"region","classtype":"KeyValue","children":[{"name":"region","classtype":"Variable","children":[],"type":"string","number":11}],"type":"any","property":"region"},{"name":"postalCode","classtype":"KeyValue","children":[{"name":"postalCode","classtype":"Variable","children":[],"type":"string","number":12}],"type":"any","property":"postalCode"},{"name":"country","classtype":"KeyValue","children":[{"name":"country","classtype":"Variable","children":[],"type":"string","number":13}],"type":"any","property":"country"}],"type":"object"}],"type":"any"},{"name":"details","classtype":"SentenceInclude","children":[{"name":"update","classtype":"Sentence","children":[{"name":"filter","classtype":"Filter","children":[{"name":"&&","classtype":"Operator","children":[{"name":"==","classtype":"Operator","children":[{"name":"orderId","classtype":"Field","children":[],"type":"integer","entity":"OrderDetails","alias":"o1"},{"name":"obj.orderId","classtype":"Variable","children":[],"type":"integer","number":6}],"type":"any"},{"name":"==","classtype":"Operator","children":[{"name":"productId","classtype":"Field","children":[],"type":"integer","entity":"OrderDetails","alias":"o1"},{"name":"obj.productId","classtype":"Variable","children":[],"type":"integer","number":7}],"type":"any"}],"type":"any"}],"type":"any"},{"name":"OrderDetails.o1","classtype":"From","children":[],"type":"any"},{"name":"OrderDetails.o1","classtype":"Update","children":[{"name":"obj","classtype":"Obj","children":[{"name":"orderId","classtype":"KeyValue","children":[{"name":"orderId","classtype":"Variable","children":[],"type":"integer","number":1}],"type":"any","property":"orderId"},{"name":"productId","classtype":"KeyValue","children":[{"name":"productId","classtype":"Variable","children":[],"type":"integer","number":2}],"type":"any","property":"productId"},{"name":"unitPrice","classtype":"KeyValue","children":[{"name":"unitPrice","classtype":"Variable","children":[],"type":"decimal","number":3}],"type":"any","property":"unitPrice"},{"name":"quantity","classtype":"KeyValue","children":[{"name":"quantity","classtype":"Variable","children":[],"type":"decimal","number":4}],"type":"any","property":"quantity"},{"name":"discount","classtype":"KeyValue","children":[{"name":"discount","classtype":"Variable","children":[],"type":"decimal","number":5}],"type":"any","property":"discount"}],"type":"object"}],"type":"any"}],"type":"any","columns":[{"name":"orderId","type":"integer"},{"name":"productId","type":"integer"},{"name":"unitPrice","type":"decimal"},{"name":"quantity","type":"decimal"},{"name":"discount","type":"decimal"}],"parameters":[{"name":"orderId","type":"integer"},{"name":"productId","type":"integer"},{"name":"unitPrice","type":"decimal"},{"name":"quantity","type":"decimal"},{"name":"discount","type":"decimal"},{"name":"obj.orderId","type":"integer"},{"name":"obj.productId","type":"integer"}],"entity":"OrderDetails","constraints":[{"message":"Cannot be null property orderId in entity OrderDetails","condition":"isNotNull(orderId)"},{"message":"Cannot be null property productId in entity OrderDetails","condition":"isNotNull(productId)"}]}],"type":"any","relation":{"name":"details","type":"manyToOne","composite":true,"from":"id","entity":"OrderDetails","weak":true,"to":"orderId","target":"order"}}],"type":"any","columns":[{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"datetime"},{"name":"shippedDate","type":"datetime"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"}],"parameters":[{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"datetime"},{"name":"shippedDate","type":"datetime"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"},{"name":"obj.id","type":"integer"}],"entity":"Orders","constraints":[{"message":"Cannot be null property customerId in entity Orders","condition":"isNotNull(customerId)"},{"message":"Cannot be null property employeeId in entity Orders","condition":"isNotNull(employeeId)"}]}
		const constraintsExpected :any= {"entity":"Orders","constraints":[{"message":"Cannot be null property customerId in entity Orders","condition":"isNotNull(customerId)"},{"message":"Cannot be null property employeeId in entity Orders","condition":"isNotNull(employeeId)"}],"childs":[{"entity":"OrderDetails","constraints":[{"message":"Cannot be null property orderId in entity OrderDetails","condition":"isNotNull(orderId)"},{"message":"Cannot be null property productId in entity OrderDetails","condition":"isNotNull(productId)"}]}]}
		const model = orm.model(expression)
		const parameters = orm.parameters(expression)
		const constraints = orm.constraints(expression)
		const metadata = orm.metadata(expression)
		expect(modelExpected).toStrictEqual(model)
		expect(metadataExpected.columns).toStrictEqual(metadata.columns)
		expect(parametersExpected).toStrictEqual(parameters)
		expect(constraintsExpected).toStrictEqual(constraints)
	})
	test('update 9', async () => {
		const expression = 'Customers.update().include(p=>p.orders.include(p=>p.details))'
		const modelExpected :any= [{"name":"id","type":"string"},{"name":"name","type":"string"},{"name":"contact","type":"string"},{"name":"phone","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"},{"name":"orders","type":"Orders[]","childs":[{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"datetime"},{"name":"shippedDate","type":"datetime"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"},{"name":"details","type":"OrderDetails[]","childs":[{"name":"orderId","type":"integer"},{"name":"productId","type":"integer"},{"name":"unitPrice","type":"decimal"},{"name":"quantity","type":"decimal"},{"name":"discount","type":"decimal"}]}]}]
		const parametersExpected:any = [{"name":"id","type":"string"},{"name":"name","type":"string"},{"name":"contact","type":"string"},{"name":"phone","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"},{"name":"obj.id","type":"string"},{"name":"orders","type":"Orders","childs":[{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"datetime"},{"name":"shippedDate","type":"datetime"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"},{"name":"obj.id","type":"integer"},{"name":"details","type":"OrderDetails","childs":[{"name":"orderId","type":"integer"},{"name":"productId","type":"integer"},{"name":"unitPrice","type":"decimal"},{"name":"quantity","type":"decimal"},{"name":"discount","type":"decimal"},{"name":"obj.orderId","type":"integer"},{"name":"obj.productId","type":"integer"}]}]}]
		const metadataExpected :any= {"name":"update","classtype":"Sentence","children":[{"name":"filter","classtype":"Filter","children":[{"name":"==","classtype":"Operator","children":[{"name":"id","classtype":"Field","children":[],"type":"string","entity":"Customers","alias":"c"},{"name":"obj.id","classtype":"Variable","children":[],"type":"string","number":10}],"type":"any"}],"type":"any"},{"name":"Customers.c","classtype":"From","children":[],"type":"any"},{"name":"Customers.c","classtype":"Update","children":[{"name":"obj","classtype":"Obj","children":[{"name":"id","classtype":"KeyValue","children":[{"name":"id","classtype":"Variable","children":[],"type":"string","number":1}],"type":"any","property":"id"},{"name":"name","classtype":"KeyValue","children":[{"name":"name","classtype":"Variable","children":[],"type":"string","number":2}],"type":"any","property":"name"},{"name":"contact","classtype":"KeyValue","children":[{"name":"contact","classtype":"Variable","children":[],"type":"string","number":3}],"type":"any","property":"contact"},{"name":"phone","classtype":"KeyValue","children":[{"name":"phone","classtype":"Variable","children":[],"type":"string","number":4}],"type":"any","property":"phone"},{"name":"address","classtype":"KeyValue","children":[{"name":"address","classtype":"Variable","children":[],"type":"string","number":5}],"type":"any","property":"address"},{"name":"city","classtype":"KeyValue","children":[{"name":"city","classtype":"Variable","children":[],"type":"string","number":6}],"type":"any","property":"city"},{"name":"region","classtype":"KeyValue","children":[{"name":"region","classtype":"Variable","children":[],"type":"string","number":7}],"type":"any","property":"region"},{"name":"postalCode","classtype":"KeyValue","children":[{"name":"postalCode","classtype":"Variable","children":[],"type":"string","number":8}],"type":"any","property":"postalCode"},{"name":"country","classtype":"KeyValue","children":[{"name":"country","classtype":"Variable","children":[],"type":"string","number":9}],"type":"any","property":"country"}],"type":"object"}],"type":"any"},{"name":"orders","classtype":"SentenceInclude","children":[{"name":"update","classtype":"Sentence","children":[{"name":"filter","classtype":"Filter","children":[{"name":"==","classtype":"Operator","children":[{"name":"id","classtype":"Field","children":[],"type":"integer","entity":"Orders","alias":"o"},{"name":"obj.id","classtype":"Variable","children":[],"type":"integer","number":14}],"type":"any"}],"type":"any"},{"name":"Orders.o","classtype":"From","children":[],"type":"any"},{"name":"Orders.o","classtype":"Update","children":[{"name":"obj","classtype":"Obj","children":[{"name":"customerId","classtype":"KeyValue","children":[{"name":"customerId","classtype":"Variable","children":[],"type":"string","number":1}],"type":"any","property":"customerId"},{"name":"employeeId","classtype":"KeyValue","children":[{"name":"employeeId","classtype":"Variable","children":[],"type":"integer","number":2}],"type":"any","property":"employeeId"},{"name":"orderDate","classtype":"KeyValue","children":[{"name":"orderDate","classtype":"Variable","children":[],"type":"datetime","number":3}],"type":"any","property":"orderDate"},{"name":"requiredDate","classtype":"KeyValue","children":[{"name":"requiredDate","classtype":"Variable","children":[],"type":"datetime","number":4}],"type":"any","property":"requiredDate"},{"name":"shippedDate","classtype":"KeyValue","children":[{"name":"shippedDate","classtype":"Variable","children":[],"type":"datetime","number":5}],"type":"any","property":"shippedDate"},{"name":"shipViaId","classtype":"KeyValue","children":[{"name":"shipViaId","classtype":"Variable","children":[],"type":"integer","number":6}],"type":"any","property":"shipViaId"},{"name":"freight","classtype":"KeyValue","children":[{"name":"freight","classtype":"Variable","children":[],"type":"decimal","number":7}],"type":"any","property":"freight"},{"name":"name","classtype":"KeyValue","children":[{"name":"name","classtype":"Variable","children":[],"type":"string","number":8}],"type":"any","property":"name"},{"name":"address","classtype":"KeyValue","children":[{"name":"address","classtype":"Variable","children":[],"type":"string","number":9}],"type":"any","property":"address"},{"name":"city","classtype":"KeyValue","children":[{"name":"city","classtype":"Variable","children":[],"type":"string","number":10}],"type":"any","property":"city"},{"name":"region","classtype":"KeyValue","children":[{"name":"region","classtype":"Variable","children":[],"type":"string","number":11}],"type":"any","property":"region"},{"name":"postalCode","classtype":"KeyValue","children":[{"name":"postalCode","classtype":"Variable","children":[],"type":"string","number":12}],"type":"any","property":"postalCode"},{"name":"country","classtype":"KeyValue","children":[{"name":"country","classtype":"Variable","children":[],"type":"string","number":13}],"type":"any","property":"country"}],"type":"object"}],"type":"any"},{"name":"details","classtype":"SentenceInclude","children":[{"name":"update","classtype":"Sentence","children":[{"name":"filter","classtype":"Filter","children":[{"name":"&&","classtype":"Operator","children":[{"name":"==","classtype":"Operator","children":[{"name":"orderId","classtype":"Field","children":[],"type":"integer","entity":"OrderDetails","alias":"o1"},{"name":"obj.orderId","classtype":"Variable","children":[],"type":"integer","number":6}],"type":"any"},{"name":"==","classtype":"Operator","children":[{"name":"productId","classtype":"Field","children":[],"type":"integer","entity":"OrderDetails","alias":"o1"},{"name":"obj.productId","classtype":"Variable","children":[],"type":"integer","number":7}],"type":"any"}],"type":"any"}],"type":"any"},{"name":"OrderDetails.o1","classtype":"From","children":[],"type":"any"},{"name":"OrderDetails.o1","classtype":"Update","children":[{"name":"obj","classtype":"Obj","children":[{"name":"orderId","classtype":"KeyValue","children":[{"name":"orderId","classtype":"Variable","children":[],"type":"integer","number":1}],"type":"any","property":"orderId"},{"name":"productId","classtype":"KeyValue","children":[{"name":"productId","classtype":"Variable","children":[],"type":"integer","number":2}],"type":"any","property":"productId"},{"name":"unitPrice","classtype":"KeyValue","children":[{"name":"unitPrice","classtype":"Variable","children":[],"type":"decimal","number":3}],"type":"any","property":"unitPrice"},{"name":"quantity","classtype":"KeyValue","children":[{"name":"quantity","classtype":"Variable","children":[],"type":"decimal","number":4}],"type":"any","property":"quantity"},{"name":"discount","classtype":"KeyValue","children":[{"name":"discount","classtype":"Variable","children":[],"type":"decimal","number":5}],"type":"any","property":"discount"}],"type":"object"}],"type":"any"}],"type":"any","columns":[{"name":"orderId","type":"integer"},{"name":"productId","type":"integer"},{"name":"unitPrice","type":"decimal"},{"name":"quantity","type":"decimal"},{"name":"discount","type":"decimal"}],"parameters":[{"name":"orderId","type":"integer"},{"name":"productId","type":"integer"},{"name":"unitPrice","type":"decimal"},{"name":"quantity","type":"decimal"},{"name":"discount","type":"decimal"},{"name":"obj.orderId","type":"integer"},{"name":"obj.productId","type":"integer"}],"entity":"OrderDetails","constraints":[{"message":"Cannot be null property orderId in entity OrderDetails","condition":"isNotNull(orderId)"},{"message":"Cannot be null property productId in entity OrderDetails","condition":"isNotNull(productId)"}]}],"type":"any","relation":{"name":"details","type":"manyToOne","composite":true,"from":"id","entity":"OrderDetails","weak":true,"to":"orderId","target":"order"}}],"type":"any","columns":[{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"datetime"},{"name":"shippedDate","type":"datetime"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"}],"parameters":[{"name":"customerId","type":"string"},{"name":"employeeId","type":"integer"},{"name":"orderDate","type":"datetime"},{"name":"requiredDate","type":"datetime"},{"name":"shippedDate","type":"datetime"},{"name":"shipViaId","type":"integer"},{"name":"freight","type":"decimal"},{"name":"name","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"},{"name":"obj.id","type":"integer"}],"entity":"Orders","constraints":[{"message":"Cannot be null property customerId in entity Orders","condition":"isNotNull(customerId)"},{"message":"Cannot be null property employeeId in entity Orders","condition":"isNotNull(employeeId)"}]}],"type":"any","relation":{"name":"orders","type":"manyToOne","composite":true,"from":"id","entity":"Orders","weak":true,"to":"customerId","target":"customer"}}],"type":"any","columns":[{"name":"id","type":"string"},{"name":"name","type":"string"},{"name":"contact","type":"string"},{"name":"phone","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"}],"parameters":[{"name":"id","type":"string"},{"name":"name","type":"string"},{"name":"contact","type":"string"},{"name":"phone","type":"string"},{"name":"address","type":"string"},{"name":"city","type":"string"},{"name":"region","type":"string"},{"name":"postalCode","type":"string"},{"name":"country","type":"string"},{"name":"obj.id","type":"string"}],"entity":"Customers","constraints":[{"message":"Cannot be null property id in entity Customers","condition":"isNotNull(id)"},{"message":"Cannot be null property name in entity Customers","condition":"isNotNull(name)"}]}
		const constraintsExpected :any= {"entity":"Customers","constraints":[{"message":"Cannot be null property id in entity Customers","condition":"isNotNull(id)"},{"message":"Cannot be null property name in entity Customers","condition":"isNotNull(name)"}],"childs":[{"entity":"Orders","constraints":[{"message":"Cannot be null property customerId in entity Orders","condition":"isNotNull(customerId)"},{"message":"Cannot be null property employeeId in entity Orders","condition":"isNotNull(employeeId)"}],"childs":[{"entity":"OrderDetails","constraints":[{"message":"Cannot be null property orderId in entity OrderDetails","condition":"isNotNull(orderId)"},{"message":"Cannot be null property productId in entity OrderDetails","condition":"isNotNull(productId)"}]}]}]}
		const model = orm.model(expression)
		const parameters = orm.parameters(expression)
		const constraints = orm.constraints(expression)
		const metadata = orm.metadata(expression)
		expect(modelExpected).toStrictEqual(model)
		expect(metadataExpected.columns).toStrictEqual(metadata.columns)
		expect(parametersExpected).toStrictEqual(parameters)
		expect(constraintsExpected).toStrictEqual(constraints)
	})
})
describe('Sentences', () => {
	test('update 1', async () => {
		const expression = 'Orders.update()'
		const mysqlExpected = {"entity":"Orders","dialect":"mysql","dataSource":"mysql","sentence":"UPDATE Orders o SET CustomerID = ?,EmployeeID = ?,OrderDate = ?,RequiredDate = ?,ShippedDate = ?,ShipVia = ?,Freight = ?,ShipName = ?,ShipAddress = ?,ShipCity = ?,ShipRegion = ?,ShipPostalCode = ?,ShipCountry = ? WHERE o.OrderID = ? ","childs":[]}
		let mysql = orm.sentence(expression,'default','MySQL')
		expect(mysqlExpected).toStrictEqual(mysql)
		const postgresExpected = {"entity":"Orders","dialect":"postgres","dataSource":"postgres","sentence":"UPDATE Orders o SET CustomerID = $1,EmployeeID = $2,OrderDate = $3,RequiredDate = $4,ShippedDate = $5,ShipVia = $6,Freight = $7,ShipName = $8,ShipAddress = $9,ShipCity = $10,ShipRegion = $11,ShipPostalCode = $12,ShipCountry = $13 WHERE o.OrderID = $14 ","childs":[]}
		let postgres = orm.sentence(expression,'default','PostgreSQL')
		expect(postgresExpected).toStrictEqual(postgres)
		const mariadbExpected = {"entity":"Orders","dialect":"mariadb","dataSource":"mariadb","sentence":"UPDATE Orders o SET CustomerID = ?,EmployeeID = ?,OrderDate = ?,RequiredDate = ?,ShippedDate = ?,ShipVia = ?,Freight = ?,ShipName = ?,ShipAddress = ?,ShipCity = ?,ShipRegion = ?,ShipPostalCode = ?,ShipCountry = ? WHERE o.OrderID = ? ","childs":[]}
		let mariadb = orm.sentence(expression,'default','MariaDB')
		expect(mariadbExpected).toStrictEqual(mariadb)
	})
	test('update 2', async () => {
		const expression = 'Orders.update(entity)'
		const mysqlExpected = {"entity":"Orders","dialect":"mysql","dataSource":"mysql","sentence":"UPDATE Orders o SET CustomerID = ?,EmployeeID = ?,OrderDate = ?,RequiredDate = ?,ShippedDate = ?,ShipVia = ?,Freight = ?,ShipName = ?,ShipAddress = ?,ShipCity = ?,ShipRegion = ?,ShipPostalCode = ?,ShipCountry = ? WHERE o.OrderID = ? ","childs":[]}
		let mysql = orm.sentence(expression,'default','MySQL')
		expect(mysqlExpected).toStrictEqual(mysql)
		const postgresExpected = {"entity":"Orders","dialect":"postgres","dataSource":"postgres","sentence":"UPDATE Orders o SET CustomerID = $1,EmployeeID = $2,OrderDate = $3,RequiredDate = $4,ShippedDate = $5,ShipVia = $6,Freight = $7,ShipName = $8,ShipAddress = $9,ShipCity = $10,ShipRegion = $11,ShipPostalCode = $12,ShipCountry = $13 WHERE o.OrderID = $14 ","childs":[]}
		let postgres = orm.sentence(expression,'default','PostgreSQL')
		expect(postgresExpected).toStrictEqual(postgres)
		const mariadbExpected = {"entity":"Orders","dialect":"mariadb","dataSource":"mariadb","sentence":"UPDATE Orders o SET CustomerID = ?,EmployeeID = ?,OrderDate = ?,RequiredDate = ?,ShippedDate = ?,ShipVia = ?,Freight = ?,ShipName = ?,ShipAddress = ?,ShipCity = ?,ShipRegion = ?,ShipPostalCode = ?,ShipCountry = ? WHERE o.OrderID = ? ","childs":[]}
		let mariadb = orm.sentence(expression,'default','MariaDB')
		expect(mariadbExpected).toStrictEqual(mariadb)
	})
	test('update 3', async () => {
		const expression = 'Orders.updateAll(=>{postalCode:postalCode})'
		const mysqlExpected = {"entity":"Orders","dialect":"mysql","dataSource":"mysql","sentence":"UPDATE Orders o SET ShipPostalCode = ? ","childs":[]}
		let mysql = orm.sentence(expression,'default','MySQL')
		expect(mysqlExpected).toStrictEqual(mysql)
		const postgresExpected = {"entity":"Orders","dialect":"postgres","dataSource":"postgres","sentence":"UPDATE Orders o SET ShipPostalCode = $1 ","childs":[]}
		let postgres = orm.sentence(expression,'default','PostgreSQL')
		expect(postgresExpected).toStrictEqual(postgres)
		const mariadbExpected = {"entity":"Orders","dialect":"mariadb","dataSource":"mariadb","sentence":"UPDATE Orders o SET ShipPostalCode = ? ","childs":[]}
		let mariadb = orm.sentence(expression,'default','MariaDB')
		expect(mariadbExpected).toStrictEqual(mariadb)
	})
	test('update 4', async () => {
		const expression = 'Orders.update(p=>{name:entity.name}).filter(p=>(p.id===entity.id))'
		const mysqlExpected = {"entity":"Orders","dialect":"mysql","dataSource":"mysql","sentence":"UPDATE Orders o SET ShipName = ? WHERE o.OrderID = ? ","childs":[]}
		let mysql = orm.sentence(expression,'default','MySQL')
		expect(mysqlExpected).toStrictEqual(mysql)
		const postgresExpected = {"entity":"Orders","dialect":"postgres","dataSource":"postgres","sentence":"UPDATE Orders o SET ShipName = $1 WHERE o.OrderID = $2 ","childs":[]}
		let postgres = orm.sentence(expression,'default','PostgreSQL')
		expect(postgresExpected).toStrictEqual(postgres)
		const mariadbExpected = {"entity":"Orders","dialect":"mariadb","dataSource":"mariadb","sentence":"UPDATE Orders o SET ShipName = ? WHERE o.OrderID = ? ","childs":[]}
		let mariadb = orm.sentence(expression,'default','MariaDB')
		expect(mariadbExpected).toStrictEqual(mariadb)
	})
	test('update 5', async () => {
		const expression = 'Orders.update(=>{name:entity.name}).include(p=>p.details).filter(p=>(p.id===entity.id))'
		const mysqlExpected = {"entity":"Orders","dialect":"mysql","dataSource":"mysql","sentence":"UPDATE Orders o SET ShipName = ? WHERE o.OrderID = ? ","childs":[{"entity":"OrderDetails","dialect":"mysql","dataSource":"mysql","sentence":"UPDATE `Order Details` o1 SET OrderID = ?,ProductID = ?,UnitPrice = ?,Quantity = ?,Discount = ? WHERE (o1.OrderID = ? AND o1.ProductID = ?) ","childs":[]}]}
		let mysql = orm.sentence(expression,'default','MySQL')
		expect(mysqlExpected).toStrictEqual(mysql)
		const postgresExpected = {"entity":"Orders","dialect":"postgres","dataSource":"postgres","sentence":"UPDATE Orders o SET ShipName = $1 WHERE o.OrderID = $2 ","childs":[{"entity":"OrderDetails","dialect":"postgres","dataSource":"postgres","sentence":"UPDATE \"Order Details\" o1 SET OrderID = $1,ProductID = $2,UnitPrice = $3,Quantity = $4,Discount = $5 WHERE (o1.OrderID = $6 AND o1.ProductID = $7) ","childs":[]}]}
		let postgres = orm.sentence(expression,'default','PostgreSQL')
		expect(postgresExpected).toStrictEqual(postgres)
		const mariadbExpected = {"entity":"Orders","dialect":"mariadb","dataSource":"mariadb","sentence":"UPDATE Orders o SET ShipName = ? WHERE o.OrderID = ? ","childs":[{"entity":"OrderDetails","dialect":"mariadb","dataSource":"mariadb","sentence":"UPDATE `Order Details` o1 SET OrderID = ?,ProductID = ?,UnitPrice = ?,Quantity = ?,Discount = ? WHERE (o1.OrderID = ? AND o1.ProductID = ?) ","childs":[]}]}
		let mariadb = orm.sentence(expression,'default','MariaDB')
		expect(mariadbExpected).toStrictEqual(mariadb)
	})
	test('update 6', async () => {
		const expression = 'Orders.update(=>{name:entity.name}).include(p=>p.details.update(p=>p)).filter(p=>(p.id===entity.id))'
		const mysqlExpected = {"entity":"Orders","dialect":"mysql","dataSource":"mysql","sentence":"UPDATE Orders o SET ShipName = ? WHERE o.OrderID = ? ","childs":[{"entity":"OrderDetails","dialect":"mysql","dataSource":"mysql","sentence":"UPDATE `Order Details` o1 SET UnitPrice = o1.UnitPrice,Quantity = o1.Quantity,Discount = o1.Discount WHERE (o1.OrderID = ? AND o1.ProductID = ?) ","childs":[]}]}
		let mysql = orm.sentence(expression,'default','MySQL')
		expect(mysqlExpected).toStrictEqual(mysql)
		const postgresExpected = {"entity":"Orders","dialect":"postgres","dataSource":"postgres","sentence":"UPDATE Orders o SET ShipName = $1 WHERE o.OrderID = $2 ","childs":[{"entity":"OrderDetails","dialect":"postgres","dataSource":"postgres","sentence":"UPDATE \"Order Details\" o1 SET UnitPrice = o1.UnitPrice,Quantity = o1.Quantity,Discount = o1.Discount WHERE (o1.OrderID = $1 AND o1.ProductID = $2) ","childs":[]}]}
		let postgres = orm.sentence(expression,'default','PostgreSQL')
		expect(postgresExpected).toStrictEqual(postgres)
		const mariadbExpected = {"entity":"Orders","dialect":"mariadb","dataSource":"mariadb","sentence":"UPDATE Orders o SET ShipName = ? WHERE o.OrderID = ? ","childs":[{"entity":"OrderDetails","dialect":"mariadb","dataSource":"mariadb","sentence":"UPDATE `Order Details` o1 SET UnitPrice = o1.UnitPrice,Quantity = o1.Quantity,Discount = o1.Discount WHERE (o1.OrderID = ? AND o1.ProductID = ?) ","childs":[]}]}
		let mariadb = orm.sentence(expression,'default','MariaDB')
		expect(mariadbExpected).toStrictEqual(mariadb)
	})
	test('update 7', async () => {
		const expression = 'Orders.update(=>{name:entity.name}).include(p=>p.details.update(p=>{unitPrice:p.unitPrice,productId:p.productId})).filter(p=>(p.id===entity.id))'
		const mysqlExpected = {"entity":"Orders","dialect":"mysql","dataSource":"mysql","sentence":"UPDATE Orders o SET ShipName = ? WHERE o.OrderID = ? ","childs":[{"entity":"OrderDetails","dialect":"mysql","dataSource":"mysql","sentence":"UPDATE `Order Details` o1 SET UnitPrice = o1.UnitPrice,ProductID = o1.ProductID WHERE (o1.OrderID = ? AND o1.ProductID = ?) ","childs":[]}]}
		let mysql = orm.sentence(expression,'default','MySQL')
		expect(mysqlExpected).toStrictEqual(mysql)
		const postgresExpected = {"entity":"Orders","dialect":"postgres","dataSource":"postgres","sentence":"UPDATE Orders o SET ShipName = $1 WHERE o.OrderID = $2 ","childs":[{"entity":"OrderDetails","dialect":"postgres","dataSource":"postgres","sentence":"UPDATE \"Order Details\" o1 SET UnitPrice = o1.UnitPrice,ProductID = o1.ProductID WHERE (o1.OrderID = $1 AND o1.ProductID = $2) ","childs":[]}]}
		let postgres = orm.sentence(expression,'default','PostgreSQL')
		expect(postgresExpected).toStrictEqual(postgres)
		const mariadbExpected = {"entity":"Orders","dialect":"mariadb","dataSource":"mariadb","sentence":"UPDATE Orders o SET ShipName = ? WHERE o.OrderID = ? ","childs":[{"entity":"OrderDetails","dialect":"mariadb","dataSource":"mariadb","sentence":"UPDATE `Order Details` o1 SET UnitPrice = o1.UnitPrice,ProductID = o1.ProductID WHERE (o1.OrderID = ? AND o1.ProductID = ?) ","childs":[]}]}
		let mariadb = orm.sentence(expression,'default','MariaDB')
		expect(mariadbExpected).toStrictEqual(mariadb)
	})
	test('update 8', async () => {
		const expression = 'Orders.update().include(p=>p.details)'
		const mysqlExpected = {"entity":"Orders","dialect":"mysql","dataSource":"mysql","sentence":"UPDATE Orders o SET CustomerID = ?,EmployeeID = ?,OrderDate = ?,RequiredDate = ?,ShippedDate = ?,ShipVia = ?,Freight = ?,ShipName = ?,ShipAddress = ?,ShipCity = ?,ShipRegion = ?,ShipPostalCode = ?,ShipCountry = ? WHERE o.OrderID = ? ","childs":[{"entity":"OrderDetails","dialect":"mysql","dataSource":"mysql","sentence":"UPDATE `Order Details` o1 SET OrderID = ?,ProductID = ?,UnitPrice = ?,Quantity = ?,Discount = ? WHERE (o1.OrderID = ? AND o1.ProductID = ?) ","childs":[]}]}
		let mysql = orm.sentence(expression,'default','MySQL')
		expect(mysqlExpected).toStrictEqual(mysql)
		const postgresExpected = {"entity":"Orders","dialect":"postgres","dataSource":"postgres","sentence":"UPDATE Orders o SET CustomerID = $1,EmployeeID = $2,OrderDate = $3,RequiredDate = $4,ShippedDate = $5,ShipVia = $6,Freight = $7,ShipName = $8,ShipAddress = $9,ShipCity = $10,ShipRegion = $11,ShipPostalCode = $12,ShipCountry = $13 WHERE o.OrderID = $14 ","childs":[{"entity":"OrderDetails","dialect":"postgres","dataSource":"postgres","sentence":"UPDATE \"Order Details\" o1 SET OrderID = $1,ProductID = $2,UnitPrice = $3,Quantity = $4,Discount = $5 WHERE (o1.OrderID = $6 AND o1.ProductID = $7) ","childs":[]}]}
		let postgres = orm.sentence(expression,'default','PostgreSQL')
		expect(postgresExpected).toStrictEqual(postgres)
		const mariadbExpected = {"entity":"Orders","dialect":"mariadb","dataSource":"mariadb","sentence":"UPDATE Orders o SET CustomerID = ?,EmployeeID = ?,OrderDate = ?,RequiredDate = ?,ShippedDate = ?,ShipVia = ?,Freight = ?,ShipName = ?,ShipAddress = ?,ShipCity = ?,ShipRegion = ?,ShipPostalCode = ?,ShipCountry = ? WHERE o.OrderID = ? ","childs":[{"entity":"OrderDetails","dialect":"mariadb","dataSource":"mariadb","sentence":"UPDATE `Order Details` o1 SET OrderID = ?,ProductID = ?,UnitPrice = ?,Quantity = ?,Discount = ? WHERE (o1.OrderID = ? AND o1.ProductID = ?) ","childs":[]}]}
		let mariadb = orm.sentence(expression,'default','MariaDB')
		expect(mariadbExpected).toStrictEqual(mariadb)
	})
	test('update 9', async () => {
		const expression = 'Customers.update().include(p=>p.orders.include(p=>p.details))'
		const mysqlExpected = {"entity":"Customers","dialect":"mysql","dataSource":"mysql","sentence":"UPDATE Customers c SET CustomerID = ?,CompanyName = ?,ContactName = ?,ContactTitle = ?,Address = ?,City = ?,Region = ?,PostalCode = ?,Country = ? WHERE c.CustomerID = ? ","childs":[{"entity":"Orders","dialect":"mysql","dataSource":"mysql","sentence":"UPDATE Orders o SET CustomerID = ?,EmployeeID = ?,OrderDate = ?,RequiredDate = ?,ShippedDate = ?,ShipVia = ?,Freight = ?,ShipName = ?,ShipAddress = ?,ShipCity = ?,ShipRegion = ?,ShipPostalCode = ?,ShipCountry = ? WHERE o.OrderID = ? ","childs":[{"entity":"OrderDetails","dialect":"mysql","dataSource":"mysql","sentence":"UPDATE `Order Details` o1 SET OrderID = ?,ProductID = ?,UnitPrice = ?,Quantity = ?,Discount = ? WHERE (o1.OrderID = ? AND o1.ProductID = ?) ","childs":[]}]}]}
		let mysql = orm.sentence(expression,'default','MySQL')
		expect(mysqlExpected).toStrictEqual(mysql)
		const postgresExpected = {"entity":"Customers","dialect":"postgres","dataSource":"postgres","sentence":"UPDATE Customers c SET CustomerID = $1,CompanyName = $2,ContactName = $3,ContactTitle = $4,Address = $5,City = $6,Region = $7,PostalCode = $8,Country = $9 WHERE c.CustomerID = $10 ","childs":[{"entity":"Orders","dialect":"postgres","dataSource":"postgres","sentence":"UPDATE Orders o SET CustomerID = $1,EmployeeID = $2,OrderDate = $3,RequiredDate = $4,ShippedDate = $5,ShipVia = $6,Freight = $7,ShipName = $8,ShipAddress = $9,ShipCity = $10,ShipRegion = $11,ShipPostalCode = $12,ShipCountry = $13 WHERE o.OrderID = $14 ","childs":[{"entity":"OrderDetails","dialect":"postgres","dataSource":"postgres","sentence":"UPDATE \"Order Details\" o1 SET OrderID = $1,ProductID = $2,UnitPrice = $3,Quantity = $4,Discount = $5 WHERE (o1.OrderID = $6 AND o1.ProductID = $7) ","childs":[]}]}]}
		let postgres = orm.sentence(expression,'default','PostgreSQL')
		expect(postgresExpected).toStrictEqual(postgres)
		const mariadbExpected = {"entity":"Customers","dialect":"mariadb","dataSource":"mariadb","sentence":"UPDATE Customers c SET CustomerID = ?,CompanyName = ?,ContactName = ?,ContactTitle = ?,Address = ?,City = ?,Region = ?,PostalCode = ?,Country = ? WHERE c.CustomerID = ? ","childs":[{"entity":"Orders","dialect":"mariadb","dataSource":"mariadb","sentence":"UPDATE Orders o SET CustomerID = ?,EmployeeID = ?,OrderDate = ?,RequiredDate = ?,ShippedDate = ?,ShipVia = ?,Freight = ?,ShipName = ?,ShipAddress = ?,ShipCity = ?,ShipRegion = ?,ShipPostalCode = ?,ShipCountry = ? WHERE o.OrderID = ? ","childs":[{"entity":"OrderDetails","dialect":"mariadb","dataSource":"mariadb","sentence":"UPDATE `Order Details` o1 SET OrderID = ?,ProductID = ?,UnitPrice = ?,Quantity = ?,Discount = ? WHERE (o1.OrderID = ? AND o1.ProductID = ?) ","childs":[]}]}]}
		let mariadb = orm.sentence(expression,'default','MariaDB')
		expect(mariadbExpected).toStrictEqual(mariadb)
	})
})