name: numeric functions
data:
  a:
    id: 1
test:
  - name: function abs
    data: a
    sentences:
      - stage: MongoDB
        info:
          entity: Products
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":{ "$multiply" :["$UnitPrice",-1] },
            "result":{ "$round" :[{ "$abs" :{ "$multiply" :["$UnitPrice",-1] }
            },10] } }} ]
          children: []
    errors: 0
    expression: >-
      Products.filter(p => p.id === id).map(p => ({ name: p.name, source:
      p.price * -1, result: round(abs(p.price * -1), 10) }))
    normalizeExpression: >-
      Products.map(p=>{name:p.name,source:(p.price*-1),result:round(abs((p.price*-1)),10)}).filter(p=>(p.id==id))
    model:
      - name: name
        type: string
      - name: source
        type: number
      - name: result
        type: number
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 38
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: name
          type: string
        - name: source
          type: number
        - name: result
          type: number
      parameters:
        - name: id
          type: integer
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MongoDB
    result:
      - name: Chai
        source: -18
        result: 18
  - name: function acos
    data: a
    sentences:
      - stage: MongoDB
        info:
          entity: Products
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":0.25, "result":{ "$round" :[{
            "$acos" :0.25 },10] } }} ]
          children: []
    errors: 0
    expression: >-
      Products.filter(p => p.id === id).map(p => ({ name: p.name, source: 0.25,
      result: round(acos(0.25), 10) }))
    normalizeExpression: >-
      Products.map(p=>{name:p.name,source:0.25,result:round(acos(0.25),10)}).filter(p=>(p.id==id))
    model:
      - name: name
        type: string
      - name: source
        type: decimal
      - name: result
        type: number
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 38
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: name
          type: string
        - name: source
          type: decimal
        - name: result
          type: number
      parameters:
        - name: id
          type: integer
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MongoDB
    result:
      - name: Chai
        result: 1.3181160717
  - name: function asin
    data: a
    sentences:
      - stage: MongoDB
        info:
          entity: Products
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":0.25, "result":{ "$round" :[{
            "$asin" :0.25 },10] } }} ]
          children: []
    errors: 0
    expression: >-
      Products.filter(p => p.id === id).map(p => ({ name: p.name, source: 0.25,
      result: round(asin(0.25), 10) }))
    normalizeExpression: >-
      Products.map(p=>{name:p.name,source:0.25,result:round(asin(0.25),10)}).filter(p=>(p.id==id))
    model:
      - name: name
        type: string
      - name: source
        type: decimal
      - name: result
        type: number
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 38
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: name
          type: string
        - name: source
          type: decimal
        - name: result
          type: number
      parameters:
        - name: id
          type: integer
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MongoDB
    result:
      - name: Chai
        result: 0.2526802551
  - name: function atan
    data: a
    sentences:
      - stage: MongoDB
        info:
          entity: Products
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":0.25, "result":{ "$round" :[{
            "$atan" :0.25 },10] } }} ]
          children: []
    errors: 0
    expression: >-
      Products.filter(p => p.id === id).map(p => ({ name: p.name, source: 0.25,
      result: round(atan(0.25), 10) }))
    normalizeExpression: >-
      Products.map(p=>{name:p.name,source:0.25,result:round(atan(0.25),10)}).filter(p=>(p.id==id))
    model:
      - name: name
        type: string
      - name: source
        type: decimal
      - name: result
        type: number
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 38
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: name
          type: string
        - name: source
          type: decimal
        - name: result
          type: number
      parameters:
        - name: id
          type: integer
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MongoDB
    result:
      - name: Chai
        result: 0.2449786631
  - name: function atan2
    data: a
    sentences:
      - stage: MongoDB
        info:
          entity: Products
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":0.5, "result":{ "$round" :[{
            "$atan2":[0.25,1] },10] } }} ]
          children: []
    errors: 0
    expression: >-
      Products.filter(p => p.id === id).map(p => ({ name: p.name, source: 0.50,
      result: round(atan2(0.25, 1), 10) }))
    normalizeExpression: >-
      Products.map(p=>{name:p.name,source:0.5,result:round(atan2(0.25,1),10)}).filter(p=>(p.id==id))
    model:
      - name: name
        type: string
      - name: source
        type: decimal
      - name: result
        type: number
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 38
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: name
          type: string
        - name: source
          type: decimal
        - name: result
          type: number
      parameters:
        - name: id
          type: integer
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MongoDB
    result:
      - name: Chai
        result: 0.2449786631
  - name: function ceil
    data: a
    sentences:
      - stage: MongoDB
        info:
          entity: Products
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":25.75, "result":{ "$round" :[{
            "$ceil" :25.75 },10] } }} ]
          children: []
    errors: 0
    expression: >-
      Products.filter(p => p.id === id).map(p => ({ name: p.name, source: 25.75,
      result: round(ceil(25.75), 10) }))
    normalizeExpression: >-
      Products.map(p=>{name:p.name,source:25.75,result:round(ceil(25.75),10)}).filter(p=>(p.id==id))
    model:
      - name: name
        type: string
      - name: source
        type: decimal
      - name: result
        type: number
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 38
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: name
          type: string
        - name: source
          type: decimal
        - name: result
          type: number
      parameters:
        - name: id
          type: integer
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MongoDB
    result:
      - name: Chai
        result: 26
  - name: function cos
    data: a
    sentences:
      - stage: MongoDB
        info:
          entity: Products
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":2, "result":{ "$round" :[{ "$cos" :2
            },10] } }} ]
          children: []
    errors: 0
    expression: >-
      Products.filter(p => p.id === id).map(p => ({ name: p.name, source: 2,
      result: round(cos(2), 10) }))
    normalizeExpression: >-
      Products.map(p=>{name:p.name,source:2,result:round(cos(2),10)}).filter(p=>(p.id==id))
    model:
      - name: name
        type: string
      - name: source
        type: integer
      - name: result
        type: number
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 38
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: name
          type: string
        - name: source
          type: integer
        - name: result
          type: number
      parameters:
        - name: id
          type: integer
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MongoDB
    result:
      - name: Chai
        result: -0.4161468365
  - name: function exp
    data: a
    sentences:
      - stage: MongoDB
        info:
          entity: Products
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":1, "result":{ "$round" :[{ "$exp" :1
            },10] } }} ]
          children: []
    errors: 0
    expression: >-
      Products.filter(p => p.id === id).map(p => ({ name: p.name, source: 1,
      result: round(exp(1), 10) }))
    normalizeExpression: >-
      Products.map(p=>{name:p.name,source:1,result:round(exp(1),10)}).filter(p=>(p.id==id))
    model:
      - name: name
        type: string
      - name: source
        type: integer
      - name: result
        type: number
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 38
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: name
          type: string
        - name: source
          type: integer
        - name: result
          type: number
      parameters:
        - name: id
          type: integer
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MongoDB
    result:
      - name: Chai
        result: 2.7182818285
  - name: function floor
    data: a
    sentences:
      - stage: MongoDB
        info:
          entity: Products
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":25.75, "result":{ "$round" :[{
            "$floor" :25.75 },10] } }} ]
          children: []
    errors: 0
    expression: >-
      Products.filter(p => p.id === id).map(p => ({ name: p.name, source: 25.75,
      result: round(floor(25.75), 10) }))
    normalizeExpression: >-
      Products.map(p=>{name:p.name,source:25.75,result:round(floor(25.75),10)}).filter(p=>(p.id==id))
    model:
      - name: name
        type: string
      - name: source
        type: decimal
      - name: result
        type: number
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 38
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: name
          type: string
        - name: source
          type: decimal
        - name: result
          type: number
      parameters:
        - name: id
          type: integer
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MongoDB
    result:
      - name: Chai
        result: 25
  - name: function ln
    data: a
    sentences:
      - stage: MongoDB
        info:
          entity: Products
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":2, "result":{ "$round" :[{ "$ln" :2
            },10] } }} ]
          children: []
    errors: 0
    expression: >-
      Products.filter(p => p.id === id).map(p => ({ name: p.name, source: 2,
      result: round(ln(2), 10) }))
    normalizeExpression: >-
      Products.map(p=>{name:p.name,source:2,result:round(ln(2),10)}).filter(p=>(p.id==id))
    model:
      - name: name
        type: string
      - name: source
        type: integer
      - name: result
        type: number
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 38
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: name
          type: string
        - name: source
          type: integer
        - name: result
          type: number
      parameters:
        - name: id
          type: integer
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MongoDB
    result:
      - name: Chai
        result: 0.6931471806
  - name: function log
    data: a
    sentences:
      - stage: MongoDB
        info:
          entity: Products
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "m":10, "n":20, "result":{ "$round" :[{
            "$log":[10,20] },10] } }} ]
          children: []
    errors: 0
    expression: >-
      Products.filter(p => p.id === id).map(p => ({ name: p.name, m: 10, n: 20,
      result: round(log(10, 20), 10) }))
    normalizeExpression: >-
      Products.map(p=>{name:p.name,m:10,n:20,result:round(log(10,20),10)}).filter(p=>(p.id==id))
    model:
      - name: name
        type: string
      - name: m
        type: integer
      - name: 'n'
        type: integer
      - name: result
        type: number
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 38
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: name
          type: string
        - name: m
          type: integer
        - name: 'n'
          type: integer
        - name: result
          type: number
      parameters:
        - name: id
          type: integer
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MongoDB
    result:
      - name: Chai
        result: 0.7686217868
  - name: function round
    data: a
    sentences:
      - stage: MongoDB
        info:
          entity: Products
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":135.375, "result":{ "$round"
            :[135.375,2] } }} ]
          children: []
    errors: 0
    expression: >-
      Products.filter(p => p.id === id).map(p => ({ name: p.name, source:
      135.375, result: round(135.375, 2) }))
    normalizeExpression: >-
      Products.map(p=>{name:p.name,source:135.375,result:round(135.375,2)}).filter(p=>(p.id==id))
    model:
      - name: name
        type: string
      - name: source
        type: decimal
      - name: result
        type: number
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 38
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: name
          type: string
        - name: source
          type: decimal
        - name: result
          type: number
      parameters:
        - name: id
          type: integer
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MongoDB
    result:
      - name: Chai
        result: 135.38
  - name: function sign
    data: a
    sentences:
      - stage: MongoDB
        info:
          entity: Products
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":255.5, "result":{ "$round" :[{
            "$sign":255.5},10] } }} ]
          children: []
    errors: 1
    expression: >-
      Products.filter(p => p.id === id).map(p => ({ name: p.name, source: 255.5,
      result: round(sign(255.5), 10) }))
    normalizeExpression: >-
      Products.map(p=>{name:p.name,source:255.5,result:round(sign(255.5),10)}).filter(p=>(p.id==id))
    model:
      - name: name
        type: string
      - name: source
        type: decimal
      - name: result
        type: number
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 38
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: name
          type: string
        - name: source
          type: decimal
        - name: result
          type: number
      parameters:
        - name: id
          type: integer
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MongoDB
        error: >-
          MongoServerError: Invalid $project :: caused by :: Unrecognized
          expression '$sign'
  - name: function tan
    data: a
    sentences:
      - stage: MongoDB
        info:
          entity: Products
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":1.75, "result":{ "$round" :[{ "$tan"
            :1.75 },10] } }} ]
          children: []
    errors: 0
    expression: >-
      Products.filter(p => p.id === id).map(p => ({ name: p.name, source: 1.75,
      result: round(tan(1.75), 10) }))
    normalizeExpression: >-
      Products.map(p=>{name:p.name,source:1.75,result:round(tan(1.75),10)}).filter(p=>(p.id==id))
    model:
      - name: name
        type: string
      - name: source
        type: decimal
      - name: result
        type: number
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 38
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: name
          type: string
        - name: source
          type: decimal
        - name: result
          type: number
      parameters:
        - name: id
          type: integer
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MongoDB
    result:
      - name: Chai
        result: -5.5203799225
  - name: function trunc
    data: a
    sentences:
      - stage: MongoDB
        info:
          entity: Products
          dialect: MongoDB
          source: MongoDB
          sentence: >-
            [{ "$match" : { "_id":{{id}} } }, { "$project" :{ "_id": 0 ,
            "name":"$ProductName", "source":135.375, "result":{ "$round" :[{
            "$trunc" :135.375 },10] } }} ]
          children: []
    errors: 0
    expression: >-
      Products.filter(p => p.id === id).map(p => ({ name: p.name, source:
      135.375, result: round(trunc(135.375, 2), 10) }))
    normalizeExpression: >-
      Products.map(p=>{name:p.name,source:135.375,result:round(trunc(135.375,2),10)}).filter(p=>(p.id==id))
    model:
      - name: name
        type: string
      - name: source
        type: decimal
      - name: result
        type: number
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 38
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: name
          type: string
        - name: source
          type: decimal
        - name: result
          type: number
      parameters:
        - name: id
          type: integer
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MongoDB
    result:
      - name: Chai
        result: 135
errors: 1
