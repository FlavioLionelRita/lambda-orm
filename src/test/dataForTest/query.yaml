name: query
schema: 'northwind:0.0.2'
context:
  a:
    id: 1
  b:
    minValue: 10
    from: '1997-01-01'
    to: '1997-12-31'
test:
  - name: query 3
    context: a
    lambda: (id) => Products.filter(p => p.id == id).map(p => p).sort(p => p.id)
    sentences:
      - dialect: mariadb
        sentence: >-
          SELECT p.ProductID AS `id`, p.ProductName AS `name`, p.SupplierID AS
          `supplierId`, p.CategoryID AS `categoryId`, p.QuantityPerUnit AS
          `quantity`, p.UnitPrice AS `price`, p.UnitsInStock AS `inStock`,
          p.UnitsOnOrder AS `onOrder`, p.ReorderLevel AS `reorderLevel`,
          p.Discontinued AS `discontinued` FROM Products p  WHERE p.ProductID =
          ? ORDER BY `id` 
      - dialect: mssql
        sentence: >-
          SELECT p.ProductID AS [id], p.ProductName AS [name], p.SupplierID AS
          [supplierId], p.CategoryID AS [categoryId], p.QuantityPerUnit AS
          [quantity], p.UnitPrice AS [price], p.UnitsInStock AS [inStock],
          p.UnitsOnOrder AS [onOrder], p.ReorderLevel AS [reorderLevel],
          p.Discontinued AS [discontinued] FROM Products p  WHERE p.ProductID =
          :id ORDER BY [id] 
      - dialect: mysql
        sentence: >-
          SELECT p.ProductID AS `id`, p.ProductName AS `name`, p.SupplierID AS
          `supplierId`, p.CategoryID AS `categoryId`, p.QuantityPerUnit AS
          `quantity`, p.UnitPrice AS `price`, p.UnitsInStock AS `inStock`,
          p.UnitsOnOrder AS `onOrder`, p.ReorderLevel AS `reorderLevel`,
          p.Discontinued AS `discontinued` FROM Products p  WHERE p.ProductID =
          ? ORDER BY `id` 
      - dialect: oracle
        sentence: >-
          SELECT p.ProductID AS "id", p.ProductName AS "name", p.SupplierID AS
          "supplierId", p.CategoryID AS "categoryId", p.QuantityPerUnit AS
          "quantity", p.UnitPrice AS "price", p.UnitsInStock AS "inStock",
          p.UnitsOnOrder AS "onOrder", p.ReorderLevel AS "reorderLevel",
          p.Discontinued AS "discontinued" FROM Products p  WHERE p.ProductID =
          :id ORDER BY "id" 
      - dialect: postgres
        sentence: >-
          SELECT p.ProductID AS "id", p.ProductName AS "name", p.SupplierID AS
          "supplierId", p.CategoryID AS "categoryId", p.QuantityPerUnit AS
          "quantity", p.UnitPrice AS "price", p.UnitsInStock AS "inStock",
          p.UnitsOnOrder AS "onOrder", p.ReorderLevel AS "reorderLevel",
          p.Discontinued AS "discontinued" FROM Products p  WHERE p.ProductID =
          $1 ORDER BY "id" 
    errors: 0
    expression: Products.filter(p => p.id == id).map(p => p).sort(p => p.id)
    completeExpression: >-
      Products.filter(p=>(p.id==id)).map(p=>{id:p.id,name:p.name,supplierId:p.supplierId,categoryId:p.categoryId,quantity:p.quantity,price:p.price,inStock:p.inStock,onOrder:p.onOrder,reorderLevel:p.reorderLevel,discontinued:p.discontinued}).sort(p=>p.id)
    model:
      id: integer
      name: string
      supplierId: integer
      categoryId: integer
      quantity: string
      price: decimal
      inStock: decimal
      onOrder: decimal
      reorderLevel: decimal
      discontinued: boolean
    parameters:
      - name: id
        type: integer
        value: 1
    fields:
      - name: id
        type: integer
      - name: name
        type: string
      - name: supplierId
        type: integer
      - name: categoryId
        type: integer
      - name: quantity
        type: string
      - name: price
        type: decimal
      - name: inStock
        type: decimal
      - name: onOrder
        type: decimal
      - name: reorderLevel
        type: decimal
      - name: discontinued
        type: boolean
    executions:
      - database: mysql
      - database: postgres
    result:
      - id: 1
        name: Chai
        supplierId: 1
        categoryId: 1
        quantity: 10 boxes x 20 bags
        price: 18
        inStock: 39
        onOrder: 0
        reorderLevel: 10
        discontinued: false
errors: 0
