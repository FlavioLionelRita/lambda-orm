name: groupBy
data:
  a:
    id: 1
test:
  - name: groupBy 1
    sentences:
      - stage: MySQL
        info:
          entity: Products
          dialect: MySQL
          source: MySQL
          sentence: 'SELECT MAX(p.UnitPrice) AS maxPrice FROM Products p  '
          children: []
    errors: 0
    expression: Products.map(p=>{maxPrice:max(p.price)})
    normalizeExpression: Products.map(p=>{maxPrice:max(p.price)})
    model:
      - name: maxPrice
        type: any
    parameters: []
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 13
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: maxPrice
          type: any
      parameters: []
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MySQL
    result:
      - maxPrice: 263.5
  - name: groupBy 2
    sentences:
      - stage: MySQL
        info:
          entity: Products
          dialect: MySQL
          source: MySQL
          sentence: 'SELECT MIN(p.UnitPrice) AS minPrice FROM Products p  '
          children: []
    errors: 0
    expression: Products.map(p=>{minPrice:min(p.price)})
    normalizeExpression: Products.map(p=>{minPrice:min(p.price)})
    model:
      - name: minPrice
        type: any
    parameters: []
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 13
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: minPrice
          type: any
      parameters: []
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MySQL
    result:
      - minPrice: 2.5
  - name: groupBy 3
    sentences:
      - stage: MySQL
        info:
          entity: Products
          dialect: MySQL
          source: MySQL
          sentence: 'SELECT SUM(p.UnitPrice) AS total FROM Products p  '
          children: []
    errors: 0
    expression: Products.map(p=>{total:sum(p.price)})
    normalizeExpression: Products.map(p=>{total:sum(p.price)})
    model:
      - name: total
        type: number
    parameters: []
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 13
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: total
          type: number
      parameters: []
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MySQL
    result:
      - total: 2222.71
  - name: groupBy 4
    sentences:
      - stage: MySQL
        info:
          entity: Products
          dialect: MySQL
          source: MySQL
          sentence: 'SELECT ROUND(AVG(p.UnitPrice),4) AS average FROM Products p  '
          children: []
    errors: 0
    expression: Products.map(p=>{average:round(avg(p.price),4)})
    normalizeExpression: Products.map(p=>{average:round(avg(p.price),4)})
    model:
      - name: average
        type: number
    parameters: []
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 13
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: average
          type: number
      parameters: []
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MySQL
    result:
      - average: 28.8664
  - name: groupBy 5
    sentences:
      - stage: MySQL
        info:
          entity: Products
          dialect: MySQL
          source: MySQL
          sentence: 'SELECT COUNT(1) AS count FROM Products p  '
          children: []
    errors: 0
    expression: Products.map(p=>{count:count(1)})
    normalizeExpression: Products.map(p=>{count:count(1)})
    model:
      - name: count
        type: integer
    parameters: []
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 13
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: count
          type: integer
      parameters: []
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MySQL
    result:
      - count: 77
  - name: groupBy 6
    sentences:
      - stage: MySQL
        info:
          entity: Products
          dialect: MySQL
          source: MySQL
          sentence: >-
            SELECT p.CategoryID AS category, MAX(p.UnitPrice) AS largestPrice
            FROM Products p  GROUP BY p.CategoryID 
          children: []
    errors: 0
    expression: Products.map(p=>{category:p.categoryId,largestPrice:max(p.price)})
    normalizeExpression: Products.map(p=>{category:p.categoryId,largestPrice:max(p.price)})
    model:
      - name: category
        type: integer
      - name: largestPrice
        type: any
    parameters: []
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 13
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: category
          type: integer
        - name: largestPrice
          type: any
      parameters: []
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MySQL
    result:
      - category: 1
        largestPrice: 263.5
      - category: 2
        largestPrice: 43.9
      - category: 3
        largestPrice: 81
      - category: 4
        largestPrice: 55
      - category: 5
        largestPrice: 38
      - category: 6
        largestPrice: 123.79
      - category: 7
        largestPrice: 53
      - category: 8
        largestPrice: 62.5
  - name: groupBy 7
    sentences:
      - stage: MySQL
        info:
          entity: Products
          dialect: MySQL
          source: MySQL
          sentence: >-
            SELECT c.CategoryName AS category, MAX(p.UnitPrice) AS largestPrice
            FROM Products p INNER JOIN Categories c ON c.CategoryID =
            p.CategoryID GROUP BY c.CategoryName 
          children: []
    errors: 0
    expression: Products.map(p=>{category:p.category.name,largestPrice:max(p.price)})
    normalizeExpression: Products.map(p=>{category:p.category.name,largestPrice:max(p.price)})
    model:
      - name: category
        type: string
      - name: largestPrice
        type: any
    parameters: []
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 13
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: category
          type: string
        - name: largestPrice
          type: any
      parameters: []
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MySQL
    result:
      - category: Beverages
        largestPrice: 263.5
      - category: Condiments
        largestPrice: 43.9
      - category: Confections
        largestPrice: 81
      - category: Dairy Products
        largestPrice: 55
      - category: Grains/Cereals
        largestPrice: 38
      - category: Meat/Poultry
        largestPrice: 123.79
      - category: Produce
        largestPrice: 53
      - category: Seafood
        largestPrice: 62.5
  - name: groupBy 8
    data: a
    sentences:
      - stage: MySQL
        info:
          entity: Products
          dialect: MySQL
          source: MySQL
          sentence: >-
            SELECT p.ProductName AS name, p.UnitPrice AS source,
            ABS(p.UnitPrice) AS result FROM Products p  WHERE p.ProductID = ? 
          children: []
    errors: 0
    expression: >-
      Products.filter(p=>(p.id==id)).map(p=>{name:p.name,source:p.price,result:abs(p.price)})
    normalizeExpression: >-
      Products.map(p=>{name:p.name,source:p.price,result:abs(p.price)}).filter(p=>(p.id==id))
    model:
      - name: name
        type: string
      - name: source
        type: decimal
      - name: result
        type: number
    parameters:
      - name: id
        type: integer
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 35
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: name
          type: string
        - name: source
          type: decimal
        - name: result
          type: number
      parameters:
        - name: id
          type: integer
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MySQL
    result:
      - name: Chai
        source: 18
        result: 18
  - name: groupBy 9
    sentences:
      - stage: MySQL
        info:
          entity: Products
          dialect: MySQL
          source: MySQL
          sentence: >-
            SELECT c.CategoryName AS category, MAX(p.UnitPrice) AS largestPrice
            FROM Products p INNER JOIN Categories c ON c.CategoryID =
            p.CategoryID GROUP BY c.CategoryName HAVING MAX(p.UnitPrice) > 100 
          children: []
    errors: 0
    expression: >-
      Products.having(p=>(max(p.price)>100)).map(p=>{category:p.category.name,largestPrice:max(p.price)})
    normalizeExpression: >-
      Products.map(p=>{category:p.category.name,largestPrice:max(p.price)}).having(p=>(max(p.price)>100))
    model:
      - name: category
        type: string
      - name: largestPrice
        type: any
    parameters: []
    constraints:
      entity: Products
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 43
      name: select
      children: []
      type: any
      entity: Products
      columns:
        - name: category
          type: string
        - name: largestPrice
          type: any
      parameters: []
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: p
    executions:
      - stage: MySQL
    result:
      - category: Beverages
        largestPrice: 263.5
      - category: Meat/Poultry
        largestPrice: 123.79
  - name: query 10
    sentences:
      - stage: MySQL
        info:
          entity: Orders.details
          dialect: MySQL
          source: MySQL
          sentence: >-
            SELECT SUM((((o.UnitPrice * o.Quantity) * (1 - (o.Discount / 100)))
            * 100)) AS subTotal FROM `Order Details` o  ORDER BY subTotal asc 
          children: []
    errors: 0
    expression: >-
      Orders.details.map(p=>{subTotal:sum((((p.unitPrice*p.quantity)*(1-(p.discount/100)))*100))}).sort(p=>p.subTotal)
    normalizeExpression: >-
      Orders.details.map(p=>{subTotal:sum((((p.unitPrice*p.quantity)*(1-(p.discount/100)))*100))}).sort(p=>asc(p.subTotal))
    model:
      - name: subTotal
        type: number
    parameters: []
    constraints:
      entity: Orders.details
      constraints: []
    metadata:
      classtype: Sentence
      pos:
        ln: 0
        col: 98
      name: select
      children: []
      type: any
      entity: Orders.details
      columns:
        - name: subTotal
          type: number
      parameters: []
      constraints: []
      values: []
      defaults: []
      clause: select
      alias: o
    executions:
      - stage: MySQL
    result:
      - subTotal: 135445859
errors: 0
