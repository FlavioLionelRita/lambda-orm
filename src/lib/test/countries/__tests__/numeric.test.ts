/* eslint-disable no-template-curly-in-string */
import { orm } from '../../..'
beforeAll(async () => {
	require('dotenv').config({ path: './config/countries.env' })
	await orm.init('./config/countries.yaml')
})

describe('numeric', () => {
	const context = JSON.parse('{}')
	test('normalize', () => {
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 3+2-1 })')).toStrictEqual('Countries.map(p=>{result:((3+2)-1)}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 3*4-1})')).toStrictEqual('Countries.map(p=>{result:((3*4)-1)}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 1-2-5})')).toStrictEqual('Countries.map(p=>{result:((1-2)-5)}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: (2+3)*2})')).toStrictEqual('Countries.map(p=>{result:((2+3)*2)}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 2*(3+2)})')).toStrictEqual('Countries.map(p=>{result:(2*(3+2))}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 1+2*3*4})')).toStrictEqual('Countries.map(p=>{result:(1+((2*3)*4))}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: (1+(2**3)*4)})')).toStrictEqual('Countries.map(p=>{result:(1+((2**3)*4))}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 1+2**(3*4)})')).toStrictEqual('Countries.map(p=>{result:(1+(2**(3*4)))}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: abs(-9)})')).toStrictEqual('Countries.map(p=>{result:abs(-9)}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: acos(0.434)})')).toStrictEqual('Countries.map(p=>{result:acos(0.434)}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: asin(0.434)})')).toStrictEqual('Countries.map(p=>{result:asin(0.434)}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: atan(2)})')).toStrictEqual('Countries.map(p=>{result:atan(2)}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: atan2(90, 15)})')).toStrictEqual('Countries.map(p=>{result:atan2(90,15)}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: ceil(2)})')).toStrictEqual('Countries.map(p=>{result:ceil(2)}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: cos(2)})')).toStrictEqual('Countries.map(p=>{result:cos(2)}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: cosh(2)})')).toStrictEqual('Countries.map(p=>{result:cosh(2)}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: exp(7)})')).toStrictEqual('Countries.map(p=>{result:exp(7)}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: floor(7)})')).toStrictEqual('Countries.map(p=>{result:floor(7)}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: ln(7)})')).toStrictEqual('Countries.map(p=>{result:ln(7)}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: log(7,10)})')).toStrictEqual('Countries.map(p=>{result:log(7,10)}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: log10(7)})')).toStrictEqual('Countries.map(p=>{result:log10(7)}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: remainder(7,2)})')).toStrictEqual('Countries.map(p=>{result:remainder(7,2)}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: round(7.984938,2)})')).toStrictEqual('Countries.map(p=>{result:round(7.984938,2)}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: sign(-7)})')).toStrictEqual('Countries.map(p=>{result:sign(-7)}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: sin(7)})')).toStrictEqual('Countries.map(p=>{result:sin(7)}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: sinh(7)})')).toStrictEqual('Countries.map(p=>{result:sinh(7)}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: tan(7)})')).toStrictEqual('Countries.map(p=>{result:tan(7)}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: tanh(7)})')).toStrictEqual('Countries.map(p=>{result:tanh(7)}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: trunc(7.984938,2)})')).toStrictEqual('Countries.map(p=>{result:trunc(7.984938,2)}).filter(p=>(p.iso3==BRA))')
		expect(orm.normalize('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: toNumber("3.141516")})')).toStrictEqual('Countries.map(p=>{result:toNumber(3.141516)}).filter(p=>(p.iso3==BRA))')
	})
	test('model', () => {
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 3+2-1 })')).toStrictEqual([{'name':'result','type':'number'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 3*4-1})')).toStrictEqual([{'name':'result','type':'number'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 1-2-5})')).toStrictEqual([{'name':'result','type':'number'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: (2+3)*2})')).toStrictEqual([{'name':'result','type':'number'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 2*(3+2)})')).toStrictEqual([{'name':'result','type':'number'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 1+2*3*4})')).toStrictEqual([{'name':'result','type':'integer'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: (1+(2**3)*4)})')).toStrictEqual([{'name':'result','type':'integer'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 1+2**(3*4)})')).toStrictEqual([{'name':'result','type':'integer'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: abs(-9)})')).toStrictEqual([{'name':'result','type':'number'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: acos(0.434)})')).toStrictEqual([{'name':'result','type':'number'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: asin(0.434)})')).toStrictEqual([{'name':'result','type':'number'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: atan(2)})')).toStrictEqual([{'name':'result','type':'number'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: atan2(90, 15)})')).toStrictEqual([{'name':'result','type':'number'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: ceil(2)})')).toStrictEqual([{'name':'result','type':'number'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: cos(2)})')).toStrictEqual([{'name':'result','type':'number'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: cosh(2)})')).toStrictEqual([{'name':'result','type':'number'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: exp(7)})')).toStrictEqual([{'name':'result','type':'number'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: floor(7)})')).toStrictEqual([{'name':'result','type':'number'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: ln(7)})')).toStrictEqual([{'name':'result','type':'number'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: log(7,10)})')).toStrictEqual([{'name':'result','type':'number'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: log10(7)})')).toStrictEqual([{'name':'result','type':'number'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: remainder(7,2)})')).toStrictEqual([{'name':'result','type':'number'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: round(7.984938,2)})')).toStrictEqual([{'name':'result','type':'number'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: sign(-7)})')).toStrictEqual([{'name':'result','type':'number'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: sin(7)})')).toStrictEqual([{'name':'result','type':'number'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: sinh(7)})')).toStrictEqual([{'name':'result','type':'number'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: tan(7)})')).toStrictEqual([{'name':'result','type':'number'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: tanh(7)})')).toStrictEqual([{'name':'result','type':'number'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: trunc(7.984938,2)})')).toStrictEqual([{'name':'result','type':'number'}])
		expect(orm.model('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: toNumber("3.141516")})')).toStrictEqual([{'name':'result','type':'number'}])
	})
	test('parameters', () => {
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 3+2-1 })')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 3*4-1})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 1-2-5})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: (2+3)*2})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 2*(3+2)})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 1+2*3*4})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: (1+(2**3)*4)})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 1+2**(3*4)})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: abs(-9)})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: acos(0.434)})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: asin(0.434)})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: atan(2)})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: atan2(90, 15)})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: ceil(2)})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: cos(2)})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: cosh(2)})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: exp(7)})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: floor(7)})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: ln(7)})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: log(7,10)})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: log10(7)})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: remainder(7,2)})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: round(7.984938,2)})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: sign(-7)})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: sin(7)})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: sinh(7)})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: tan(7)})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: tanh(7)})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: trunc(7.984938,2)})')).toStrictEqual([])
		expect(orm.parameters('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: toNumber("3.141516")})')).toStrictEqual([])
	})
	test('constraints', () => {
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 3+2-1 })')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 3*4-1})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 1-2-5})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: (2+3)*2})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 2*(3+2)})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 1+2*3*4})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: (1+(2**3)*4)})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 1+2**(3*4)})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: abs(-9)})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: acos(0.434)})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: asin(0.434)})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: atan(2)})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: atan2(90, 15)})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: ceil(2)})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: cos(2)})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: cosh(2)})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: exp(7)})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: floor(7)})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: ln(7)})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: log(7,10)})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: log10(7)})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: remainder(7,2)})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: round(7.984938,2)})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: sign(-7)})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: sin(7)})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: sinh(7)})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: tan(7)})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: tanh(7)})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: trunc(7.984938,2)})')).toStrictEqual({"entity":"Countries","constraints":[]})
		expect(orm.constraints('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: toNumber("3.141516")})')).toStrictEqual({"entity":"Countries","constraints":[]})
	})
	test('getInfo', () => {
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 3+2-1 })',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT ((3 + 2) - 1) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 3*4-1})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT ((3 * 4) - 1) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 1-2-5})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT ((1 - 2) - 5) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: (2+3)*2})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT ((2 + 3) * 2) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 2*(3+2)})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT (2 * (3 + 2)) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 1+2*3*4})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT (1 + ((2 * 3) * 4)) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: (1+(2**3)*4)})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT (1 + (POWER(2,3) * 4)) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: 1+2**(3*4)})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT (1 + POWER(2,(3 * 4))) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: abs(-9)})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT ABS(-9) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: acos(0.434)})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT ACOS(0.434) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: asin(0.434)})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT ASIN(0.434) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: atan(2)})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT ATAN(2) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: atan2(90, 15)})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT ATAN(90,15) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: ceil(2)})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT CEIL(2) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: cos(2)})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT COS(2) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: cosh(2)})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT ((EXP(2) + EXP(-2)) / 2) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: exp(7)})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT EXP(7) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: floor(7)})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT FLOOR(7) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: ln(7)})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT LN(7) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: log(7,10)})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT LOG(7,10) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: log10(7)})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT LOG10(7) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: remainder(7,2)})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT (7 - 2*ROUND(7/2)) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: round(7.984938,2)})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT ROUND(7.984938,2) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: sign(-7)})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT SIGN(-7) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: sin(7)})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT SIN(7) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: sinh(7)})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT ((EXP(7) - EXP(-7)) / 2) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: tan(7)})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT TAN(7) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: tanh(7)})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT (EXP(2*7) - 1)/(EXP(2*7) + 1) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: trunc(7.984938,2)})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT TRUNCATE(7.984938,2) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
		expect(orm.getInfo('Countries.filter(p=> p.iso3 == "BRA").map(p=> {result: toNumber("3.141516")})',{ stage: 'stage1' })).toStrictEqual({"entity":"Countries","dialect":"MySQL","source":"dataSource1","sentence":"SELECT CONVERT('3.141516', DECIMAL) AS result FROM Countries c  WHERE c.iso3 = 'BRA' ","children":[]})
	})
})
