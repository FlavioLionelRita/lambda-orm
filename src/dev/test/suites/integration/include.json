{
  "name": "include",
  "context": {
    "id": 1
  },
  "cases": [
    {
      "name": "MySQL",
      "tests": [
        {
          "test": "Orders.filter(p => p.id === id).include(p => p.customer)",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => p.details)",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details, p.customer])",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details.include(q => q.product), p.customer]) ",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details.include(q => q.product.include(p => p.category)), p.customer]) ",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details.map(p => ({ quantity: p.quantity, unitPrice: p.unitPrice, productId: p.productId })), p.customer])",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details.include(q => q.product).map(p => ({ quantity: p.quantity, unitPrice: p.unitPrice, productId: p.productId })), p.customer])",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.customer.map(p => p.name), p.details.include(p => p.product.include(p => p.category.map(p => p.name)).map(p => p.name)).map(p => [p.quantity, p.unitPrice])])",
          "result": []
        }
      ],
      "errors": 0
    },
    {
      "name": "MariaDB",
      "tests": [
        {
          "test": "Orders.filter(p => p.id === id).include(p => p.customer)",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => p.details)",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details, p.customer])",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details.include(q => q.product), p.customer]) ",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details.include(q => q.product.include(p => p.category)), p.customer]) ",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details.map(p => ({ quantity: p.quantity, unitPrice: p.unitPrice, productId: p.productId })), p.customer])",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details.include(q => q.product).map(p => ({ quantity: p.quantity, unitPrice: p.unitPrice, productId: p.productId })), p.customer])",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.customer.map(p => p.name), p.details.include(p => p.product.include(p => p.category.map(p => p.name)).map(p => p.name)).map(p => [p.quantity, p.unitPrice])])",
          "result": []
        }
      ],
      "errors": 0
    },
    {
      "name": "PostgreSQL",
      "tests": [
        {
          "test": "Orders.filter(p => p.id === id).include(p => p.customer)",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => p.details)",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details, p.customer])",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details.include(q => q.product), p.customer]) ",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details.include(q => q.product.include(p => p.category)), p.customer]) ",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details.map(p => ({ quantity: p.quantity, unitPrice: p.unitPrice, productId: p.productId })), p.customer])",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details.include(q => q.product).map(p => ({ quantity: p.quantity, unitPrice: p.unitPrice, productId: p.productId })), p.customer])",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.customer.map(p => p.name), p.details.include(p => p.product.include(p => p.category.map(p => p.name)).map(p => p.name)).map(p => [p.quantity, p.unitPrice])])",
          "result": []
        }
      ],
      "errors": 0
    },
    {
      "name": "SqlServer",
      "tests": [
        {
          "test": "Orders.filter(p => p.id === id).include(p => p.customer)",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => p.details)",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details, p.customer])",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details.include(q => q.product), p.customer]) ",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details.include(q => q.product.include(p => p.category)), p.customer]) ",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details.map(p => ({ quantity: p.quantity, unitPrice: p.unitPrice, productId: p.productId })), p.customer])",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details.include(q => q.product).map(p => ({ quantity: p.quantity, unitPrice: p.unitPrice, productId: p.productId })), p.customer])",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.customer.map(p => p.name), p.details.include(p => p.product.include(p => p.category.map(p => p.name)).map(p => p.name)).map(p => [p.quantity, p.unitPrice])])",
          "result": []
        }
      ],
      "errors": 0
    },
    {
      "name": "Oracle",
      "tests": [
        {
          "test": "Orders.filter(p => p.id === id).include(p => p.customer)",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => p.details)",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details, p.customer])",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details.include(q => q.product), p.customer]) ",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details.include(q => q.product.include(p => p.category)), p.customer]) ",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details.map(p => ({ quantity: p.quantity, unitPrice: p.unitPrice, productId: p.productId })), p.customer])",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details.include(q => q.product).map(p => ({ quantity: p.quantity, unitPrice: p.unitPrice, productId: p.productId })), p.customer])",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.customer.map(p => p.name), p.details.include(p => p.product.include(p => p.category.map(p => p.name)).map(p => p.name)).map(p => [p.quantity, p.unitPrice])])",
          "result": []
        }
      ],
      "errors": 0
    },
    {
      "name": "MongoDB",
      "tests": [
        {
          "test": "Orders.filter(p => p.id === id).include(p => p.customer)",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => p.details)",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details, p.customer])",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details.include(q => q.product), p.customer]) ",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details.include(q => q.product.include(p => p.category)), p.customer]) ",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details.map(p => ({ quantity: p.quantity, unitPrice: p.unitPrice, productId: p.productId })), p.customer])",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.details.include(q => q.product).map(p => ({ quantity: p.quantity, unitPrice: p.unitPrice, productId: p.productId })), p.customer])",
          "result": []
        },
        {
          "test": "Orders.filter(p => p.id === id).include(p => [p.customer.map(p => p.name), p.details.include(p => p.product.include(p => p.category.map(p => p.name)).map(p => p.name)).map(p => [p.quantity, p.unitPrice])])",
          "result": []
        }
      ],
      "errors": 0
    }
  ],
  "errors": 0
}