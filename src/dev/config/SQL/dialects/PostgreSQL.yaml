_extends: [SQL]
dbTypes:
  dateTime: TIMESTAMP
types:
  integer: integer
  bigint: integer
  smallint: integer
  decimal: decimal
  numeric: decimal
  real: decimal
  double: decimal
  'double precision': decimal
  'character varying': string
  uuid: string
  text: string
  'timestamp without time zone': dateTime
  'timestamp with time zone': dateTime
  date: date
  time: time
  'time without time zone': time
  'time with time zone': time
  boolean: boolean
ddl:
  incrementalColumDefine: "{name} serial"
  dropPk: "DROP CONSTRAINT IF EXISTS {name}"
  dropUk: "DROP CONSTRAINT IF EXISTS {name}"
  dropFk: "DROP CONSTRAINT IF EXISTS {name}"
  dropIndex: "DROP INDEX IF EXISTS {name}"
  alterProperty: 'ALTER COLUMN {columnDefine}'
  alterPropertyType: '{name} SET DATA TYPE {type}'
  alterPropertyNullable: '{name} DROP NOT NULL'
  alterPropertyNotNullable: '{name} SET NOT NULL'
  objects: |
    SELECT
      CASE
        WHEN t.table_type = 'BASE TABLE' THEN 'table'
        WHEN t.table_type = 'VIEW' THEN 'view'
        ELSE 'unknown'
      END AS "type",
      t.table_name AS "name",
      ts.tablespace_name AS "tablespace",
      pg_catalog.obj_description(t.table_name::regclass, 'pg_class') AS "comment"
    FROM information_schema.tables t
    JOIN (SELECT tablename AS table_name,
      COALESCE(tablespace,'pg_default') AS tablespace_name
      FROM pg_tables 
      WHERE schemaname = current_schema
      ) as ts ON ts.table_name = t.table_name
    WHERE t.table_catalog = current_catalog
      AND t.table_schema = current_schema
      AND t.table_type IN ('BASE TABLE', 'VIEW')  
  tables: |
        SELECT
          t.table_name AS "tableName",
          ts.tablespace_name AS "tablespace",
          c.column_name AS "columnName",
          c.data_type AS "dbType",
          c.is_nullable = 'YES' AS "required",
          c.is_identity AS "isIdentity",
          (pg_get_serial_sequence(t.table_name,lower(c.column_name)) IS NOT NULL) AS "autoIncrement",
          c.character_maximum_length AS "length",
          c.numeric_precision AS "precision",
          c.numeric_scale AS "scale",
          c.datetime_precision AS "time"    
        FROM information_schema.tables t
        JOIN information_schema.columns c ON t.table_name = c.table_name
        JOIN (SELECT tablename AS table_name,
          COALESCE(tablespace,'pg_default') AS tablespace_name
          FROM pg_tables 
          WHERE schemaname = current_schema
          ) as ts ON ts.table_name = t.table_name
        WHERE t.table_catalog = current_catalog
          AND t.table_schema = current_schema
          AND c.table_catalog = current_catalog
          AND c.table_schema = current_schema
          AND t.table_type = 'BASE TABLE'
          AND t.table_name IN ({names})
  views: |
    SELECT
      t.table_name AS "tableName",
      ts.tablespace_name AS "tablespace",
      c.column_name AS "columnName",
      c.data_type AS "dbType",
      c.is_nullable = 'YES' AS "required",
      c.is_identity AS "isIdentity",
      (pg_get_serial_sequence(t.table_name,lower(c.column_name)) IS NOT NULL) AS "autoIncrement",
      c.character_maximum_length AS "length",
      c.numeric_precision AS "precision",
      c.numeric_scale AS "scale",
      c.datetime_precision AS "time"    
    FROM information_schema.tables t
    JOIN information_schema.columns c ON t.table_name = c.table_name
    JOIN (SELECT tablename AS table_name,
      COALESCE(tablespace,'pg_default') AS tablespace_name
      FROM pg_tables 
      WHERE schemaname = current_schema
      ) as ts ON ts.table_name = t.table_name
    WHERE t.table_catalog = current_catalog
      AND t.table_schema = current_schema
      AND c.table_catalog = current_catalog
      AND c.table_schema = current_schema
      AND t.table_type = 'VIEW'
      AND t.table_name IN ({names})
  primaryKeys: |
    SELECT
      tc.table_name AS "tableName",
      kcu.column_name AS "columnName",
      tc.constraint_name AS "constraintName"
    FROM information_schema.table_constraints tc
    JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name
    WHERE tc.constraint_type = 'PRIMARY KEY'
      AND tc.table_catalog = current_catalog
      AND tc.table_schema = current_schema
      AND tc.table_name IN ({tableNames})
  uniqueKeys: |
    SELECT
      tc.table_name AS "tableName",
      kcu.column_name AS "columnName",
      tc.constraint_name AS "constraintName"
    FROM information_schema.table_constraints tc
    JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name
    WHERE tc.constraint_type = 'UNIQUE'
      AND tc.table_catalog = current_catalog
      AND tc.table_schema = current_schema
      AND tc.table_name IN ({tableNames})
  foreignKeys: |
    SELECT
      tc.table_name AS "tableName",
      kcu.column_name AS "columnName",
      ccu.table_name AS "refTableName",
      ccu.column_name AS "refColumnName",
      tc.constraint_name AS "constraintName"
    FROM information_schema.table_constraints tc
    JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name
    JOIN information_schema.constraint_column_usage ccu ON tc.constraint_name = ccu.constraint_name
    WHERE tc.constraint_type = 'FOREIGN KEY'
      AND tc.table_catalog = current_catalog
      AND tc.table_schema = current_schema
      AND tc.table_name IN ({tableNames})
  indexes: |
    SELECT
      t.relname AS "tableName",
      i.relname AS "indexName",
      a.attname AS "columnName",
      ix.indisunique AS "isUnique",
      ix.indisprimary AS "isPrimary"
    FROM pg_class t
    JOIN pg_index ix ON t.oid = ix.indrelid
    JOIN pg_class i ON i.oid = ix.indexrelid
    JOIN pg_attribute a ON a.attrelid = t.oid
    WHERE t.relkind = 'r'
      AND t.relname IN ({tableNames})
      AND a.attnum = ANY(ix.indkey)
  sequences: |
    SELECT
      sequence_name AS "sequenceName",
      start_value AS "startValue",
      increment AS "increment"
    FROM information_schema.sequences
    WHERE sequence_catalog = current_catalog
      AND sequence_schema = current_schema
      AND sequence_name IN ({sequenceNames})
dml:
  page: "{sentence} OFFSET {offset} LIMIT {records}"
  insert: INSERT INTO {name}({fields}) VALUES({values}) RETURNING {autoIncrementField} AS id
  bulkInsert: INSERT INTO {name}({fields}) VALUES
others:
  variable: "${number}"
operators:
  binary:  
    '^': '{0} # {1}'
    '^=': '{0} = {0} # {1}'  
functions:
  numeric:
    round: "ROUND(CAST({0} AS DECIMAL),{1})"
    remainder: "MOD({0},{1})"
    toNumber: "CAST({0} AS INTEGER)"
    log10: 'LOG({0})'
  dateTime:
    # https://www.postgresql.org/docs/8.4/datatype-dateTime.html
    # https://www.postgresql.org/docs/9.1/functions-formatting.html
    now: 'to_char(now()::timestamp at time zone ''UTC'', ''YYYY-MM-DD"T"HH24:MI:SS"."MS"Z"'')'
    today: "to_char(now()::timestamp at time zone 'UTC', 'YYYY-MM-DD')"
    curTime: "to_char(now()::timestamp at time zone 'UTC', 'HH24:MI:SS')"
    dateTime: 'to_char({0}::timestamp at time zone ''UTC'', ''YYYY-MM-DD"T"HH24:MI:SS"."MS"Z"'')'
    date: "to_char({0}::timestamp at time zone 'UTC', 'YYYY-MM-DD')"
    time: "to_char({0}::timestamp at time zone 'UTC', 'HH24:MI:SS')"
    year: "date_part('year', timestamp {0})"
    month: "date_part('month', timestamp {0})"
    day: "date_part('day', timestamp {0})"
    weekday: "extract(dow from timestamp {0})"
    hour: "date_part('hour', timestamp {0})"
    minute: "date_part('minute', timestamp {0})"
    second: "date_part('second', timestamp {0})"
    millisecond: "mod(extract('millisecond' from timestamp {0})::decimal/1000,1)*1000"
    addYear: "(timestamp {0} + ({1} * INTERVAL '1 year'))"
    addMonth: "(timestamp {0} + ({1}  * INTERVAL '1 month'))"
    addDay: "(timestamp {0} + ({1}  * INTERVAL '1 day'))"
    addHour: "(timestamp {0} + ({1}  * INTERVAL '1 hour'))"
    addMinute: "(timestamp {0} + ({1}  * INTERVAL '1 minute'))"
    addSecond: "(timestamp {0} + ({1}  * INTERVAL '1 second'))"
    addMillisecond: "(timestamp {0} + ({1}  * INTERVAL '1 millisecond'))"
    addTime: "(timestamp {0} + time {1})"
    subtractTime: "(timestamp {0} - time {1})"
    dayDiff: "(extract('epoch' from (timestamp {0} - timestamp {1} ))/ (24 * 3600))"
    hourDiff: "(extract('epoch' from (timestamp {0} - timestamp {1} ))/3600)"
    secondDiff: "extract('epoch' from (timestamp {0} - timestamp {1} ))"
    millisecondDiff: "(extract('epoch' from (timestamp {0} - timestamp {1} ))*1000)"
    dayToDate: 'to_char(TO_TIMESTAMP({0}*24*3600*1000)::timestamp, ''YYYY-MM-DD"T"HH24:MI:SS"."MS"Z"'')'
    hourToDate: 'to_char(TO_TIMESTAMP({0}*3600*1000)::timestamp, ''YYYY-MM-DD"T"HH24:MI:SS"."MS"Z"'')'
    secondToDate: 'to_char(TO_TIMESTAMP({0}*1000)::timestamp, ''YYYY-MM-DD"T"HH24:MI:SS"."MS"Z"'')'
    millisecondToDate: 'to_char(TO_TIMESTAMP({0})::timestamp, ''YYYY-MM-DD"T"HH24:MI:SS"."MS"Z"'')'
    dateToString: 'to_char ({0}::timestamp at time zone ''UTC'', ''YYYY-MM-DD"T"HH24:MI:SS"Z"'')'    
  null:
    nvl: "(CASE WHEN {0} IS NOT NULL THEN {0} ELSE {1} END)"
    nvl2: "(CASE WHEN {0} IS NOT NULL THEN {1} ELSE {2} END)"   
