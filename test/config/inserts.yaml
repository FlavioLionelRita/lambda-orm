name: inserts
schema: 'northwind:0.0.2'
test:
  - name: insert 1
    lambda: () => Products.insert()
    sentences:
      - dialect: mariadb
        sentence: >-
          INSERT INTO
          Products(ProductName,SupplierID,CategoryID,QuantityPerUnit,UnitPrice,UnitsInStock,UnitsOnOrder,ReorderLevel,Discontinued)
          VALUES(?,?,?,?,?,?,?,?,?);
      - dialect: mssql
        sentence: >-
          INSERT INTO
          Products(ProductName,SupplierID,CategoryID,QuantityPerUnit,UnitPrice,UnitsInStock,UnitsOnOrder,ReorderLevel,Discontinued)
          VALUES(:name,:supplierId,:categoryId,:quantity,:price,:inStock,:onOrder,:reorderLevel,:discontinued);
      - dialect: mysql
        sentence: >-
          INSERT INTO
          Products(ProductName,SupplierID,CategoryID,QuantityPerUnit,UnitPrice,UnitsInStock,UnitsOnOrder,ReorderLevel,Discontinued)
          VALUES(?,?,?,?,?,?,?,?,?);
      - dialect: oracle
        sentence: >-
          INSERT INTO
          Products(ProductName,SupplierID,CategoryID,QuantityPerUnit,UnitPrice,UnitsInStock,UnitsOnOrder,ReorderLevel,Discontinued)
          VALUES(:name,:supplierId,:categoryId,:quantity,:price,:inStock,:onOrder,:reorderLevel,:discontinued);
      - dialect: postgres
        sentence: >-
          INSERT INTO
          Products(ProductName,SupplierID,CategoryID,QuantityPerUnit,UnitPrice,UnitsInStock,UnitsOnOrder,ReorderLevel,Discontinued)
          VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING ProductID AS id;
    expression: ' Products.insert()'
    model:
      name: string
      supplierId: integer
      categoryId: integer
      quantity: string
      price: decimal
      inStock: decimal
      onOrder: decimal
      reorderLevel: decimal
      discontinued: boolean
  - name: insert 2
    lambda: () => Orders.insert()
    sentences:
      - dialect: mariadb
        sentence: >-
          INSERT INTO
          Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry)
          VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?);
      - dialect: mssql
        sentence: >-
          INSERT INTO
          Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry)
          VALUES(:customerId,:employeeId,:orderDate,:requiredDate,:shippedDate,:shipViaId,:freight,:name,:address,:city,:region,:postalCode,:country);
      - dialect: mysql
        sentence: >-
          INSERT INTO
          Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry)
          VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?);
      - dialect: oracle
        sentence: >-
          INSERT INTO
          Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry)
          VALUES(:customerId,:employeeId,:orderDate,:requiredDate,:shippedDate,:shipViaId,:freight,:name,:address,:city,:region,:postalCode,:country);
      - dialect: postgres
        sentence: >-
          INSERT INTO
          Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry)
          VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) RETURNING OrderID
          AS id;
    expression: ' Orders.insert()'
    model:
      customerId: string
      employeeId: integer
      orderDate: datetime
      requiredDate: datetime
      shippedDate: datetime
      shipViaId: integer
      freight: decimal
      name: string
      address: string
      city: string
      region: string
      postalCode: string
      country: string
  - name: insert 3
    lambda: >-
      (name, customerId, shippedDate) => Orders.insert({ name: name, customerId:
      customerId, shippedDate: shippedDate })
    sentences:
      - dialect: mariadb
        sentence: 'INSERT INTO Orders(ShipName,CustomerID,ShippedDate) VALUES(?,?,?);'
      - dialect: mssql
        sentence: >-
          INSERT INTO Orders(ShipName,CustomerID,ShippedDate)
          VALUES(:name,:customerId,:shippedDate);
      - dialect: mysql
        sentence: 'INSERT INTO Orders(ShipName,CustomerID,ShippedDate) VALUES(?,?,?);'
      - dialect: oracle
        sentence: >-
          INSERT INTO Orders(ShipName,CustomerID,ShippedDate)
          VALUES(:name,:customerId,:shippedDate);
      - dialect: postgres
        sentence: >-
          INSERT INTO Orders(ShipName,CustomerID,ShippedDate) VALUES($1,$2,$3)
          RETURNING OrderID AS id;
    expression: ' Orders.insert({ name: name, customerId: customerId, shippedDate: shippedDate })'
    model:
      name: string
      customerId: string
      shippedDate: datetime
  - name: insert 4
    lambda: >-
      (o) => Orders.insert({ name: o.name, customerId: o.customerId,
      shippedDate: o.shippedDate })
    sentences:
      - dialect: mariadb
        sentence: 'INSERT INTO Orders(ShipName,CustomerID,ShippedDate) VALUES(?,?,?);'
      - dialect: mssql
        sentence: >-
          INSERT INTO Orders(ShipName,CustomerID,ShippedDate)
          VALUES(:o.name,:o.customerId,:o.shippedDate);
      - dialect: mysql
        sentence: 'INSERT INTO Orders(ShipName,CustomerID,ShippedDate) VALUES(?,?,?);'
      - dialect: oracle
        sentence: >-
          INSERT INTO Orders(ShipName,CustomerID,ShippedDate)
          VALUES(:o.name,:o.customerId,:o.shippedDate);
      - dialect: postgres
        sentence: >-
          INSERT INTO Orders(ShipName,CustomerID,ShippedDate) VALUES($1,$2,$3)
          RETURNING OrderID AS id;
    expression: ' Orders.insert({ name: o.name, customerId: o.customerId, shippedDate: o.shippedDate })'
    model:
      name: string
      customerId: string
      shippedDate: datetime
  - name: insert 5
    lambda: () => Orders.insert().include(p => p.details)
    sentences:
      - dialect: mariadb
        sentence: >-
          INSERT INTO
          Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry)
          VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?);

          INSERT INTO `Order
          Details`(OrderID,ProductID,UnitPrice,Quantity,Discount)
          VALUES(?,?,?,?,?);
      - dialect: mssql
        sentence: >-
          INSERT INTO
          Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry)
          VALUES(:customerId,:employeeId,:orderDate,:requiredDate,:shippedDate,:shipViaId,:freight,:name,:address,:city,:region,:postalCode,:country);

          INSERT INTO [Order
          Details](OrderID,ProductID,UnitPrice,Quantity,Discount)
          VALUES(:orderId,:productId,:unitPrice,:quantity,:discount);
      - dialect: mysql
        sentence: >-
          INSERT INTO
          Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry)
          VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?);

          INSERT INTO `Order
          Details`(OrderID,ProductID,UnitPrice,Quantity,Discount)
          VALUES(?,?,?,?,?);
      - dialect: oracle
        sentence: >-
          INSERT INTO
          Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry)
          VALUES(:customerId,:employeeId,:orderDate,:requiredDate,:shippedDate,:shipViaId,:freight,:name,:address,:city,:region,:postalCode,:country);

          INSERT INTO "Order
          Details"(OrderID,ProductID,UnitPrice,Quantity,Discount)
          VALUES(:orderId,:productId,:unitPrice,:quantity,:discount);
      - dialect: postgres
        sentence: >-
          INSERT INTO
          Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry)
          VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) RETURNING OrderID
          AS id;

          INSERT INTO "Order
          Details"(OrderID,ProductID,UnitPrice,Quantity,Discount)
          VALUES($1,$2,$3,$4,$5) RETURNING 0 AS id;
    expression: ' Orders.insert().include(p => p.details)'
    model:
      customerId: string
      employeeId: integer
      orderDate: datetime
      requiredDate: datetime
      shippedDate: datetime
      shipViaId: integer
      freight: decimal
      name: string
      address: string
      city: string
      region: string
      postalCode: string
      country: string
      details:
        - orderId: integer
          productId: integer
          unitPrice: decimal
          quantity: decimal
          discount: decimal
  - name: insert 6
    lambda: () => Orders.insert().include(p => p.details)
    sentences:
      - dialect: mariadb
        sentence: >-
          INSERT INTO
          Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry)
          VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?);

          INSERT INTO `Order
          Details`(OrderID,ProductID,UnitPrice,Quantity,Discount)
          VALUES(?,?,?,?,?);
      - dialect: mssql
        sentence: >-
          INSERT INTO
          Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry)
          VALUES(:customerId,:employeeId,:orderDate,:requiredDate,:shippedDate,:shipViaId,:freight,:name,:address,:city,:region,:postalCode,:country);

          INSERT INTO [Order
          Details](OrderID,ProductID,UnitPrice,Quantity,Discount)
          VALUES(:orderId,:productId,:unitPrice,:quantity,:discount);
      - dialect: mysql
        sentence: >-
          INSERT INTO
          Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry)
          VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?);

          INSERT INTO `Order
          Details`(OrderID,ProductID,UnitPrice,Quantity,Discount)
          VALUES(?,?,?,?,?);
      - dialect: oracle
        sentence: >-
          INSERT INTO
          Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry)
          VALUES(:customerId,:employeeId,:orderDate,:requiredDate,:shippedDate,:shipViaId,:freight,:name,:address,:city,:region,:postalCode,:country);

          INSERT INTO "Order
          Details"(OrderID,ProductID,UnitPrice,Quantity,Discount)
          VALUES(:orderId,:productId,:unitPrice,:quantity,:discount);
      - dialect: postgres
        sentence: >-
          INSERT INTO
          Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry)
          VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) RETURNING OrderID
          AS id;

          INSERT INTO "Order
          Details"(OrderID,ProductID,UnitPrice,Quantity,Discount)
          VALUES($1,$2,$3,$4,$5) RETURNING 0 AS id;
    expression: ' Orders.insert().include(p => p.details)'
    model:
      customerId: string
      employeeId: integer
      orderDate: datetime
      requiredDate: datetime
      shippedDate: datetime
      shipViaId: integer
      freight: decimal
      name: string
      address: string
      city: string
      region: string
      postalCode: string
      country: string
      details:
        - orderId: integer
          productId: integer
          unitPrice: decimal
          quantity: decimal
          discount: decimal
  - name: insert 7
    lambda: '() => Orders.insert().include(p => [p.details, p.customer])'
    sentences:
      - dialect: mariadb
        sentence: >-
          INSERT INTO
          Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry)
          VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?);

          INSERT INTO `Order
          Details`(OrderID,ProductID,UnitPrice,Quantity,Discount)
          VALUES(?,?,?,?,?);

          INSERT INTO
          Customers(CustomerID,CompanyName,ContactName,ContactTitle,Address,City,Region,PostalCode,Country)
          VALUES(?,?,?,?,?,?,?,?,?);
      - dialect: mssql
        sentence: >-
          INSERT INTO
          Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry)
          VALUES(:customerId,:employeeId,:orderDate,:requiredDate,:shippedDate,:shipViaId,:freight,:name,:address,:city,:region,:postalCode,:country);

          INSERT INTO [Order
          Details](OrderID,ProductID,UnitPrice,Quantity,Discount)
          VALUES(:orderId,:productId,:unitPrice,:quantity,:discount);

          INSERT INTO
          Customers(CustomerID,CompanyName,ContactName,ContactTitle,Address,City,Region,PostalCode,Country)
          VALUES(:id,:name,:contact,:phone,:address,:city,:region,:postalCode,:country);
      - dialect: mysql
        sentence: >-
          INSERT INTO
          Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry)
          VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?);

          INSERT INTO `Order
          Details`(OrderID,ProductID,UnitPrice,Quantity,Discount)
          VALUES(?,?,?,?,?);

          INSERT INTO
          Customers(CustomerID,CompanyName,ContactName,ContactTitle,Address,City,Region,PostalCode,Country)
          VALUES(?,?,?,?,?,?,?,?,?);
      - dialect: oracle
        sentence: >-
          INSERT INTO
          Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry)
          VALUES(:customerId,:employeeId,:orderDate,:requiredDate,:shippedDate,:shipViaId,:freight,:name,:address,:city,:region,:postalCode,:country);

          INSERT INTO "Order
          Details"(OrderID,ProductID,UnitPrice,Quantity,Discount)
          VALUES(:orderId,:productId,:unitPrice,:quantity,:discount);

          INSERT INTO
          Customers(CustomerID,CompanyName,ContactName,ContactTitle,Address,City,Region,PostalCode,Country)
          VALUES(:id,:name,:contact,:phone,:address,:city,:region,:postalCode,:country);
      - dialect: postgres
        sentence: >-
          INSERT INTO
          Orders(CustomerID,EmployeeID,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry)
          VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) RETURNING OrderID
          AS id;

          INSERT INTO "Order
          Details"(OrderID,ProductID,UnitPrice,Quantity,Discount)
          VALUES($1,$2,$3,$4,$5) RETURNING 0 AS id;

          INSERT INTO
          Customers(CustomerID,CompanyName,ContactName,ContactTitle,Address,City,Region,PostalCode,Country)
          VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING 0 AS id;
    expression: ' Orders.insert().include(p => [p.details, p.customer])'
    model:
      customerId: string
      employeeId: integer
      orderDate: datetime
      requiredDate: datetime
      shippedDate: datetime
      shipViaId: integer
      freight: decimal
      name: string
      address: string
      city: string
      region: string
      postalCode: string
      country: string
      details:
        - orderId: integer
          productId: integer
          unitPrice: decimal
          quantity: decimal
          discount: decimal
      customer:
        id: string
        name: string
        contact: string
        phone: string
        address: string
        city: string
        region: string
        postalCode: string
        country: string
  - name: insert 8
    lambda: '(entity) => Orders.insert(entity).include(p => [p.details, p.customer])'
    sentences:
      - dialect: mariadb
        sentence: >-
          INSERT INTO Orders() VALUES();

          INSERT INTO `Order
          Details`(OrderID,ProductID,UnitPrice,Quantity,Discount)
          VALUES(?,?,?,?,?);

          INSERT INTO
          Customers(CustomerID,CompanyName,ContactName,ContactTitle,Address,City,Region,PostalCode,Country)
          VALUES(?,?,?,?,?,?,?,?,?);
      - dialect: mssql
        sentence: >-
          INSERT INTO Orders() VALUES();

          INSERT INTO [Order
          Details](OrderID,ProductID,UnitPrice,Quantity,Discount)
          VALUES(:orderId,:productId,:unitPrice,:quantity,:discount);

          INSERT INTO
          Customers(CustomerID,CompanyName,ContactName,ContactTitle,Address,City,Region,PostalCode,Country)
          VALUES(:id,:name,:contact,:phone,:address,:city,:region,:postalCode,:country);
      - dialect: mysql
        sentence: >-
          INSERT INTO Orders() VALUES();

          INSERT INTO `Order
          Details`(OrderID,ProductID,UnitPrice,Quantity,Discount)
          VALUES(?,?,?,?,?);

          INSERT INTO
          Customers(CustomerID,CompanyName,ContactName,ContactTitle,Address,City,Region,PostalCode,Country)
          VALUES(?,?,?,?,?,?,?,?,?);
      - dialect: oracle
        sentence: >-
          INSERT INTO Orders() VALUES();

          INSERT INTO "Order
          Details"(OrderID,ProductID,UnitPrice,Quantity,Discount)
          VALUES(:orderId,:productId,:unitPrice,:quantity,:discount);

          INSERT INTO
          Customers(CustomerID,CompanyName,ContactName,ContactTitle,Address,City,Region,PostalCode,Country)
          VALUES(:id,:name,:contact,:phone,:address,:city,:region,:postalCode,:country);
      - dialect: postgres
        sentence: >-
          INSERT INTO Orders() VALUES() RETURNING OrderID AS id;

          INSERT INTO "Order
          Details"(OrderID,ProductID,UnitPrice,Quantity,Discount)
          VALUES($1,$2,$3,$4,$5) RETURNING 0 AS id;

          INSERT INTO
          Customers(CustomerID,CompanyName,ContactName,ContactTitle,Address,City,Region,PostalCode,Country)
          VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING 0 AS id;
    expression: ' Orders.insert(entity).include(p => [p.details, p.customer])'
    model:
      details:
        - orderId: integer
          productId: integer
          unitPrice: decimal
          quantity: decimal
          discount: decimal
      customer:
        id: string
        name: string
        contact: string
        phone: string
        address: string
        city: string
        region: string
        postalCode: string
        country: string
