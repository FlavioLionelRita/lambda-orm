{
  "name": "comparison",
  "cases": [
    {
      "name": "normalize",
      "tests": [
        {
          "test": "Countries.filter(p=> p.iso3 == \"BRA\").map(p=> p.name)",
          "result": "Countries.map(p=>{name:p.name}).filter(p=>(p.iso3==BRA))"
        },
        {
          "test": "Countries.filter(p=> p.iso3 === \"BRA\").map(p=> p.name)",
          "result": "Countries.map(p=>{name:p.name}).filter(p=>(p.iso3==BRA))"
        },
        {
          "test": "Countries.filter(p=> p.latitude < -9 && p.latitude > -11 && p.longitude == -55 ).first(p=> p.name)",
          "result": "Countries.map(p=>{name:p.name}).filter(p=>((p.latitude<-9)&&((p.latitude>-11)&&(p.longitude==-55)))).sort(p=>asc(p.name)).page(1,1)"
        },
        {
          "test": "Countries.filter(p=> between(p.latitude,-11,-9) && p.longitude == -55 ).first(p=> p.name)",
          "result": "Countries.map(p=>{name:p.name}).filter(p=>(between(p.latitude,-11,-9)&&(p.longitude==-55))).sort(p=>asc(p.name)).page(1,1)"
        },
        {
          "test": "Countries.filter(p=> in(p.iso3,[\"BRA\",\"ARG\"])).map(p=> p.name)",
          "result": "Countries.map(p=>{name:p.name}).filter(p=>in(p.iso3,[BRA,ARG]))"
        }
      ],
      "errors": 0
    },
    {
      "name": "model",
      "tests": [
        {
          "test": "Countries.filter(p=> p.iso3 == \"BRA\").map(p=> p.name)",
          "result": [
            {
              "name": "name",
              "type": "string"
            }
          ]
        },
        {
          "test": "Countries.filter(p=> p.iso3 === \"BRA\").map(p=> p.name)",
          "result": [
            {
              "name": "name",
              "type": "string"
            }
          ]
        },
        {
          "test": "Countries.filter(p=> p.latitude < -9 && p.latitude > -11 && p.longitude == -55 ).first(p=> p.name)",
          "result": [
            {
              "name": "name",
              "type": "string"
            }
          ]
        },
        {
          "test": "Countries.filter(p=> between(p.latitude,-11,-9) && p.longitude == -55 ).first(p=> p.name)",
          "result": [
            {
              "name": "name",
              "type": "string"
            }
          ]
        },
        {
          "test": "Countries.filter(p=> in(p.iso3,[\"BRA\",\"ARG\"])).map(p=> p.name)",
          "result": [
            {
              "name": "name",
              "type": "string"
            }
          ]
        }
      ],
      "errors": 0
    },
    {
      "name": "parameters",
      "tests": [
        {
          "test": "Countries.filter(p=> p.iso3 == \"BRA\").map(p=> p.name)",
          "result": []
        },
        {
          "test": "Countries.filter(p=> p.iso3 === \"BRA\").map(p=> p.name)",
          "result": []
        },
        {
          "test": "Countries.filter(p=> p.latitude < -9 && p.latitude > -11 && p.longitude == -55 ).first(p=> p.name)",
          "result": []
        },
        {
          "test": "Countries.filter(p=> between(p.latitude,-11,-9) && p.longitude == -55 ).first(p=> p.name)",
          "result": []
        },
        {
          "test": "Countries.filter(p=> in(p.iso3,[\"BRA\",\"ARG\"])).map(p=> p.name)",
          "result": []
        }
      ],
      "errors": 0
    },
    {
      "name": "constraints",
      "tests": [
        {
          "test": "Countries.filter(p=> p.iso3 == \"BRA\").map(p=> p.name)",
          "result": {
            "entity": "Countries",
            "constraints": []
          }
        },
        {
          "test": "Countries.filter(p=> p.iso3 === \"BRA\").map(p=> p.name)",
          "result": {
            "entity": "Countries",
            "constraints": []
          }
        },
        {
          "test": "Countries.filter(p=> p.latitude < -9 && p.latitude > -11 && p.longitude == -55 ).first(p=> p.name)",
          "result": {
            "entity": "Countries",
            "constraints": []
          }
        },
        {
          "test": "Countries.filter(p=> between(p.latitude,-11,-9) && p.longitude == -55 ).first(p=> p.name)",
          "result": {
            "entity": "Countries",
            "constraints": []
          }
        },
        {
          "test": "Countries.filter(p=> in(p.iso3,[\"BRA\",\"ARG\"])).map(p=> p.name)",
          "result": {
            "entity": "Countries",
            "constraints": []
          }
        }
      ],
      "errors": 0
    },
    {
      "name": "metadata",
      "tests": [
        {
          "test": "Countries.filter(p=> p.iso3 == \"BRA\").map(p=> p.name)",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 42
            },
            "name": "select",
            "children": [],
            "type": "any",
            "entity": "Countries",
            "columns": [
              {
                "name": "name",
                "type": "string"
              }
            ],
            "parameters": [],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "select",
            "alias": "c"
          }
        },
        {
          "test": "Countries.filter(p=> p.iso3 === \"BRA\").map(p=> p.name)",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 43
            },
            "name": "select",
            "children": [],
            "type": "any",
            "entity": "Countries",
            "columns": [
              {
                "name": "name",
                "type": "string"
              }
            ],
            "parameters": [],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "select",
            "alias": "c"
          }
        },
        {
          "test": "Countries.filter(p=> p.latitude < -9 && p.latitude > -11 && p.longitude == -55 ).first(p=> p.name)",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 87
            },
            "name": "select",
            "children": [],
            "type": "any",
            "entity": "Countries",
            "columns": [
              {
                "name": "name",
                "type": "string"
              }
            ],
            "parameters": [],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "select",
            "alias": "c"
          }
        },
        {
          "test": "Countries.filter(p=> between(p.latitude,-11,-9) && p.longitude == -55 ).first(p=> p.name)",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 78
            },
            "name": "select",
            "children": [],
            "type": "any",
            "entity": "Countries",
            "columns": [
              {
                "name": "name",
                "type": "string"
              }
            ],
            "parameters": [],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "select",
            "alias": "c"
          }
        },
        {
          "test": "Countries.filter(p=> in(p.iso3,[\"BRA\",\"ARG\"])).map(p=> p.name)",
          "result": {
            "classtype": "Sentence",
            "pos": {
              "ln": 0,
              "col": 51
            },
            "name": "select",
            "children": [],
            "type": "any",
            "entity": "Countries",
            "columns": [
              {
                "name": "name",
                "type": "string"
              }
            ],
            "parameters": [],
            "constraints": [],
            "values": [],
            "defaults": [],
            "clause": "select",
            "alias": "c"
          }
        }
      ],
      "errors": 0
    },
    {
      "name": "getInfo",
      "tests": [
        {
          "test": "Countries.filter(p=> p.iso3 == \"BRA\").map(p=> p.name)",
          "result": {
            "entity": "Countries",
            "dialect": "MySQL",
            "source": "dataSource1",
            "sentence": "SELECT c.name AS name FROM Countries c  WHERE c.iso3 = 'BRA' ",
            "children": []
          }
        },
        {
          "test": "Countries.filter(p=> p.iso3 === \"BRA\").map(p=> p.name)",
          "result": {
            "entity": "Countries",
            "dialect": "MySQL",
            "source": "dataSource1",
            "sentence": "SELECT c.name AS name FROM Countries c  WHERE c.iso3 = 'BRA' ",
            "children": []
          }
        },
        {
          "test": "Countries.filter(p=> p.latitude < -9 && p.latitude > -11 && p.longitude == -55 ).first(p=> p.name)",
          "result": {
            "entity": "Countries",
            "dialect": "MySQL",
            "source": "dataSource1",
            "sentence": "SELECT c.name AS name FROM Countries c  WHERE (c.latitude < -9 AND (c.latitude > -11 AND c.longitude = -55)) ORDER BY c.name asc  LIMIT 0,1 ",
            "children": []
          }
        },
        {
          "test": "Countries.filter(p=> between(p.latitude,-11,-9) && p.longitude == -55 ).first(p=> p.name)",
          "result": {
            "entity": "Countries",
            "dialect": "MySQL",
            "source": "dataSource1",
            "sentence": "SELECT c.name AS name FROM Countries c  WHERE (c.latitude BETWEEN -11 AND -9 AND c.longitude = -55) ORDER BY c.name asc  LIMIT 0,1 ",
            "children": []
          }
        },
        {
          "test": "Countries.filter(p=> in(p.iso3,[\"BRA\",\"ARG\"])).map(p=> p.name)",
          "result": {
            "entity": "Countries",
            "dialect": "MySQL",
            "source": "dataSource1",
            "sentence": "SELECT c.name AS name FROM Countries c  WHERE  c.iso3 IN ('BRA', 'ARG') ",
            "children": []
          }
        }
      ],
      "errors": 0
    }
  ],
  "errors": 0
}